
Bootloader_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae80  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  0800af40  0800af40  0001af40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b944  0800b944  00020664  2**0
                  CONTENTS
  4 .ARM          00000008  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b94c  0800b94c  00020664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b94c  0800b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b950  0800b950  0001b950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000400  0800b954  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000080c  20000668  0800bbb8  00020668  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e74  0800bbb8  00020e74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
 12 .shared_mem   00000016  20000000  20000000  00030000  2**2
                  ALLOC
 13 .debug_info   00014ec8  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d92  00000000  00000000  00035554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000382e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00039450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e812  00000000  00000000  0003a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ea9  00000000  00000000  00058ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf7be  00000000  00000000  0006db8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d349  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f6c  00000000  00000000  0012d39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000003c  00000000  00000000  00132308  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000076  00000000  00000000  00132344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000668 	.word	0x20000668
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800af18 	.word	0x0800af18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000066c 	.word	0x2000066c
 8000104:	0800af18 	.word	0x0800af18

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 fff9 	bl	8001434 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff49 	bl	80012e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffeb 	bl	8001434 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffe1 	bl	8001434 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff71 	bl	8001368 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff67 	bl	8001368 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f001 febe 	bl	8002288 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 feb9 	bl	8002288 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	000d      	movs	r5, r1
 800068a:	0004      	movs	r4, r0
 800068c:	b5c0      	push	{r6, r7, lr}
 800068e:	001f      	movs	r7, r3
 8000690:	0011      	movs	r1, r2
 8000692:	0328      	lsls	r0, r5, #12
 8000694:	0f62      	lsrs	r2, r4, #29
 8000696:	0a40      	lsrs	r0, r0, #9
 8000698:	4310      	orrs	r0, r2
 800069a:	007a      	lsls	r2, r7, #1
 800069c:	0d52      	lsrs	r2, r2, #21
 800069e:	00e3      	lsls	r3, r4, #3
 80006a0:	033c      	lsls	r4, r7, #12
 80006a2:	4691      	mov	r9, r2
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	0ffa      	lsrs	r2, r7, #31
 80006a8:	0f4f      	lsrs	r7, r1, #29
 80006aa:	006e      	lsls	r6, r5, #1
 80006ac:	4327      	orrs	r7, r4
 80006ae:	4692      	mov	sl, r2
 80006b0:	46b8      	mov	r8, r7
 80006b2:	0d76      	lsrs	r6, r6, #21
 80006b4:	0fed      	lsrs	r5, r5, #31
 80006b6:	00c9      	lsls	r1, r1, #3
 80006b8:	4295      	cmp	r5, r2
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x3e>
 80006bc:	e099      	b.n	80007f2 <__aeabi_dadd+0x172>
 80006be:	464c      	mov	r4, r9
 80006c0:	1b34      	subs	r4, r6, r4
 80006c2:	46a4      	mov	ip, r4
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dadd+0x4a>
 80006c8:	e07c      	b.n	80007c4 <__aeabi_dadd+0x144>
 80006ca:	464a      	mov	r2, r9
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x52>
 80006d0:	e0b8      	b.n	8000844 <__aeabi_dadd+0x1c4>
 80006d2:	4ac5      	ldr	r2, [pc, #788]	; (80009e8 <__aeabi_dadd+0x368>)
 80006d4:	4296      	cmp	r6, r2
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x5a>
 80006d8:	e11c      	b.n	8000914 <__aeabi_dadd+0x294>
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	003c      	movs	r4, r7
 80006de:	0412      	lsls	r2, r2, #16
 80006e0:	4314      	orrs	r4, r2
 80006e2:	46a0      	mov	r8, r4
 80006e4:	4662      	mov	r2, ip
 80006e6:	2a38      	cmp	r2, #56	; 0x38
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x6c>
 80006ea:	e161      	b.n	80009b0 <__aeabi_dadd+0x330>
 80006ec:	2a1f      	cmp	r2, #31
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_dadd+0x72>
 80006f0:	e1cc      	b.n	8000a8c <__aeabi_dadd+0x40c>
 80006f2:	4664      	mov	r4, ip
 80006f4:	2220      	movs	r2, #32
 80006f6:	1b12      	subs	r2, r2, r4
 80006f8:	4644      	mov	r4, r8
 80006fa:	4094      	lsls	r4, r2
 80006fc:	000f      	movs	r7, r1
 80006fe:	46a1      	mov	r9, r4
 8000700:	4664      	mov	r4, ip
 8000702:	4091      	lsls	r1, r2
 8000704:	40e7      	lsrs	r7, r4
 8000706:	464c      	mov	r4, r9
 8000708:	1e4a      	subs	r2, r1, #1
 800070a:	4191      	sbcs	r1, r2
 800070c:	433c      	orrs	r4, r7
 800070e:	4642      	mov	r2, r8
 8000710:	4321      	orrs	r1, r4
 8000712:	4664      	mov	r4, ip
 8000714:	40e2      	lsrs	r2, r4
 8000716:	1a80      	subs	r0, r0, r2
 8000718:	1a5c      	subs	r4, r3, r1
 800071a:	42a3      	cmp	r3, r4
 800071c:	419b      	sbcs	r3, r3
 800071e:	425f      	negs	r7, r3
 8000720:	1bc7      	subs	r7, r0, r7
 8000722:	023b      	lsls	r3, r7, #8
 8000724:	d400      	bmi.n	8000728 <__aeabi_dadd+0xa8>
 8000726:	e0d0      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000728:	027f      	lsls	r7, r7, #9
 800072a:	0a7f      	lsrs	r7, r7, #9
 800072c:	2f00      	cmp	r7, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0xb2>
 8000730:	e0ff      	b.n	8000932 <__aeabi_dadd+0x2b2>
 8000732:	0038      	movs	r0, r7
 8000734:	f001 fd8a 	bl	800224c <__clzsi2>
 8000738:	0001      	movs	r1, r0
 800073a:	3908      	subs	r1, #8
 800073c:	2320      	movs	r3, #32
 800073e:	0022      	movs	r2, r4
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	408f      	lsls	r7, r1
 8000744:	40da      	lsrs	r2, r3
 8000746:	408c      	lsls	r4, r1
 8000748:	4317      	orrs	r7, r2
 800074a:	42b1      	cmp	r1, r6
 800074c:	da00      	bge.n	8000750 <__aeabi_dadd+0xd0>
 800074e:	e0ff      	b.n	8000950 <__aeabi_dadd+0x2d0>
 8000750:	1b89      	subs	r1, r1, r6
 8000752:	1c4b      	adds	r3, r1, #1
 8000754:	2b1f      	cmp	r3, #31
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0xda>
 8000758:	e0a8      	b.n	80008ac <__aeabi_dadd+0x22c>
 800075a:	2220      	movs	r2, #32
 800075c:	0039      	movs	r1, r7
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	0020      	movs	r0, r4
 8000762:	4094      	lsls	r4, r2
 8000764:	4091      	lsls	r1, r2
 8000766:	40d8      	lsrs	r0, r3
 8000768:	1e62      	subs	r2, r4, #1
 800076a:	4194      	sbcs	r4, r2
 800076c:	40df      	lsrs	r7, r3
 800076e:	2600      	movs	r6, #0
 8000770:	4301      	orrs	r1, r0
 8000772:	430c      	orrs	r4, r1
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	193f      	adds	r7, r7, r4
 800078a:	001c      	movs	r4, r3
 800078c:	023b      	lsls	r3, r7, #8
 800078e:	d400      	bmi.n	8000792 <__aeabi_dadd+0x112>
 8000790:	e09e      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000792:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <__aeabi_dadd+0x368>)
 8000794:	3601      	adds	r6, #1
 8000796:	429e      	cmp	r6, r3
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x11c>
 800079a:	e0b7      	b.n	800090c <__aeabi_dadd+0x28c>
 800079c:	4a93      	ldr	r2, [pc, #588]	; (80009ec <__aeabi_dadd+0x36c>)
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	4017      	ands	r7, r2
 80007a2:	077b      	lsls	r3, r7, #29
 80007a4:	0571      	lsls	r1, r6, #21
 80007a6:	027f      	lsls	r7, r7, #9
 80007a8:	4323      	orrs	r3, r4
 80007aa:	0b3f      	lsrs	r7, r7, #12
 80007ac:	0d4a      	lsrs	r2, r1, #21
 80007ae:	0512      	lsls	r2, r2, #20
 80007b0:	433a      	orrs	r2, r7
 80007b2:	07ed      	lsls	r5, r5, #31
 80007b4:	432a      	orrs	r2, r5
 80007b6:	0018      	movs	r0, r3
 80007b8:	0011      	movs	r1, r2
 80007ba:	bce0      	pop	{r5, r6, r7}
 80007bc:	46ba      	mov	sl, r7
 80007be:	46b1      	mov	r9, r6
 80007c0:	46a8      	mov	r8, r5
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	2c00      	cmp	r4, #0
 80007c6:	d04b      	beq.n	8000860 <__aeabi_dadd+0x1e0>
 80007c8:	464c      	mov	r4, r9
 80007ca:	1ba4      	subs	r4, r4, r6
 80007cc:	46a4      	mov	ip, r4
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_dadd+0x154>
 80007d2:	e123      	b.n	8000a1c <__aeabi_dadd+0x39c>
 80007d4:	0004      	movs	r4, r0
 80007d6:	431c      	orrs	r4, r3
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x15c>
 80007da:	e1af      	b.n	8000b3c <__aeabi_dadd+0x4bc>
 80007dc:	4662      	mov	r2, ip
 80007de:	1e54      	subs	r4, r2, #1
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x166>
 80007e4:	e215      	b.n	8000c12 <__aeabi_dadd+0x592>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x368>)
 80007e8:	45ac      	cmp	ip, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x16e>
 80007ec:	e1c8      	b.n	8000b80 <__aeabi_dadd+0x500>
 80007ee:	46a4      	mov	ip, r4
 80007f0:	e11b      	b.n	8000a2a <__aeabi_dadd+0x3aa>
 80007f2:	464a      	mov	r2, r9
 80007f4:	1ab2      	subs	r2, r6, r2
 80007f6:	4694      	mov	ip, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_dadd+0x17e>
 80007fc:	e0ac      	b.n	8000958 <__aeabi_dadd+0x2d8>
 80007fe:	464a      	mov	r2, r9
 8000800:	2a00      	cmp	r2, #0
 8000802:	d043      	beq.n	800088c <__aeabi_dadd+0x20c>
 8000804:	4a78      	ldr	r2, [pc, #480]	; (80009e8 <__aeabi_dadd+0x368>)
 8000806:	4296      	cmp	r6, r2
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x18c>
 800080a:	e1af      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	003c      	movs	r4, r7
 8000810:	0412      	lsls	r2, r2, #16
 8000812:	4314      	orrs	r4, r2
 8000814:	46a0      	mov	r8, r4
 8000816:	4662      	mov	r2, ip
 8000818:	2a38      	cmp	r2, #56	; 0x38
 800081a:	dc67      	bgt.n	80008ec <__aeabi_dadd+0x26c>
 800081c:	2a1f      	cmp	r2, #31
 800081e:	dc00      	bgt.n	8000822 <__aeabi_dadd+0x1a2>
 8000820:	e15f      	b.n	8000ae2 <__aeabi_dadd+0x462>
 8000822:	4647      	mov	r7, r8
 8000824:	3a20      	subs	r2, #32
 8000826:	40d7      	lsrs	r7, r2
 8000828:	4662      	mov	r2, ip
 800082a:	2a20      	cmp	r2, #32
 800082c:	d005      	beq.n	800083a <__aeabi_dadd+0x1ba>
 800082e:	4664      	mov	r4, ip
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	1b12      	subs	r2, r2, r4
 8000834:	4644      	mov	r4, r8
 8000836:	4094      	lsls	r4, r2
 8000838:	4321      	orrs	r1, r4
 800083a:	1e4a      	subs	r2, r1, #1
 800083c:	4191      	sbcs	r1, r2
 800083e:	000c      	movs	r4, r1
 8000840:	433c      	orrs	r4, r7
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x274>
 8000844:	003a      	movs	r2, r7
 8000846:	430a      	orrs	r2, r1
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1cc>
 800084a:	e105      	b.n	8000a58 <__aeabi_dadd+0x3d8>
 800084c:	0022      	movs	r2, r4
 800084e:	3a01      	subs	r2, #1
 8000850:	2c01      	cmp	r4, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1d6>
 8000854:	e182      	b.n	8000b5c <__aeabi_dadd+0x4dc>
 8000856:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x368>)
 8000858:	45a4      	cmp	ip, r4
 800085a:	d05b      	beq.n	8000914 <__aeabi_dadd+0x294>
 800085c:	4694      	mov	ip, r2
 800085e:	e741      	b.n	80006e4 <__aeabi_dadd+0x64>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x370>)
 8000862:	1c77      	adds	r7, r6, #1
 8000864:	4227      	tst	r7, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ea>
 8000868:	e0c4      	b.n	80009f4 <__aeabi_dadd+0x374>
 800086a:	0004      	movs	r4, r0
 800086c:	431c      	orrs	r4, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f4>
 8000872:	e169      	b.n	8000b48 <__aeabi_dadd+0x4c8>
 8000874:	2c00      	cmp	r4, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fa>
 8000878:	e1bf      	b.n	8000bfa <__aeabi_dadd+0x57a>
 800087a:	4644      	mov	r4, r8
 800087c:	430c      	orrs	r4, r1
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x202>
 8000880:	e1d0      	b.n	8000c24 <__aeabi_dadd+0x5a4>
 8000882:	0742      	lsls	r2, r0, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c0      	lsrs	r0, r0, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x260>
 800088c:	003a      	movs	r2, r7
 800088e:	430a      	orrs	r2, r1
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x214>
 8000892:	e170      	b.n	8000b76 <__aeabi_dadd+0x4f6>
 8000894:	4662      	mov	r2, ip
 8000896:	4664      	mov	r4, ip
 8000898:	3a01      	subs	r2, #1
 800089a:	2c01      	cmp	r4, #1
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x220>
 800089e:	e0e0      	b.n	8000a62 <__aeabi_dadd+0x3e2>
 80008a0:	4c51      	ldr	r4, [pc, #324]	; (80009e8 <__aeabi_dadd+0x368>)
 80008a2:	45a4      	cmp	ip, r4
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x228>
 80008a6:	e161      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 80008a8:	4694      	mov	ip, r2
 80008aa:	e7b4      	b.n	8000816 <__aeabi_dadd+0x196>
 80008ac:	003a      	movs	r2, r7
 80008ae:	391f      	subs	r1, #31
 80008b0:	40ca      	lsrs	r2, r1
 80008b2:	0011      	movs	r1, r2
 80008b4:	2b20      	cmp	r3, #32
 80008b6:	d003      	beq.n	80008c0 <__aeabi_dadd+0x240>
 80008b8:	2240      	movs	r2, #64	; 0x40
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	409f      	lsls	r7, r3
 80008be:	433c      	orrs	r4, r7
 80008c0:	1e63      	subs	r3, r4, #1
 80008c2:	419c      	sbcs	r4, r3
 80008c4:	2700      	movs	r7, #0
 80008c6:	2600      	movs	r6, #0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0763      	lsls	r3, r4, #29
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x250>
 80008ce:	e753      	b.n	8000778 <__aeabi_dadd+0xf8>
 80008d0:	46b4      	mov	ip, r6
 80008d2:	08e4      	lsrs	r4, r4, #3
 80008d4:	077b      	lsls	r3, r7, #29
 80008d6:	4323      	orrs	r3, r4
 80008d8:	08f8      	lsrs	r0, r7, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x368>)
 80008dc:	4594      	cmp	ip, r2
 80008de:	d01d      	beq.n	800091c <__aeabi_dadd+0x29c>
 80008e0:	4662      	mov	r2, ip
 80008e2:	0307      	lsls	r7, r0, #12
 80008e4:	0552      	lsls	r2, r2, #21
 80008e6:	0b3f      	lsrs	r7, r7, #12
 80008e8:	0d52      	lsrs	r2, r2, #21
 80008ea:	e760      	b.n	80007ae <__aeabi_dadd+0x12e>
 80008ec:	4644      	mov	r4, r8
 80008ee:	430c      	orrs	r4, r1
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	425f      	negs	r7, r3
 80008fc:	183f      	adds	r7, r7, r0
 80008fe:	023b      	lsls	r3, r7, #8
 8000900:	d5e3      	bpl.n	80008ca <__aeabi_dadd+0x24a>
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <__aeabi_dadd+0x368>)
 8000904:	3601      	adds	r6, #1
 8000906:	429e      	cmp	r6, r3
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x28c>
 800090a:	e0b5      	b.n	8000a78 <__aeabi_dadd+0x3f8>
 800090c:	0032      	movs	r2, r6
 800090e:	2700      	movs	r7, #0
 8000910:	2300      	movs	r3, #0
 8000912:	e74c      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000914:	0742      	lsls	r2, r0, #29
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	4313      	orrs	r3, r2
 800091a:	08c0      	lsrs	r0, r0, #3
 800091c:	001a      	movs	r2, r3
 800091e:	4302      	orrs	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x2a4>
 8000922:	e1e1      	b.n	8000ce8 <__aeabi_dadd+0x668>
 8000924:	2780      	movs	r7, #128	; 0x80
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4307      	orrs	r7, r0
 800092a:	033f      	lsls	r7, r7, #12
 800092c:	4a2e      	ldr	r2, [pc, #184]	; (80009e8 <__aeabi_dadd+0x368>)
 800092e:	0b3f      	lsrs	r7, r7, #12
 8000930:	e73d      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000932:	0020      	movs	r0, r4
 8000934:	f001 fc8a 	bl	800224c <__clzsi2>
 8000938:	0001      	movs	r1, r0
 800093a:	3118      	adds	r1, #24
 800093c:	291f      	cmp	r1, #31
 800093e:	dc00      	bgt.n	8000942 <__aeabi_dadd+0x2c2>
 8000940:	e6fc      	b.n	800073c <__aeabi_dadd+0xbc>
 8000942:	3808      	subs	r0, #8
 8000944:	4084      	lsls	r4, r0
 8000946:	0027      	movs	r7, r4
 8000948:	2400      	movs	r4, #0
 800094a:	42b1      	cmp	r1, r6
 800094c:	db00      	blt.n	8000950 <__aeabi_dadd+0x2d0>
 800094e:	e6ff      	b.n	8000750 <__aeabi_dadd+0xd0>
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <__aeabi_dadd+0x36c>)
 8000952:	1a76      	subs	r6, r6, r1
 8000954:	4017      	ands	r7, r2
 8000956:	e70d      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000958:	2a00      	cmp	r2, #0
 800095a:	d02f      	beq.n	80009bc <__aeabi_dadd+0x33c>
 800095c:	464a      	mov	r2, r9
 800095e:	1b92      	subs	r2, r2, r6
 8000960:	4694      	mov	ip, r2
 8000962:	2e00      	cmp	r6, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x2e8>
 8000966:	e0ad      	b.n	8000ac4 <__aeabi_dadd+0x444>
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <__aeabi_dadd+0x368>)
 800096a:	4591      	cmp	r9, r2
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2f0>
 800096e:	e10f      	b.n	8000b90 <__aeabi_dadd+0x510>
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0412      	lsls	r2, r2, #16
 8000974:	4310      	orrs	r0, r2
 8000976:	4662      	mov	r2, ip
 8000978:	2a38      	cmp	r2, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x2fe>
 800097c:	e10f      	b.n	8000b9e <__aeabi_dadd+0x51e>
 800097e:	2a1f      	cmp	r2, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x304>
 8000982:	e180      	b.n	8000c86 <__aeabi_dadd+0x606>
 8000984:	4664      	mov	r4, ip
 8000986:	2220      	movs	r2, #32
 8000988:	001e      	movs	r6, r3
 800098a:	1b12      	subs	r2, r2, r4
 800098c:	4667      	mov	r7, ip
 800098e:	0004      	movs	r4, r0
 8000990:	4093      	lsls	r3, r2
 8000992:	4094      	lsls	r4, r2
 8000994:	40fe      	lsrs	r6, r7
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	4193      	sbcs	r3, r2
 800099a:	40f8      	lsrs	r0, r7
 800099c:	4334      	orrs	r4, r6
 800099e:	431c      	orrs	r4, r3
 80009a0:	4480      	add	r8, r0
 80009a2:	1864      	adds	r4, r4, r1
 80009a4:	428c      	cmp	r4, r1
 80009a6:	41bf      	sbcs	r7, r7
 80009a8:	427f      	negs	r7, r7
 80009aa:	464e      	mov	r6, r9
 80009ac:	4447      	add	r7, r8
 80009ae:	e7a6      	b.n	80008fe <__aeabi_dadd+0x27e>
 80009b0:	4642      	mov	r2, r8
 80009b2:	430a      	orrs	r2, r1
 80009b4:	0011      	movs	r1, r2
 80009b6:	1e4a      	subs	r2, r1, #1
 80009b8:	4191      	sbcs	r1, r2
 80009ba:	e6ad      	b.n	8000718 <__aeabi_dadd+0x98>
 80009bc:	4c0c      	ldr	r4, [pc, #48]	; (80009f0 <__aeabi_dadd+0x370>)
 80009be:	1c72      	adds	r2, r6, #1
 80009c0:	4222      	tst	r2, r4
 80009c2:	d000      	beq.n	80009c6 <__aeabi_dadd+0x346>
 80009c4:	e0a1      	b.n	8000b0a <__aeabi_dadd+0x48a>
 80009c6:	0002      	movs	r2, r0
 80009c8:	431a      	orrs	r2, r3
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d000      	beq.n	80009d0 <__aeabi_dadd+0x350>
 80009ce:	e0fa      	b.n	8000bc6 <__aeabi_dadd+0x546>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x356>
 80009d4:	e145      	b.n	8000c62 <__aeabi_dadd+0x5e2>
 80009d6:	003a      	movs	r2, r7
 80009d8:	430a      	orrs	r2, r1
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x35e>
 80009dc:	e146      	b.n	8000c6c <__aeabi_dadd+0x5ec>
 80009de:	0742      	lsls	r2, r0, #29
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	08c0      	lsrs	r0, r0, #3
 80009e6:	e77b      	b.n	80008e0 <__aeabi_dadd+0x260>
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4647      	mov	r7, r8
 80009f6:	1a5c      	subs	r4, r3, r1
 80009f8:	1bc2      	subs	r2, r0, r7
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	41bf      	sbcs	r7, r7
 80009fe:	427f      	negs	r7, r7
 8000a00:	46b9      	mov	r9, r7
 8000a02:	0017      	movs	r7, r2
 8000a04:	464a      	mov	r2, r9
 8000a06:	1abf      	subs	r7, r7, r2
 8000a08:	023a      	lsls	r2, r7, #8
 8000a0a:	d500      	bpl.n	8000a0e <__aeabi_dadd+0x38e>
 8000a0c:	e08d      	b.n	8000b2a <__aeabi_dadd+0x4aa>
 8000a0e:	0023      	movs	r3, r4
 8000a10:	433b      	orrs	r3, r7
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x396>
 8000a14:	e68a      	b.n	800072c <__aeabi_dadd+0xac>
 8000a16:	2000      	movs	r0, #0
 8000a18:	2500      	movs	r5, #0
 8000a1a:	e761      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000a1c:	4cb4      	ldr	r4, [pc, #720]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000a1e:	45a1      	cmp	r9, r4
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x3a4>
 8000a22:	e0ad      	b.n	8000b80 <__aeabi_dadd+0x500>
 8000a24:	2480      	movs	r4, #128	; 0x80
 8000a26:	0424      	lsls	r4, r4, #16
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	4664      	mov	r4, ip
 8000a2c:	2c38      	cmp	r4, #56	; 0x38
 8000a2e:	dc3d      	bgt.n	8000aac <__aeabi_dadd+0x42c>
 8000a30:	4662      	mov	r2, ip
 8000a32:	2c1f      	cmp	r4, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dadd+0x3b8>
 8000a36:	e0b7      	b.n	8000ba8 <__aeabi_dadd+0x528>
 8000a38:	2520      	movs	r5, #32
 8000a3a:	001e      	movs	r6, r3
 8000a3c:	1b2d      	subs	r5, r5, r4
 8000a3e:	0004      	movs	r4, r0
 8000a40:	40ab      	lsls	r3, r5
 8000a42:	40ac      	lsls	r4, r5
 8000a44:	40d6      	lsrs	r6, r2
 8000a46:	40d0      	lsrs	r0, r2
 8000a48:	4642      	mov	r2, r8
 8000a4a:	1e5d      	subs	r5, r3, #1
 8000a4c:	41ab      	sbcs	r3, r5
 8000a4e:	4334      	orrs	r4, r6
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	4690      	mov	r8, r2
 8000a54:	4323      	orrs	r3, r4
 8000a56:	e02c      	b.n	8000ab2 <__aeabi_dadd+0x432>
 8000a58:	0742      	lsls	r2, r0, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	e73b      	b.n	80008da <__aeabi_dadd+0x25a>
 8000a62:	185c      	adds	r4, r3, r1
 8000a64:	429c      	cmp	r4, r3
 8000a66:	419b      	sbcs	r3, r3
 8000a68:	4440      	add	r0, r8
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	18c7      	adds	r7, r0, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	023b      	lsls	r3, r7, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3f6>
 8000a74:	e729      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4a9e      	ldr	r2, [pc, #632]	; (8000cf4 <__aeabi_dadd+0x674>)
 8000a7a:	0863      	lsrs	r3, r4, #1
 8000a7c:	4017      	ands	r7, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4014      	ands	r4, r2
 8000a82:	431c      	orrs	r4, r3
 8000a84:	07fb      	lsls	r3, r7, #31
 8000a86:	431c      	orrs	r4, r3
 8000a88:	087f      	lsrs	r7, r7, #1
 8000a8a:	e673      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000a8c:	4644      	mov	r4, r8
 8000a8e:	3a20      	subs	r2, #32
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	4662      	mov	r2, ip
 8000a94:	2a20      	cmp	r2, #32
 8000a96:	d005      	beq.n	8000aa4 <__aeabi_dadd+0x424>
 8000a98:	4667      	mov	r7, ip
 8000a9a:	2240      	movs	r2, #64	; 0x40
 8000a9c:	1bd2      	subs	r2, r2, r7
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	4097      	lsls	r7, r2
 8000aa2:	4339      	orrs	r1, r7
 8000aa4:	1e4a      	subs	r2, r1, #1
 8000aa6:	4191      	sbcs	r1, r2
 8000aa8:	4321      	orrs	r1, r4
 8000aaa:	e635      	b.n	8000718 <__aeabi_dadd+0x98>
 8000aac:	4303      	orrs	r3, r0
 8000aae:	1e58      	subs	r0, r3, #1
 8000ab0:	4183      	sbcs	r3, r0
 8000ab2:	1acc      	subs	r4, r1, r3
 8000ab4:	42a1      	cmp	r1, r4
 8000ab6:	41bf      	sbcs	r7, r7
 8000ab8:	4643      	mov	r3, r8
 8000aba:	427f      	negs	r7, r7
 8000abc:	4655      	mov	r5, sl
 8000abe:	464e      	mov	r6, r9
 8000ac0:	1bdf      	subs	r7, r3, r7
 8000ac2:	e62e      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x44c>
 8000aca:	e0bd      	b.n	8000c48 <__aeabi_dadd+0x5c8>
 8000acc:	4662      	mov	r2, ip
 8000ace:	4664      	mov	r4, ip
 8000ad0:	3a01      	subs	r2, #1
 8000ad2:	2c01      	cmp	r4, #1
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x458>
 8000ad6:	e0e5      	b.n	8000ca4 <__aeabi_dadd+0x624>
 8000ad8:	4c85      	ldr	r4, [pc, #532]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d058      	beq.n	8000b90 <__aeabi_dadd+0x510>
 8000ade:	4694      	mov	ip, r2
 8000ae0:	e749      	b.n	8000976 <__aeabi_dadd+0x2f6>
 8000ae2:	4664      	mov	r4, ip
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	1b12      	subs	r2, r2, r4
 8000ae8:	4644      	mov	r4, r8
 8000aea:	4094      	lsls	r4, r2
 8000aec:	000f      	movs	r7, r1
 8000aee:	46a1      	mov	r9, r4
 8000af0:	4664      	mov	r4, ip
 8000af2:	4091      	lsls	r1, r2
 8000af4:	40e7      	lsrs	r7, r4
 8000af6:	464c      	mov	r4, r9
 8000af8:	1e4a      	subs	r2, r1, #1
 8000afa:	4191      	sbcs	r1, r2
 8000afc:	433c      	orrs	r4, r7
 8000afe:	4642      	mov	r2, r8
 8000b00:	430c      	orrs	r4, r1
 8000b02:	4661      	mov	r1, ip
 8000b04:	40ca      	lsrs	r2, r1
 8000b06:	1880      	adds	r0, r0, r2
 8000b08:	e6f4      	b.n	80008f4 <__aeabi_dadd+0x274>
 8000b0a:	4c79      	ldr	r4, [pc, #484]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000b0c:	42a2      	cmp	r2, r4
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x492>
 8000b10:	e6fd      	b.n	800090e <__aeabi_dadd+0x28e>
 8000b12:	1859      	adds	r1, r3, r1
 8000b14:	4299      	cmp	r1, r3
 8000b16:	419b      	sbcs	r3, r3
 8000b18:	4440      	add	r0, r8
 8000b1a:	425f      	negs	r7, r3
 8000b1c:	19c7      	adds	r7, r0, r7
 8000b1e:	07fc      	lsls	r4, r7, #31
 8000b20:	0849      	lsrs	r1, r1, #1
 8000b22:	0016      	movs	r6, r2
 8000b24:	430c      	orrs	r4, r1
 8000b26:	087f      	lsrs	r7, r7, #1
 8000b28:	e6cf      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000b2a:	1acc      	subs	r4, r1, r3
 8000b2c:	42a1      	cmp	r1, r4
 8000b2e:	41bf      	sbcs	r7, r7
 8000b30:	4643      	mov	r3, r8
 8000b32:	427f      	negs	r7, r7
 8000b34:	1a18      	subs	r0, r3, r0
 8000b36:	4655      	mov	r5, sl
 8000b38:	1bc7      	subs	r7, r0, r7
 8000b3a:	e5f7      	b.n	800072c <__aeabi_dadd+0xac>
 8000b3c:	08c9      	lsrs	r1, r1, #3
 8000b3e:	077b      	lsls	r3, r7, #29
 8000b40:	4655      	mov	r5, sl
 8000b42:	430b      	orrs	r3, r1
 8000b44:	08f8      	lsrs	r0, r7, #3
 8000b46:	e6c8      	b.n	80008da <__aeabi_dadd+0x25a>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x4ce>
 8000b4c:	e081      	b.n	8000c52 <__aeabi_dadd+0x5d2>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	430b      	orrs	r3, r1
 8000b52:	d115      	bne.n	8000b80 <__aeabi_dadd+0x500>
 8000b54:	2080      	movs	r0, #128	; 0x80
 8000b56:	2500      	movs	r5, #0
 8000b58:	0300      	lsls	r0, r0, #12
 8000b5a:	e6e3      	b.n	8000924 <__aeabi_dadd+0x2a4>
 8000b5c:	1a5c      	subs	r4, r3, r1
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	419b      	sbcs	r3, r3
 8000b62:	1bc7      	subs	r7, r0, r7
 8000b64:	425b      	negs	r3, r3
 8000b66:	2601      	movs	r6, #1
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	e5da      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000b6c:	0742      	lsls	r2, r0, #29
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	08c0      	lsrs	r0, r0, #3
 8000b74:	e6d2      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b76:	0742      	lsls	r2, r0, #29
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	08c0      	lsrs	r0, r0, #3
 8000b7e:	e6ac      	b.n	80008da <__aeabi_dadd+0x25a>
 8000b80:	4643      	mov	r3, r8
 8000b82:	4642      	mov	r2, r8
 8000b84:	08c9      	lsrs	r1, r1, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4655      	mov	r5, sl
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	08d0      	lsrs	r0, r2, #3
 8000b8e:	e6c5      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b90:	4643      	mov	r3, r8
 8000b92:	4642      	mov	r2, r8
 8000b94:	075b      	lsls	r3, r3, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	08d0      	lsrs	r0, r2, #3
 8000b9c:	e6be      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	e6fc      	b.n	80009a2 <__aeabi_dadd+0x322>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	3c20      	subs	r4, #32
 8000bac:	40e2      	lsrs	r2, r4
 8000bae:	0014      	movs	r4, r2
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	2a20      	cmp	r2, #32
 8000bb4:	d003      	beq.n	8000bbe <__aeabi_dadd+0x53e>
 8000bb6:	2540      	movs	r5, #64	; 0x40
 8000bb8:	1aad      	subs	r5, r5, r2
 8000bba:	40a8      	lsls	r0, r5
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	1e58      	subs	r0, r3, #1
 8000bc0:	4183      	sbcs	r3, r0
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	e775      	b.n	8000ab2 <__aeabi_dadd+0x432>
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d0e2      	beq.n	8000b90 <__aeabi_dadd+0x510>
 8000bca:	003a      	movs	r2, r7
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	d0cd      	beq.n	8000b6c <__aeabi_dadd+0x4ec>
 8000bd0:	0742      	lsls	r2, r0, #29
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	0312      	lsls	r2, r2, #12
 8000bdc:	4210      	tst	r0, r2
 8000bde:	d006      	beq.n	8000bee <__aeabi_dadd+0x56e>
 8000be0:	08fc      	lsrs	r4, r7, #3
 8000be2:	4214      	tst	r4, r2
 8000be4:	d103      	bne.n	8000bee <__aeabi_dadd+0x56e>
 8000be6:	0020      	movs	r0, r4
 8000be8:	08cb      	lsrs	r3, r1, #3
 8000bea:	077a      	lsls	r2, r7, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	0f5a      	lsrs	r2, r3, #29
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	0752      	lsls	r2, r2, #29
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	e690      	b.n	800091c <__aeabi_dadd+0x29c>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x582>
 8000c00:	e709      	b.n	8000a16 <__aeabi_dadd+0x396>
 8000c02:	4643      	mov	r3, r8
 8000c04:	4642      	mov	r2, r8
 8000c06:	08c9      	lsrs	r1, r1, #3
 8000c08:	075b      	lsls	r3, r3, #29
 8000c0a:	4655      	mov	r5, sl
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	08d0      	lsrs	r0, r2, #3
 8000c10:	e666      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c12:	1acc      	subs	r4, r1, r3
 8000c14:	42a1      	cmp	r1, r4
 8000c16:	4189      	sbcs	r1, r1
 8000c18:	1a3f      	subs	r7, r7, r0
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	2601      	movs	r6, #1
 8000c20:	1a7f      	subs	r7, r7, r1
 8000c22:	e57e      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000c24:	4642      	mov	r2, r8
 8000c26:	1a5c      	subs	r4, r3, r1
 8000c28:	1a87      	subs	r7, r0, r2
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	4192      	sbcs	r2, r2
 8000c2e:	4252      	negs	r2, r2
 8000c30:	1abf      	subs	r7, r7, r2
 8000c32:	023a      	lsls	r2, r7, #8
 8000c34:	d53d      	bpl.n	8000cb2 <__aeabi_dadd+0x632>
 8000c36:	1acc      	subs	r4, r1, r3
 8000c38:	42a1      	cmp	r1, r4
 8000c3a:	4189      	sbcs	r1, r1
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	4249      	negs	r1, r1
 8000c40:	1a1f      	subs	r7, r3, r0
 8000c42:	4655      	mov	r5, sl
 8000c44:	1a7f      	subs	r7, r7, r1
 8000c46:	e595      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000c48:	077b      	lsls	r3, r7, #29
 8000c4a:	08c9      	lsrs	r1, r1, #3
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	08f8      	lsrs	r0, r7, #3
 8000c50:	e643      	b.n	80008da <__aeabi_dadd+0x25a>
 8000c52:	4644      	mov	r4, r8
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	430c      	orrs	r4, r1
 8000c58:	d130      	bne.n	8000cbc <__aeabi_dadd+0x63c>
 8000c5a:	0742      	lsls	r2, r0, #29
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	08c0      	lsrs	r0, r0, #3
 8000c60:	e65c      	b.n	800091c <__aeabi_dadd+0x29c>
 8000c62:	077b      	lsls	r3, r7, #29
 8000c64:	08c9      	lsrs	r1, r1, #3
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08f8      	lsrs	r0, r7, #3
 8000c6a:	e639      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c6c:	185c      	adds	r4, r3, r1
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	419b      	sbcs	r3, r3
 8000c72:	4440      	add	r0, r8
 8000c74:	425b      	negs	r3, r3
 8000c76:	18c7      	adds	r7, r0, r3
 8000c78:	023b      	lsls	r3, r7, #8
 8000c7a:	d400      	bmi.n	8000c7e <__aeabi_dadd+0x5fe>
 8000c7c:	e625      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <__aeabi_dadd+0x674>)
 8000c80:	2601      	movs	r6, #1
 8000c82:	401f      	ands	r7, r3
 8000c84:	e621      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c86:	0004      	movs	r4, r0
 8000c88:	3a20      	subs	r2, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d004      	beq.n	8000c9c <__aeabi_dadd+0x61c>
 8000c92:	2240      	movs	r2, #64	; 0x40
 8000c94:	4666      	mov	r6, ip
 8000c96:	1b92      	subs	r2, r2, r6
 8000c98:	4090      	lsls	r0, r2
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	4193      	sbcs	r3, r2
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	e67e      	b.n	80009a2 <__aeabi_dadd+0x322>
 8000ca4:	185c      	adds	r4, r3, r1
 8000ca6:	428c      	cmp	r4, r1
 8000ca8:	4189      	sbcs	r1, r1
 8000caa:	4440      	add	r0, r8
 8000cac:	4249      	negs	r1, r1
 8000cae:	1847      	adds	r7, r0, r1
 8000cb0:	e6dd      	b.n	8000a6e <__aeabi_dadd+0x3ee>
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	433b      	orrs	r3, r7
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x63a>
 8000cb8:	e6ad      	b.n	8000a16 <__aeabi_dadd+0x396>
 8000cba:	e606      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000cbc:	0744      	lsls	r4, r0, #29
 8000cbe:	4323      	orrs	r3, r4
 8000cc0:	2480      	movs	r4, #128	; 0x80
 8000cc2:	08c0      	lsrs	r0, r0, #3
 8000cc4:	0324      	lsls	r4, r4, #12
 8000cc6:	4220      	tst	r0, r4
 8000cc8:	d008      	beq.n	8000cdc <__aeabi_dadd+0x65c>
 8000cca:	4642      	mov	r2, r8
 8000ccc:	08d6      	lsrs	r6, r2, #3
 8000cce:	4226      	tst	r6, r4
 8000cd0:	d104      	bne.n	8000cdc <__aeabi_dadd+0x65c>
 8000cd2:	4655      	mov	r5, sl
 8000cd4:	0030      	movs	r0, r6
 8000cd6:	08cb      	lsrs	r3, r1, #3
 8000cd8:	0751      	lsls	r1, r2, #29
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	0f5a      	lsrs	r2, r3, #29
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	0752      	lsls	r2, r2, #29
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	e619      	b.n	800091c <__aeabi_dadd+0x29c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4a01      	ldr	r2, [pc, #4]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000cec:	001f      	movs	r7, r3
 8000cee:	e55e      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000cf0:	000007ff 	.word	0x000007ff
 8000cf4:	ff7fffff 	.word	0xff7fffff

08000cf8 <__aeabi_ddiv>:
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	4657      	mov	r7, sl
 8000cfc:	464e      	mov	r6, r9
 8000cfe:	4645      	mov	r5, r8
 8000d00:	46de      	mov	lr, fp
 8000d02:	b5e0      	push	{r5, r6, r7, lr}
 8000d04:	4681      	mov	r9, r0
 8000d06:	0005      	movs	r5, r0
 8000d08:	030c      	lsls	r4, r1, #12
 8000d0a:	0048      	lsls	r0, r1, #1
 8000d0c:	4692      	mov	sl, r2
 8000d0e:	001f      	movs	r7, r3
 8000d10:	b085      	sub	sp, #20
 8000d12:	0b24      	lsrs	r4, r4, #12
 8000d14:	0d40      	lsrs	r0, r0, #21
 8000d16:	0fce      	lsrs	r6, r1, #31
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_ddiv+0x26>
 8000d1c:	e156      	b.n	8000fcc <__aeabi_ddiv+0x2d4>
 8000d1e:	4bd4      	ldr	r3, [pc, #848]	; (8001070 <__aeabi_ddiv+0x378>)
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d100      	bne.n	8000d26 <__aeabi_ddiv+0x2e>
 8000d24:	e172      	b.n	800100c <__aeabi_ddiv+0x314>
 8000d26:	0f6b      	lsrs	r3, r5, #29
 8000d28:	00e4      	lsls	r4, r4, #3
 8000d2a:	431c      	orrs	r4, r3
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	4698      	mov	r8, r3
 8000d34:	4bcf      	ldr	r3, [pc, #828]	; (8001074 <__aeabi_ddiv+0x37c>)
 8000d36:	00ed      	lsls	r5, r5, #3
 8000d38:	469b      	mov	fp, r3
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	4483      	add	fp, r0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	033c      	lsls	r4, r7, #12
 8000d44:	007b      	lsls	r3, r7, #1
 8000d46:	4650      	mov	r0, sl
 8000d48:	0b24      	lsrs	r4, r4, #12
 8000d4a:	0d5b      	lsrs	r3, r3, #21
 8000d4c:	0fff      	lsrs	r7, r7, #31
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x5c>
 8000d52:	e11f      	b.n	8000f94 <__aeabi_ddiv+0x29c>
 8000d54:	4ac6      	ldr	r2, [pc, #792]	; (8001070 <__aeabi_ddiv+0x378>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x64>
 8000d5a:	e162      	b.n	8001022 <__aeabi_ddiv+0x32a>
 8000d5c:	49c5      	ldr	r1, [pc, #788]	; (8001074 <__aeabi_ddiv+0x37c>)
 8000d5e:	0f42      	lsrs	r2, r0, #29
 8000d60:	468c      	mov	ip, r1
 8000d62:	00e4      	lsls	r4, r4, #3
 8000d64:	4659      	mov	r1, fp
 8000d66:	4314      	orrs	r4, r2
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	4463      	add	r3, ip
 8000d6c:	0412      	lsls	r2, r2, #16
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	4314      	orrs	r4, r2
 8000d72:	469b      	mov	fp, r3
 8000d74:	00c2      	lsls	r2, r0, #3
 8000d76:	2000      	movs	r0, #0
 8000d78:	0033      	movs	r3, r6
 8000d7a:	407b      	eors	r3, r7
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	464b      	mov	r3, r9
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d827      	bhi.n	8000dd4 <__aeabi_ddiv+0xdc>
 8000d84:	49bc      	ldr	r1, [pc, #752]	; (8001078 <__aeabi_ddiv+0x380>)
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	58cb      	ldr	r3, [r1, r3]
 8000d8a:	469f      	mov	pc, r3
 8000d8c:	46b2      	mov	sl, r6
 8000d8e:	9b00      	ldr	r3, [sp, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d016      	beq.n	8000dc2 <__aeabi_ddiv+0xca>
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d100      	bne.n	8000d9a <__aeabi_ddiv+0xa2>
 8000d98:	e28e      	b.n	80012b8 <__aeabi_ddiv+0x5c0>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_ddiv+0xa8>
 8000d9e:	e0d9      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 8000da0:	2300      	movs	r3, #0
 8000da2:	2400      	movs	r4, #0
 8000da4:	2500      	movs	r5, #0
 8000da6:	4652      	mov	r2, sl
 8000da8:	051b      	lsls	r3, r3, #20
 8000daa:	4323      	orrs	r3, r4
 8000dac:	07d2      	lsls	r2, r2, #31
 8000dae:	4313      	orrs	r3, r2
 8000db0:	0028      	movs	r0, r5
 8000db2:	0019      	movs	r1, r3
 8000db4:	b005      	add	sp, #20
 8000db6:	bcf0      	pop	{r4, r5, r6, r7}
 8000db8:	46bb      	mov	fp, r7
 8000dba:	46b2      	mov	sl, r6
 8000dbc:	46a9      	mov	r9, r5
 8000dbe:	46a0      	mov	r8, r4
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	4baa      	ldr	r3, [pc, #680]	; (8001070 <__aeabi_ddiv+0x378>)
 8000dc8:	e7ed      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8000dca:	46ba      	mov	sl, r7
 8000dcc:	46a0      	mov	r8, r4
 8000dce:	0015      	movs	r5, r2
 8000dd0:	9000      	str	r0, [sp, #0]
 8000dd2:	e7dc      	b.n	8000d8e <__aeabi_ddiv+0x96>
 8000dd4:	4544      	cmp	r4, r8
 8000dd6:	d200      	bcs.n	8000dda <__aeabi_ddiv+0xe2>
 8000dd8:	e1c7      	b.n	800116a <__aeabi_ddiv+0x472>
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xe6>
 8000ddc:	e1c2      	b.n	8001164 <__aeabi_ddiv+0x46c>
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	469c      	mov	ip, r3
 8000de4:	002e      	movs	r6, r5
 8000de6:	4640      	mov	r0, r8
 8000de8:	2500      	movs	r5, #0
 8000dea:	44e3      	add	fp, ip
 8000dec:	0223      	lsls	r3, r4, #8
 8000dee:	0e14      	lsrs	r4, r2, #24
 8000df0:	431c      	orrs	r4, r3
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	4699      	mov	r9, r3
 8000df6:	0423      	lsls	r3, r4, #16
 8000df8:	0c1f      	lsrs	r7, r3, #16
 8000dfa:	0212      	lsls	r2, r2, #8
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	9701      	str	r7, [sp, #4]
 8000e02:	f7ff fa23 	bl	800024c <__aeabi_uidivmod>
 8000e06:	0002      	movs	r2, r0
 8000e08:	437a      	muls	r2, r7
 8000e0a:	040b      	lsls	r3, r1, #16
 8000e0c:	0c31      	lsrs	r1, r6, #16
 8000e0e:	4680      	mov	r8, r0
 8000e10:	4319      	orrs	r1, r3
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d907      	bls.n	8000e26 <__aeabi_ddiv+0x12e>
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	1909      	adds	r1, r1, r4
 8000e1e:	44e0      	add	r8, ip
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d800      	bhi.n	8000e26 <__aeabi_ddiv+0x12e>
 8000e24:	e207      	b.n	8001236 <__aeabi_ddiv+0x53e>
 8000e26:	1a88      	subs	r0, r1, r2
 8000e28:	4649      	mov	r1, r9
 8000e2a:	f7ff fa0f 	bl	800024c <__aeabi_uidivmod>
 8000e2e:	0409      	lsls	r1, r1, #16
 8000e30:	468c      	mov	ip, r1
 8000e32:	0431      	lsls	r1, r6, #16
 8000e34:	4666      	mov	r6, ip
 8000e36:	9a01      	ldr	r2, [sp, #4]
 8000e38:	0c09      	lsrs	r1, r1, #16
 8000e3a:	4342      	muls	r2, r0
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	4331      	orrs	r1, r6
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d904      	bls.n	8000e4e <__aeabi_ddiv+0x156>
 8000e44:	1909      	adds	r1, r1, r4
 8000e46:	3b01      	subs	r3, #1
 8000e48:	428c      	cmp	r4, r1
 8000e4a:	d800      	bhi.n	8000e4e <__aeabi_ddiv+0x156>
 8000e4c:	e1ed      	b.n	800122a <__aeabi_ddiv+0x532>
 8000e4e:	1a88      	subs	r0, r1, r2
 8000e50:	4642      	mov	r2, r8
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	4690      	mov	r8, r2
 8000e58:	4641      	mov	r1, r8
 8000e5a:	9b00      	ldr	r3, [sp, #0]
 8000e5c:	040e      	lsls	r6, r1, #16
 8000e5e:	0c1b      	lsrs	r3, r3, #16
 8000e60:	001f      	movs	r7, r3
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	9b00      	ldr	r3, [sp, #0]
 8000e66:	0c36      	lsrs	r6, r6, #16
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c19      	lsrs	r1, r3, #16
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	4373      	muls	r3, r6
 8000e70:	0c12      	lsrs	r2, r2, #16
 8000e72:	437e      	muls	r6, r7
 8000e74:	9103      	str	r1, [sp, #12]
 8000e76:	4351      	muls	r1, r2
 8000e78:	437a      	muls	r2, r7
 8000e7a:	0c1f      	lsrs	r7, r3, #16
 8000e7c:	46bc      	mov	ip, r7
 8000e7e:	1876      	adds	r6, r6, r1
 8000e80:	4466      	add	r6, ip
 8000e82:	42b1      	cmp	r1, r6
 8000e84:	d903      	bls.n	8000e8e <__aeabi_ddiv+0x196>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	468c      	mov	ip, r1
 8000e8c:	4462      	add	r2, ip
 8000e8e:	0c31      	lsrs	r1, r6, #16
 8000e90:	188a      	adds	r2, r1, r2
 8000e92:	0431      	lsls	r1, r6, #16
 8000e94:	041e      	lsls	r6, r3, #16
 8000e96:	0c36      	lsrs	r6, r6, #16
 8000e98:	198e      	adds	r6, r1, r6
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d302      	bcc.n	8000ea4 <__aeabi_ddiv+0x1ac>
 8000e9e:	d112      	bne.n	8000ec6 <__aeabi_ddiv+0x1ce>
 8000ea0:	42b5      	cmp	r5, r6
 8000ea2:	d210      	bcs.n	8000ec6 <__aeabi_ddiv+0x1ce>
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	1e59      	subs	r1, r3, #1
 8000ea8:	9b00      	ldr	r3, [sp, #0]
 8000eaa:	469c      	mov	ip, r3
 8000eac:	4465      	add	r5, ip
 8000eae:	001f      	movs	r7, r3
 8000eb0:	429d      	cmp	r5, r3
 8000eb2:	419b      	sbcs	r3, r3
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	191b      	adds	r3, r3, r4
 8000eb8:	18c0      	adds	r0, r0, r3
 8000eba:	4284      	cmp	r4, r0
 8000ebc:	d200      	bcs.n	8000ec0 <__aeabi_ddiv+0x1c8>
 8000ebe:	e1a0      	b.n	8001202 <__aeabi_ddiv+0x50a>
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8000ec2:	e19b      	b.n	80011fc <__aeabi_ddiv+0x504>
 8000ec4:	4688      	mov	r8, r1
 8000ec6:	1bae      	subs	r6, r5, r6
 8000ec8:	42b5      	cmp	r5, r6
 8000eca:	41ad      	sbcs	r5, r5
 8000ecc:	1a80      	subs	r0, r0, r2
 8000ece:	426d      	negs	r5, r5
 8000ed0:	1b40      	subs	r0, r0, r5
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x1e0>
 8000ed6:	e1d5      	b.n	8001284 <__aeabi_ddiv+0x58c>
 8000ed8:	4649      	mov	r1, r9
 8000eda:	f7ff f9b7 	bl	800024c <__aeabi_uidivmod>
 8000ede:	9a01      	ldr	r2, [sp, #4]
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	4342      	muls	r2, r0
 8000ee4:	0c31      	lsrs	r1, r6, #16
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	4319      	orrs	r1, r3
 8000eea:	428a      	cmp	r2, r1
 8000eec:	d900      	bls.n	8000ef0 <__aeabi_ddiv+0x1f8>
 8000eee:	e16c      	b.n	80011ca <__aeabi_ddiv+0x4d2>
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f9aa 	bl	800024c <__aeabi_uidivmod>
 8000ef8:	9a01      	ldr	r2, [sp, #4]
 8000efa:	0436      	lsls	r6, r6, #16
 8000efc:	4342      	muls	r2, r0
 8000efe:	0409      	lsls	r1, r1, #16
 8000f00:	0c36      	lsrs	r6, r6, #16
 8000f02:	0003      	movs	r3, r0
 8000f04:	430e      	orrs	r6, r1
 8000f06:	42b2      	cmp	r2, r6
 8000f08:	d900      	bls.n	8000f0c <__aeabi_ddiv+0x214>
 8000f0a:	e153      	b.n	80011b4 <__aeabi_ddiv+0x4bc>
 8000f0c:	9803      	ldr	r0, [sp, #12]
 8000f0e:	1ab6      	subs	r6, r6, r2
 8000f10:	0002      	movs	r2, r0
 8000f12:	042d      	lsls	r5, r5, #16
 8000f14:	431d      	orrs	r5, r3
 8000f16:	9f02      	ldr	r7, [sp, #8]
 8000f18:	042b      	lsls	r3, r5, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
 8000f1c:	435a      	muls	r2, r3
 8000f1e:	437b      	muls	r3, r7
 8000f20:	469c      	mov	ip, r3
 8000f22:	0c29      	lsrs	r1, r5, #16
 8000f24:	4348      	muls	r0, r1
 8000f26:	0c13      	lsrs	r3, r2, #16
 8000f28:	4484      	add	ip, r0
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4379      	muls	r1, r7
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d903      	bls.n	8000f3a <__aeabi_ddiv+0x242>
 8000f32:	2080      	movs	r0, #128	; 0x80
 8000f34:	0240      	lsls	r0, r0, #9
 8000f36:	4684      	mov	ip, r0
 8000f38:	4461      	add	r1, ip
 8000f3a:	0c18      	lsrs	r0, r3, #16
 8000f3c:	0412      	lsls	r2, r2, #16
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	0c12      	lsrs	r2, r2, #16
 8000f42:	1841      	adds	r1, r0, r1
 8000f44:	189b      	adds	r3, r3, r2
 8000f46:	428e      	cmp	r6, r1
 8000f48:	d200      	bcs.n	8000f4c <__aeabi_ddiv+0x254>
 8000f4a:	e0ff      	b.n	800114c <__aeabi_ddiv+0x454>
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x258>
 8000f4e:	e0fa      	b.n	8001146 <__aeabi_ddiv+0x44e>
 8000f50:	2301      	movs	r3, #1
 8000f52:	431d      	orrs	r5, r3
 8000f54:	4a49      	ldr	r2, [pc, #292]	; (800107c <__aeabi_ddiv+0x384>)
 8000f56:	445a      	add	r2, fp
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	dc00      	bgt.n	8000f5e <__aeabi_ddiv+0x266>
 8000f5c:	e0aa      	b.n	80010b4 <__aeabi_ddiv+0x3bc>
 8000f5e:	076b      	lsls	r3, r5, #29
 8000f60:	d000      	beq.n	8000f64 <__aeabi_ddiv+0x26c>
 8000f62:	e13d      	b.n	80011e0 <__aeabi_ddiv+0x4e8>
 8000f64:	08ed      	lsrs	r5, r5, #3
 8000f66:	4643      	mov	r3, r8
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	d506      	bpl.n	8000f7a <__aeabi_ddiv+0x282>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	4b44      	ldr	r3, [pc, #272]	; (8001080 <__aeabi_ddiv+0x388>)
 8000f70:	401a      	ands	r2, r3
 8000f72:	4690      	mov	r8, r2
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	445a      	add	r2, fp
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <__aeabi_ddiv+0x38c>)
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_ddiv+0x28a>
 8000f80:	e71f      	b.n	8000dc2 <__aeabi_ddiv+0xca>
 8000f82:	4643      	mov	r3, r8
 8000f84:	075b      	lsls	r3, r3, #29
 8000f86:	431d      	orrs	r5, r3
 8000f88:	4643      	mov	r3, r8
 8000f8a:	0552      	lsls	r2, r2, #21
 8000f8c:	025c      	lsls	r4, r3, #9
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	0d53      	lsrs	r3, r2, #21
 8000f92:	e708      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8000f94:	4652      	mov	r2, sl
 8000f96:	4322      	orrs	r2, r4
 8000f98:	d100      	bne.n	8000f9c <__aeabi_ddiv+0x2a4>
 8000f9a:	e07b      	b.n	8001094 <__aeabi_ddiv+0x39c>
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_ddiv+0x2aa>
 8000fa0:	e0fa      	b.n	8001198 <__aeabi_ddiv+0x4a0>
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f001 f952 	bl	800224c <__clzsi2>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3a0b      	subs	r2, #11
 8000fac:	231d      	movs	r3, #29
 8000fae:	0001      	movs	r1, r0
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	4652      	mov	r2, sl
 8000fb4:	3908      	subs	r1, #8
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	408c      	lsls	r4, r1
 8000fba:	4314      	orrs	r4, r2
 8000fbc:	4652      	mov	r2, sl
 8000fbe:	408a      	lsls	r2, r1
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <__aeabi_ddiv+0x390>)
 8000fc2:	4458      	add	r0, fp
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	4483      	add	fp, r0
 8000fc8:	2000      	movs	r0, #0
 8000fca:	e6d5      	b.n	8000d78 <__aeabi_ddiv+0x80>
 8000fcc:	464b      	mov	r3, r9
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x366>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x2e2>
 8000fd8:	e0ce      	b.n	8001178 <__aeabi_ddiv+0x480>
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f001 f936 	bl	800224c <__clzsi2>
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	390b      	subs	r1, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a5b      	subs	r3, r3, r1
 8000fea:	4649      	mov	r1, r9
 8000fec:	0010      	movs	r0, r2
 8000fee:	40d9      	lsrs	r1, r3
 8000ff0:	3808      	subs	r0, #8
 8000ff2:	4084      	lsls	r4, r0
 8000ff4:	000b      	movs	r3, r1
 8000ff6:	464d      	mov	r5, r9
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4085      	lsls	r5, r0
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <__aeabi_ddiv+0x394>)
 8001000:	1a83      	subs	r3, r0, r2
 8001002:	469b      	mov	fp, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4699      	mov	r9, r3
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	e69a      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800100c:	464b      	mov	r3, r9
 800100e:	4323      	orrs	r3, r4
 8001010:	4698      	mov	r8, r3
 8001012:	d11d      	bne.n	8001050 <__aeabi_ddiv+0x358>
 8001014:	2308      	movs	r3, #8
 8001016:	4699      	mov	r9, r3
 8001018:	3b06      	subs	r3, #6
 800101a:	2500      	movs	r5, #0
 800101c:	4683      	mov	fp, r0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	e68f      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 8001022:	4652      	mov	r2, sl
 8001024:	4322      	orrs	r2, r4
 8001026:	d109      	bne.n	800103c <__aeabi_ddiv+0x344>
 8001028:	2302      	movs	r3, #2
 800102a:	4649      	mov	r1, r9
 800102c:	4319      	orrs	r1, r3
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <__aeabi_ddiv+0x398>)
 8001030:	4689      	mov	r9, r1
 8001032:	469c      	mov	ip, r3
 8001034:	2400      	movs	r4, #0
 8001036:	2002      	movs	r0, #2
 8001038:	44e3      	add	fp, ip
 800103a:	e69d      	b.n	8000d78 <__aeabi_ddiv+0x80>
 800103c:	2303      	movs	r3, #3
 800103e:	464a      	mov	r2, r9
 8001040:	431a      	orrs	r2, r3
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <__aeabi_ddiv+0x398>)
 8001044:	4691      	mov	r9, r2
 8001046:	469c      	mov	ip, r3
 8001048:	4652      	mov	r2, sl
 800104a:	2003      	movs	r0, #3
 800104c:	44e3      	add	fp, ip
 800104e:	e693      	b.n	8000d78 <__aeabi_ddiv+0x80>
 8001050:	230c      	movs	r3, #12
 8001052:	4699      	mov	r9, r3
 8001054:	3b09      	subs	r3, #9
 8001056:	46a0      	mov	r8, r4
 8001058:	4683      	mov	fp, r0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e671      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800105e:	2304      	movs	r3, #4
 8001060:	4699      	mov	r9, r3
 8001062:	2300      	movs	r3, #0
 8001064:	469b      	mov	fp, r3
 8001066:	3301      	adds	r3, #1
 8001068:	2500      	movs	r5, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	e669      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	000007ff 	.word	0x000007ff
 8001074:	fffffc01 	.word	0xfffffc01
 8001078:	0800b260 	.word	0x0800b260
 800107c:	000003ff 	.word	0x000003ff
 8001080:	feffffff 	.word	0xfeffffff
 8001084:	000007fe 	.word	0x000007fe
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	fffff801 	.word	0xfffff801
 8001094:	4649      	mov	r1, r9
 8001096:	2301      	movs	r3, #1
 8001098:	4319      	orrs	r1, r3
 800109a:	4689      	mov	r9, r1
 800109c:	2400      	movs	r4, #0
 800109e:	2001      	movs	r0, #1
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x80>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2480      	movs	r4, #128	; 0x80
 80010a6:	469a      	mov	sl, r3
 80010a8:	2500      	movs	r5, #0
 80010aa:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 80010ac:	0324      	lsls	r4, r4, #12
 80010ae:	e67a      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80010b0:	2501      	movs	r5, #1
 80010b2:	426d      	negs	r5, r5
 80010b4:	2301      	movs	r3, #1
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	2b38      	cmp	r3, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_ddiv+0x3c6>
 80010bc:	e670      	b.n	8000da0 <__aeabi_ddiv+0xa8>
 80010be:	2b1f      	cmp	r3, #31
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_ddiv+0x3cc>
 80010c2:	e0bf      	b.n	8001244 <__aeabi_ddiv+0x54c>
 80010c4:	211f      	movs	r1, #31
 80010c6:	4249      	negs	r1, r1
 80010c8:	1a8a      	subs	r2, r1, r2
 80010ca:	4641      	mov	r1, r8
 80010cc:	40d1      	lsrs	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	2b20      	cmp	r3, #32
 80010d2:	d004      	beq.n	80010de <__aeabi_ddiv+0x3e6>
 80010d4:	4641      	mov	r1, r8
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <__aeabi_ddiv+0x5e0>)
 80010d8:	445b      	add	r3, fp
 80010da:	4099      	lsls	r1, r3
 80010dc:	430d      	orrs	r5, r1
 80010de:	1e6b      	subs	r3, r5, #1
 80010e0:	419d      	sbcs	r5, r3
 80010e2:	2307      	movs	r3, #7
 80010e4:	432a      	orrs	r2, r5
 80010e6:	001d      	movs	r5, r3
 80010e8:	2400      	movs	r4, #0
 80010ea:	4015      	ands	r5, r2
 80010ec:	4213      	tst	r3, r2
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x3fa>
 80010f0:	e0d4      	b.n	800129c <__aeabi_ddiv+0x5a4>
 80010f2:	210f      	movs	r1, #15
 80010f4:	2300      	movs	r3, #0
 80010f6:	4011      	ands	r1, r2
 80010f8:	2904      	cmp	r1, #4
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0x406>
 80010fc:	e0cb      	b.n	8001296 <__aeabi_ddiv+0x59e>
 80010fe:	1d11      	adds	r1, r2, #4
 8001100:	4291      	cmp	r1, r2
 8001102:	4192      	sbcs	r2, r2
 8001104:	4252      	negs	r2, r2
 8001106:	189b      	adds	r3, r3, r2
 8001108:	000a      	movs	r2, r1
 800110a:	0219      	lsls	r1, r3, #8
 800110c:	d400      	bmi.n	8001110 <__aeabi_ddiv+0x418>
 800110e:	e0c2      	b.n	8001296 <__aeabi_ddiv+0x59e>
 8001110:	2301      	movs	r3, #1
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e646      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	4641      	mov	r1, r8
 800111c:	031b      	lsls	r3, r3, #12
 800111e:	4219      	tst	r1, r3
 8001120:	d008      	beq.n	8001134 <__aeabi_ddiv+0x43c>
 8001122:	421c      	tst	r4, r3
 8001124:	d106      	bne.n	8001134 <__aeabi_ddiv+0x43c>
 8001126:	431c      	orrs	r4, r3
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	46ba      	mov	sl, r7
 800112c:	0015      	movs	r5, r2
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 8001130:	0b24      	lsrs	r4, r4, #12
 8001132:	e638      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001134:	2480      	movs	r4, #128	; 0x80
 8001136:	4643      	mov	r3, r8
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	431c      	orrs	r4, r3
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	46b2      	mov	sl, r6
 8001140:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	e62f      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x454>
 800114a:	e703      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 800114c:	19a6      	adds	r6, r4, r6
 800114e:	1e68      	subs	r0, r5, #1
 8001150:	42a6      	cmp	r6, r4
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0x45e>
 8001154:	e08d      	b.n	8001272 <__aeabi_ddiv+0x57a>
 8001156:	428e      	cmp	r6, r1
 8001158:	d200      	bcs.n	800115c <__aeabi_ddiv+0x464>
 800115a:	e0a3      	b.n	80012a4 <__aeabi_ddiv+0x5ac>
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x468>
 800115e:	e0b3      	b.n	80012c8 <__aeabi_ddiv+0x5d0>
 8001160:	0005      	movs	r5, r0
 8001162:	e6f5      	b.n	8000f50 <__aeabi_ddiv+0x258>
 8001164:	42aa      	cmp	r2, r5
 8001166:	d900      	bls.n	800116a <__aeabi_ddiv+0x472>
 8001168:	e639      	b.n	8000dde <__aeabi_ddiv+0xe6>
 800116a:	4643      	mov	r3, r8
 800116c:	07de      	lsls	r6, r3, #31
 800116e:	0858      	lsrs	r0, r3, #1
 8001170:	086b      	lsrs	r3, r5, #1
 8001172:	431e      	orrs	r6, r3
 8001174:	07ed      	lsls	r5, r5, #31
 8001176:	e639      	b.n	8000dec <__aeabi_ddiv+0xf4>
 8001178:	4648      	mov	r0, r9
 800117a:	f001 f867 	bl	800224c <__clzsi2>
 800117e:	0001      	movs	r1, r0
 8001180:	0002      	movs	r2, r0
 8001182:	3115      	adds	r1, #21
 8001184:	3220      	adds	r2, #32
 8001186:	291c      	cmp	r1, #28
 8001188:	dc00      	bgt.n	800118c <__aeabi_ddiv+0x494>
 800118a:	e72c      	b.n	8000fe6 <__aeabi_ddiv+0x2ee>
 800118c:	464b      	mov	r3, r9
 800118e:	3808      	subs	r0, #8
 8001190:	4083      	lsls	r3, r0
 8001192:	2500      	movs	r5, #0
 8001194:	4698      	mov	r8, r3
 8001196:	e732      	b.n	8000ffe <__aeabi_ddiv+0x306>
 8001198:	f001 f858 	bl	800224c <__clzsi2>
 800119c:	0003      	movs	r3, r0
 800119e:	001a      	movs	r2, r3
 80011a0:	3215      	adds	r2, #21
 80011a2:	3020      	adds	r0, #32
 80011a4:	2a1c      	cmp	r2, #28
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_ddiv+0x4b2>
 80011a8:	e700      	b.n	8000fac <__aeabi_ddiv+0x2b4>
 80011aa:	4654      	mov	r4, sl
 80011ac:	3b08      	subs	r3, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	409c      	lsls	r4, r3
 80011b2:	e705      	b.n	8000fc0 <__aeabi_ddiv+0x2c8>
 80011b4:	1936      	adds	r6, r6, r4
 80011b6:	3b01      	subs	r3, #1
 80011b8:	42b4      	cmp	r4, r6
 80011ba:	d900      	bls.n	80011be <__aeabi_ddiv+0x4c6>
 80011bc:	e6a6      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011be:	42b2      	cmp	r2, r6
 80011c0:	d800      	bhi.n	80011c4 <__aeabi_ddiv+0x4cc>
 80011c2:	e6a3      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011c4:	1e83      	subs	r3, r0, #2
 80011c6:	1936      	adds	r6, r6, r4
 80011c8:	e6a0      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011ca:	1909      	adds	r1, r1, r4
 80011cc:	3d01      	subs	r5, #1
 80011ce:	428c      	cmp	r4, r1
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x4dc>
 80011d2:	e68d      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011d4:	428a      	cmp	r2, r1
 80011d6:	d800      	bhi.n	80011da <__aeabi_ddiv+0x4e2>
 80011d8:	e68a      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011da:	1e85      	subs	r5, r0, #2
 80011dc:	1909      	adds	r1, r1, r4
 80011de:	e687      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011e0:	230f      	movs	r3, #15
 80011e2:	402b      	ands	r3, r5
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x4f2>
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_ddiv+0x26c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	425b      	negs	r3, r3
 80011ee:	42ab      	cmp	r3, r5
 80011f0:	419b      	sbcs	r3, r3
 80011f2:	3504      	adds	r5, #4
 80011f4:	425b      	negs	r3, r3
 80011f6:	08ed      	lsrs	r5, r5, #3
 80011f8:	4498      	add	r8, r3
 80011fa:	e6b4      	b.n	8000f66 <__aeabi_ddiv+0x26e>
 80011fc:	42af      	cmp	r7, r5
 80011fe:	d900      	bls.n	8001202 <__aeabi_ddiv+0x50a>
 8001200:	e660      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8001202:	4282      	cmp	r2, r0
 8001204:	d804      	bhi.n	8001210 <__aeabi_ddiv+0x518>
 8001206:	d000      	beq.n	800120a <__aeabi_ddiv+0x512>
 8001208:	e65c      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 800120a:	42ae      	cmp	r6, r5
 800120c:	d800      	bhi.n	8001210 <__aeabi_ddiv+0x518>
 800120e:	e659      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8001210:	2302      	movs	r3, #2
 8001212:	425b      	negs	r3, r3
 8001214:	469c      	mov	ip, r3
 8001216:	9b00      	ldr	r3, [sp, #0]
 8001218:	44e0      	add	r8, ip
 800121a:	469c      	mov	ip, r3
 800121c:	4465      	add	r5, ip
 800121e:	429d      	cmp	r5, r3
 8001220:	419b      	sbcs	r3, r3
 8001222:	425b      	negs	r3, r3
 8001224:	191b      	adds	r3, r3, r4
 8001226:	18c0      	adds	r0, r0, r3
 8001228:	e64d      	b.n	8000ec6 <__aeabi_ddiv+0x1ce>
 800122a:	428a      	cmp	r2, r1
 800122c:	d800      	bhi.n	8001230 <__aeabi_ddiv+0x538>
 800122e:	e60e      	b.n	8000e4e <__aeabi_ddiv+0x156>
 8001230:	1e83      	subs	r3, r0, #2
 8001232:	1909      	adds	r1, r1, r4
 8001234:	e60b      	b.n	8000e4e <__aeabi_ddiv+0x156>
 8001236:	428a      	cmp	r2, r1
 8001238:	d800      	bhi.n	800123c <__aeabi_ddiv+0x544>
 800123a:	e5f4      	b.n	8000e26 <__aeabi_ddiv+0x12e>
 800123c:	1e83      	subs	r3, r0, #2
 800123e:	4698      	mov	r8, r3
 8001240:	1909      	adds	r1, r1, r4
 8001242:	e5f0      	b.n	8000e26 <__aeabi_ddiv+0x12e>
 8001244:	4925      	ldr	r1, [pc, #148]	; (80012dc <__aeabi_ddiv+0x5e4>)
 8001246:	0028      	movs	r0, r5
 8001248:	4459      	add	r1, fp
 800124a:	408d      	lsls	r5, r1
 800124c:	4642      	mov	r2, r8
 800124e:	408a      	lsls	r2, r1
 8001250:	1e69      	subs	r1, r5, #1
 8001252:	418d      	sbcs	r5, r1
 8001254:	4641      	mov	r1, r8
 8001256:	40d8      	lsrs	r0, r3
 8001258:	40d9      	lsrs	r1, r3
 800125a:	4302      	orrs	r2, r0
 800125c:	432a      	orrs	r2, r5
 800125e:	000b      	movs	r3, r1
 8001260:	0751      	lsls	r1, r2, #29
 8001262:	d100      	bne.n	8001266 <__aeabi_ddiv+0x56e>
 8001264:	e751      	b.n	800110a <__aeabi_ddiv+0x412>
 8001266:	210f      	movs	r1, #15
 8001268:	4011      	ands	r1, r2
 800126a:	2904      	cmp	r1, #4
 800126c:	d000      	beq.n	8001270 <__aeabi_ddiv+0x578>
 800126e:	e746      	b.n	80010fe <__aeabi_ddiv+0x406>
 8001270:	e74b      	b.n	800110a <__aeabi_ddiv+0x412>
 8001272:	0005      	movs	r5, r0
 8001274:	428e      	cmp	r6, r1
 8001276:	d000      	beq.n	800127a <__aeabi_ddiv+0x582>
 8001278:	e66a      	b.n	8000f50 <__aeabi_ddiv+0x258>
 800127a:	9a00      	ldr	r2, [sp, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	d000      	beq.n	8001282 <__aeabi_ddiv+0x58a>
 8001280:	e666      	b.n	8000f50 <__aeabi_ddiv+0x258>
 8001282:	e667      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <__aeabi_ddiv+0x5e8>)
 8001286:	445a      	add	r2, fp
 8001288:	2a00      	cmp	r2, #0
 800128a:	dc00      	bgt.n	800128e <__aeabi_ddiv+0x596>
 800128c:	e710      	b.n	80010b0 <__aeabi_ddiv+0x3b8>
 800128e:	2301      	movs	r3, #1
 8001290:	2500      	movs	r5, #0
 8001292:	4498      	add	r8, r3
 8001294:	e667      	b.n	8000f66 <__aeabi_ddiv+0x26e>
 8001296:	075d      	lsls	r5, r3, #29
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	0b1c      	lsrs	r4, r3, #12
 800129c:	08d2      	lsrs	r2, r2, #3
 800129e:	2300      	movs	r3, #0
 80012a0:	4315      	orrs	r5, r2
 80012a2:	e580      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80012a4:	9800      	ldr	r0, [sp, #0]
 80012a6:	3d02      	subs	r5, #2
 80012a8:	0042      	lsls	r2, r0, #1
 80012aa:	4282      	cmp	r2, r0
 80012ac:	41bf      	sbcs	r7, r7
 80012ae:	427f      	negs	r7, r7
 80012b0:	193c      	adds	r4, r7, r4
 80012b2:	1936      	adds	r6, r6, r4
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	e7dd      	b.n	8001274 <__aeabi_ddiv+0x57c>
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	4643      	mov	r3, r8
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	431c      	orrs	r4, r3
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 80012c4:	0b24      	lsrs	r4, r4, #12
 80012c6:	e56e      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80012c8:	9a00      	ldr	r2, [sp, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3ea      	bcc.n	80012a4 <__aeabi_ddiv+0x5ac>
 80012ce:	0005      	movs	r5, r0
 80012d0:	e7d3      	b.n	800127a <__aeabi_ddiv+0x582>
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	000007ff 	.word	0x000007ff
 80012d8:	0000043e 	.word	0x0000043e
 80012dc:	0000041e 	.word	0x0000041e
 80012e0:	000003ff 	.word	0x000003ff

080012e4 <__eqdf2>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	46de      	mov	lr, fp
 80012ec:	4657      	mov	r7, sl
 80012ee:	4690      	mov	r8, r2
 80012f0:	b5e0      	push	{r5, r6, r7, lr}
 80012f2:	0017      	movs	r7, r2
 80012f4:	031a      	lsls	r2, r3, #12
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	0005      	movs	r5, r0
 80012fa:	4684      	mov	ip, r0
 80012fc:	4819      	ldr	r0, [pc, #100]	; (8001364 <__eqdf2+0x80>)
 80012fe:	030e      	lsls	r6, r1, #12
 8001300:	004c      	lsls	r4, r1, #1
 8001302:	4691      	mov	r9, r2
 8001304:	005a      	lsls	r2, r3, #1
 8001306:	0fdb      	lsrs	r3, r3, #31
 8001308:	469b      	mov	fp, r3
 800130a:	0b36      	lsrs	r6, r6, #12
 800130c:	0d64      	lsrs	r4, r4, #21
 800130e:	0fc9      	lsrs	r1, r1, #31
 8001310:	0d52      	lsrs	r2, r2, #21
 8001312:	4284      	cmp	r4, r0
 8001314:	d019      	beq.n	800134a <__eqdf2+0x66>
 8001316:	4282      	cmp	r2, r0
 8001318:	d010      	beq.n	800133c <__eqdf2+0x58>
 800131a:	2001      	movs	r0, #1
 800131c:	4294      	cmp	r4, r2
 800131e:	d10e      	bne.n	800133e <__eqdf2+0x5a>
 8001320:	454e      	cmp	r6, r9
 8001322:	d10c      	bne.n	800133e <__eqdf2+0x5a>
 8001324:	2001      	movs	r0, #1
 8001326:	45c4      	cmp	ip, r8
 8001328:	d109      	bne.n	800133e <__eqdf2+0x5a>
 800132a:	4559      	cmp	r1, fp
 800132c:	d017      	beq.n	800135e <__eqdf2+0x7a>
 800132e:	2c00      	cmp	r4, #0
 8001330:	d105      	bne.n	800133e <__eqdf2+0x5a>
 8001332:	0030      	movs	r0, r6
 8001334:	4328      	orrs	r0, r5
 8001336:	1e43      	subs	r3, r0, #1
 8001338:	4198      	sbcs	r0, r3
 800133a:	e000      	b.n	800133e <__eqdf2+0x5a>
 800133c:	2001      	movs	r0, #1
 800133e:	bcf0      	pop	{r4, r5, r6, r7}
 8001340:	46bb      	mov	fp, r7
 8001342:	46b2      	mov	sl, r6
 8001344:	46a9      	mov	r9, r5
 8001346:	46a0      	mov	r8, r4
 8001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134a:	0033      	movs	r3, r6
 800134c:	2001      	movs	r0, #1
 800134e:	432b      	orrs	r3, r5
 8001350:	d1f5      	bne.n	800133e <__eqdf2+0x5a>
 8001352:	42a2      	cmp	r2, r4
 8001354:	d1f3      	bne.n	800133e <__eqdf2+0x5a>
 8001356:	464b      	mov	r3, r9
 8001358:	433b      	orrs	r3, r7
 800135a:	d1f0      	bne.n	800133e <__eqdf2+0x5a>
 800135c:	e7e2      	b.n	8001324 <__eqdf2+0x40>
 800135e:	2000      	movs	r0, #0
 8001360:	e7ed      	b.n	800133e <__eqdf2+0x5a>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff

08001368 <__gedf2>:
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	4647      	mov	r7, r8
 800136c:	46ce      	mov	lr, r9
 800136e:	0004      	movs	r4, r0
 8001370:	0018      	movs	r0, r3
 8001372:	0016      	movs	r6, r2
 8001374:	031b      	lsls	r3, r3, #12
 8001376:	0b1b      	lsrs	r3, r3, #12
 8001378:	4d2d      	ldr	r5, [pc, #180]	; (8001430 <__gedf2+0xc8>)
 800137a:	004a      	lsls	r2, r1, #1
 800137c:	4699      	mov	r9, r3
 800137e:	b580      	push	{r7, lr}
 8001380:	0043      	lsls	r3, r0, #1
 8001382:	030f      	lsls	r7, r1, #12
 8001384:	46a4      	mov	ip, r4
 8001386:	46b0      	mov	r8, r6
 8001388:	0b3f      	lsrs	r7, r7, #12
 800138a:	0d52      	lsrs	r2, r2, #21
 800138c:	0fc9      	lsrs	r1, r1, #31
 800138e:	0d5b      	lsrs	r3, r3, #21
 8001390:	0fc0      	lsrs	r0, r0, #31
 8001392:	42aa      	cmp	r2, r5
 8001394:	d021      	beq.n	80013da <__gedf2+0x72>
 8001396:	42ab      	cmp	r3, r5
 8001398:	d013      	beq.n	80013c2 <__gedf2+0x5a>
 800139a:	2a00      	cmp	r2, #0
 800139c:	d122      	bne.n	80013e4 <__gedf2+0x7c>
 800139e:	433c      	orrs	r4, r7
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <__gedf2+0x42>
 80013a4:	464d      	mov	r5, r9
 80013a6:	432e      	orrs	r6, r5
 80013a8:	d022      	beq.n	80013f0 <__gedf2+0x88>
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d010      	beq.n	80013d0 <__gedf2+0x68>
 80013ae:	4281      	cmp	r1, r0
 80013b0:	d022      	beq.n	80013f8 <__gedf2+0x90>
 80013b2:	2002      	movs	r0, #2
 80013b4:	3901      	subs	r1, #1
 80013b6:	4008      	ands	r0, r1
 80013b8:	3801      	subs	r0, #1
 80013ba:	bcc0      	pop	{r6, r7}
 80013bc:	46b9      	mov	r9, r7
 80013be:	46b0      	mov	r8, r6
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	464d      	mov	r5, r9
 80013c4:	432e      	orrs	r6, r5
 80013c6:	d129      	bne.n	800141c <__gedf2+0xb4>
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d1f0      	bne.n	80013ae <__gedf2+0x46>
 80013cc:	433c      	orrs	r4, r7
 80013ce:	d1ee      	bne.n	80013ae <__gedf2+0x46>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d1f2      	bne.n	80013ba <__gedf2+0x52>
 80013d4:	2001      	movs	r0, #1
 80013d6:	4240      	negs	r0, r0
 80013d8:	e7ef      	b.n	80013ba <__gedf2+0x52>
 80013da:	003d      	movs	r5, r7
 80013dc:	4325      	orrs	r5, r4
 80013de:	d11d      	bne.n	800141c <__gedf2+0xb4>
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d0ee      	beq.n	80013c2 <__gedf2+0x5a>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e2      	bne.n	80013ae <__gedf2+0x46>
 80013e8:	464c      	mov	r4, r9
 80013ea:	4326      	orrs	r6, r4
 80013ec:	d1df      	bne.n	80013ae <__gedf2+0x46>
 80013ee:	e7e0      	b.n	80013b2 <__gedf2+0x4a>
 80013f0:	2000      	movs	r0, #0
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d0e1      	beq.n	80013ba <__gedf2+0x52>
 80013f6:	e7dc      	b.n	80013b2 <__gedf2+0x4a>
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dc0a      	bgt.n	8001412 <__gedf2+0xaa>
 80013fc:	dbe8      	blt.n	80013d0 <__gedf2+0x68>
 80013fe:	454f      	cmp	r7, r9
 8001400:	d8d7      	bhi.n	80013b2 <__gedf2+0x4a>
 8001402:	d00e      	beq.n	8001422 <__gedf2+0xba>
 8001404:	2000      	movs	r0, #0
 8001406:	454f      	cmp	r7, r9
 8001408:	d2d7      	bcs.n	80013ba <__gedf2+0x52>
 800140a:	2900      	cmp	r1, #0
 800140c:	d0e2      	beq.n	80013d4 <__gedf2+0x6c>
 800140e:	0008      	movs	r0, r1
 8001410:	e7d3      	b.n	80013ba <__gedf2+0x52>
 8001412:	4243      	negs	r3, r0
 8001414:	4158      	adcs	r0, r3
 8001416:	0040      	lsls	r0, r0, #1
 8001418:	3801      	subs	r0, #1
 800141a:	e7ce      	b.n	80013ba <__gedf2+0x52>
 800141c:	2002      	movs	r0, #2
 800141e:	4240      	negs	r0, r0
 8001420:	e7cb      	b.n	80013ba <__gedf2+0x52>
 8001422:	45c4      	cmp	ip, r8
 8001424:	d8c5      	bhi.n	80013b2 <__gedf2+0x4a>
 8001426:	2000      	movs	r0, #0
 8001428:	45c4      	cmp	ip, r8
 800142a:	d2c6      	bcs.n	80013ba <__gedf2+0x52>
 800142c:	e7ed      	b.n	800140a <__gedf2+0xa2>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	000007ff 	.word	0x000007ff

08001434 <__ledf2>:
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	4647      	mov	r7, r8
 8001438:	46ce      	mov	lr, r9
 800143a:	0004      	movs	r4, r0
 800143c:	0018      	movs	r0, r3
 800143e:	0016      	movs	r6, r2
 8001440:	031b      	lsls	r3, r3, #12
 8001442:	0b1b      	lsrs	r3, r3, #12
 8001444:	4d2c      	ldr	r5, [pc, #176]	; (80014f8 <__ledf2+0xc4>)
 8001446:	004a      	lsls	r2, r1, #1
 8001448:	4699      	mov	r9, r3
 800144a:	b580      	push	{r7, lr}
 800144c:	0043      	lsls	r3, r0, #1
 800144e:	030f      	lsls	r7, r1, #12
 8001450:	46a4      	mov	ip, r4
 8001452:	46b0      	mov	r8, r6
 8001454:	0b3f      	lsrs	r7, r7, #12
 8001456:	0d52      	lsrs	r2, r2, #21
 8001458:	0fc9      	lsrs	r1, r1, #31
 800145a:	0d5b      	lsrs	r3, r3, #21
 800145c:	0fc0      	lsrs	r0, r0, #31
 800145e:	42aa      	cmp	r2, r5
 8001460:	d00d      	beq.n	800147e <__ledf2+0x4a>
 8001462:	42ab      	cmp	r3, r5
 8001464:	d010      	beq.n	8001488 <__ledf2+0x54>
 8001466:	2a00      	cmp	r2, #0
 8001468:	d127      	bne.n	80014ba <__ledf2+0x86>
 800146a:	433c      	orrs	r4, r7
 800146c:	2b00      	cmp	r3, #0
 800146e:	d111      	bne.n	8001494 <__ledf2+0x60>
 8001470:	464d      	mov	r5, r9
 8001472:	432e      	orrs	r6, r5
 8001474:	d10e      	bne.n	8001494 <__ledf2+0x60>
 8001476:	2000      	movs	r0, #0
 8001478:	2c00      	cmp	r4, #0
 800147a:	d015      	beq.n	80014a8 <__ledf2+0x74>
 800147c:	e00e      	b.n	800149c <__ledf2+0x68>
 800147e:	003d      	movs	r5, r7
 8001480:	4325      	orrs	r5, r4
 8001482:	d110      	bne.n	80014a6 <__ledf2+0x72>
 8001484:	4293      	cmp	r3, r2
 8001486:	d118      	bne.n	80014ba <__ledf2+0x86>
 8001488:	464d      	mov	r5, r9
 800148a:	432e      	orrs	r6, r5
 800148c:	d10b      	bne.n	80014a6 <__ledf2+0x72>
 800148e:	2a00      	cmp	r2, #0
 8001490:	d102      	bne.n	8001498 <__ledf2+0x64>
 8001492:	433c      	orrs	r4, r7
 8001494:	2c00      	cmp	r4, #0
 8001496:	d00b      	beq.n	80014b0 <__ledf2+0x7c>
 8001498:	4281      	cmp	r1, r0
 800149a:	d014      	beq.n	80014c6 <__ledf2+0x92>
 800149c:	2002      	movs	r0, #2
 800149e:	3901      	subs	r1, #1
 80014a0:	4008      	ands	r0, r1
 80014a2:	3801      	subs	r0, #1
 80014a4:	e000      	b.n	80014a8 <__ledf2+0x74>
 80014a6:	2002      	movs	r0, #2
 80014a8:	bcc0      	pop	{r6, r7}
 80014aa:	46b9      	mov	r9, r7
 80014ac:	46b0      	mov	r8, r6
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d1f9      	bne.n	80014a8 <__ledf2+0x74>
 80014b4:	2001      	movs	r0, #1
 80014b6:	4240      	negs	r0, r0
 80014b8:	e7f6      	b.n	80014a8 <__ledf2+0x74>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ec      	bne.n	8001498 <__ledf2+0x64>
 80014be:	464c      	mov	r4, r9
 80014c0:	4326      	orrs	r6, r4
 80014c2:	d1e9      	bne.n	8001498 <__ledf2+0x64>
 80014c4:	e7ea      	b.n	800149c <__ledf2+0x68>
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dd04      	ble.n	80014d4 <__ledf2+0xa0>
 80014ca:	4243      	negs	r3, r0
 80014cc:	4158      	adcs	r0, r3
 80014ce:	0040      	lsls	r0, r0, #1
 80014d0:	3801      	subs	r0, #1
 80014d2:	e7e9      	b.n	80014a8 <__ledf2+0x74>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbeb      	blt.n	80014b0 <__ledf2+0x7c>
 80014d8:	454f      	cmp	r7, r9
 80014da:	d8df      	bhi.n	800149c <__ledf2+0x68>
 80014dc:	d006      	beq.n	80014ec <__ledf2+0xb8>
 80014de:	2000      	movs	r0, #0
 80014e0:	454f      	cmp	r7, r9
 80014e2:	d2e1      	bcs.n	80014a8 <__ledf2+0x74>
 80014e4:	2900      	cmp	r1, #0
 80014e6:	d0e5      	beq.n	80014b4 <__ledf2+0x80>
 80014e8:	0008      	movs	r0, r1
 80014ea:	e7dd      	b.n	80014a8 <__ledf2+0x74>
 80014ec:	45c4      	cmp	ip, r8
 80014ee:	d8d5      	bhi.n	800149c <__ledf2+0x68>
 80014f0:	2000      	movs	r0, #0
 80014f2:	45c4      	cmp	ip, r8
 80014f4:	d2d8      	bcs.n	80014a8 <__ledf2+0x74>
 80014f6:	e7f5      	b.n	80014e4 <__ledf2+0xb0>
 80014f8:	000007ff 	.word	0x000007ff

080014fc <__aeabi_dmul>:
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	4657      	mov	r7, sl
 8001500:	464e      	mov	r6, r9
 8001502:	4645      	mov	r5, r8
 8001504:	46de      	mov	lr, fp
 8001506:	b5e0      	push	{r5, r6, r7, lr}
 8001508:	4698      	mov	r8, r3
 800150a:	030c      	lsls	r4, r1, #12
 800150c:	004b      	lsls	r3, r1, #1
 800150e:	0006      	movs	r6, r0
 8001510:	4692      	mov	sl, r2
 8001512:	b087      	sub	sp, #28
 8001514:	0b24      	lsrs	r4, r4, #12
 8001516:	0d5b      	lsrs	r3, r3, #21
 8001518:	0fcf      	lsrs	r7, r1, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x24>
 800151e:	e15c      	b.n	80017da <__aeabi_dmul+0x2de>
 8001520:	4ad9      	ldr	r2, [pc, #868]	; (8001888 <__aeabi_dmul+0x38c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d100      	bne.n	8001528 <__aeabi_dmul+0x2c>
 8001526:	e175      	b.n	8001814 <__aeabi_dmul+0x318>
 8001528:	0f42      	lsrs	r2, r0, #29
 800152a:	00e4      	lsls	r4, r4, #3
 800152c:	4314      	orrs	r4, r2
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	0412      	lsls	r2, r2, #16
 8001532:	4314      	orrs	r4, r2
 8001534:	4ad5      	ldr	r2, [pc, #852]	; (800188c <__aeabi_dmul+0x390>)
 8001536:	00c5      	lsls	r5, r0, #3
 8001538:	4694      	mov	ip, r2
 800153a:	4463      	add	r3, ip
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	4699      	mov	r9, r3
 8001542:	469b      	mov	fp, r3
 8001544:	4643      	mov	r3, r8
 8001546:	4642      	mov	r2, r8
 8001548:	031e      	lsls	r6, r3, #12
 800154a:	0fd2      	lsrs	r2, r2, #31
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4650      	mov	r0, sl
 8001550:	4690      	mov	r8, r2
 8001552:	0b36      	lsrs	r6, r6, #12
 8001554:	0d5b      	lsrs	r3, r3, #21
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x5e>
 8001558:	e120      	b.n	800179c <__aeabi_dmul+0x2a0>
 800155a:	4acb      	ldr	r2, [pc, #812]	; (8001888 <__aeabi_dmul+0x38c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d100      	bne.n	8001562 <__aeabi_dmul+0x66>
 8001560:	e162      	b.n	8001828 <__aeabi_dmul+0x32c>
 8001562:	49ca      	ldr	r1, [pc, #808]	; (800188c <__aeabi_dmul+0x390>)
 8001564:	0f42      	lsrs	r2, r0, #29
 8001566:	468c      	mov	ip, r1
 8001568:	9900      	ldr	r1, [sp, #0]
 800156a:	4463      	add	r3, ip
 800156c:	00f6      	lsls	r6, r6, #3
 800156e:	468c      	mov	ip, r1
 8001570:	4316      	orrs	r6, r2
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	449c      	add	ip, r3
 8001576:	0412      	lsls	r2, r2, #16
 8001578:	4663      	mov	r3, ip
 800157a:	4316      	orrs	r6, r2
 800157c:	00c2      	lsls	r2, r0, #3
 800157e:	2000      	movs	r0, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	9900      	ldr	r1, [sp, #0]
 8001584:	4643      	mov	r3, r8
 8001586:	3101      	adds	r1, #1
 8001588:	468c      	mov	ip, r1
 800158a:	4649      	mov	r1, r9
 800158c:	407b      	eors	r3, r7
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	290f      	cmp	r1, #15
 8001592:	d826      	bhi.n	80015e2 <__aeabi_dmul+0xe6>
 8001594:	4bbe      	ldr	r3, [pc, #760]	; (8001890 <__aeabi_dmul+0x394>)
 8001596:	0089      	lsls	r1, r1, #2
 8001598:	5859      	ldr	r1, [r3, r1]
 800159a:	468f      	mov	pc, r1
 800159c:	4643      	mov	r3, r8
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	0034      	movs	r4, r6
 80015a2:	0015      	movs	r5, r2
 80015a4:	4683      	mov	fp, r0
 80015a6:	465b      	mov	r3, fp
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d016      	beq.n	80015da <__aeabi_dmul+0xde>
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0xb6>
 80015b0:	e203      	b.n	80019ba <__aeabi_dmul+0x4be>
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dmul+0xbc>
 80015b6:	e0cd      	b.n	8001754 <__aeabi_dmul+0x258>
 80015b8:	2200      	movs	r2, #0
 80015ba:	2400      	movs	r4, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	4322      	orrs	r2, r4
 80015c4:	07db      	lsls	r3, r3, #31
 80015c6:	431a      	orrs	r2, r3
 80015c8:	0028      	movs	r0, r5
 80015ca:	0011      	movs	r1, r2
 80015cc:	b007      	add	sp, #28
 80015ce:	bcf0      	pop	{r4, r5, r6, r7}
 80015d0:	46bb      	mov	fp, r7
 80015d2:	46b2      	mov	sl, r6
 80015d4:	46a9      	mov	r9, r5
 80015d6:	46a0      	mov	r8, r4
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	2400      	movs	r4, #0
 80015dc:	2500      	movs	r5, #0
 80015de:	4aaa      	ldr	r2, [pc, #680]	; (8001888 <__aeabi_dmul+0x38c>)
 80015e0:	e7ed      	b.n	80015be <__aeabi_dmul+0xc2>
 80015e2:	0c28      	lsrs	r0, r5, #16
 80015e4:	042d      	lsls	r5, r5, #16
 80015e6:	0c2d      	lsrs	r5, r5, #16
 80015e8:	002b      	movs	r3, r5
 80015ea:	0c11      	lsrs	r1, r2, #16
 80015ec:	0412      	lsls	r2, r2, #16
 80015ee:	0c12      	lsrs	r2, r2, #16
 80015f0:	4353      	muls	r3, r2
 80015f2:	4698      	mov	r8, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	002f      	movs	r7, r5
 80015f8:	4343      	muls	r3, r0
 80015fa:	4699      	mov	r9, r3
 80015fc:	434f      	muls	r7, r1
 80015fe:	444f      	add	r7, r9
 8001600:	46bb      	mov	fp, r7
 8001602:	4647      	mov	r7, r8
 8001604:	000b      	movs	r3, r1
 8001606:	0c3f      	lsrs	r7, r7, #16
 8001608:	46ba      	mov	sl, r7
 800160a:	4343      	muls	r3, r0
 800160c:	44da      	add	sl, fp
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	45d1      	cmp	r9, sl
 8001612:	d904      	bls.n	800161e <__aeabi_dmul+0x122>
 8001614:	2780      	movs	r7, #128	; 0x80
 8001616:	027f      	lsls	r7, r7, #9
 8001618:	46b9      	mov	r9, r7
 800161a:	444b      	add	r3, r9
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	4653      	mov	r3, sl
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	469b      	mov	fp, r3
 8001624:	4653      	mov	r3, sl
 8001626:	041f      	lsls	r7, r3, #16
 8001628:	4643      	mov	r3, r8
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	4698      	mov	r8, r3
 8001630:	003b      	movs	r3, r7
 8001632:	4443      	add	r3, r8
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	0c33      	lsrs	r3, r6, #16
 8001638:	0436      	lsls	r6, r6, #16
 800163a:	0c36      	lsrs	r6, r6, #16
 800163c:	4698      	mov	r8, r3
 800163e:	0033      	movs	r3, r6
 8001640:	4343      	muls	r3, r0
 8001642:	4699      	mov	r9, r3
 8001644:	4643      	mov	r3, r8
 8001646:	4343      	muls	r3, r0
 8001648:	002f      	movs	r7, r5
 800164a:	469a      	mov	sl, r3
 800164c:	4643      	mov	r3, r8
 800164e:	4377      	muls	r7, r6
 8001650:	435d      	muls	r5, r3
 8001652:	0c38      	lsrs	r0, r7, #16
 8001654:	444d      	add	r5, r9
 8001656:	1945      	adds	r5, r0, r5
 8001658:	45a9      	cmp	r9, r5
 800165a:	d903      	bls.n	8001664 <__aeabi_dmul+0x168>
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	4699      	mov	r9, r3
 8001662:	44ca      	add	sl, r9
 8001664:	043f      	lsls	r7, r7, #16
 8001666:	0c28      	lsrs	r0, r5, #16
 8001668:	0c3f      	lsrs	r7, r7, #16
 800166a:	042d      	lsls	r5, r5, #16
 800166c:	19ed      	adds	r5, r5, r7
 800166e:	0c27      	lsrs	r7, r4, #16
 8001670:	0424      	lsls	r4, r4, #16
 8001672:	0c24      	lsrs	r4, r4, #16
 8001674:	0003      	movs	r3, r0
 8001676:	0020      	movs	r0, r4
 8001678:	4350      	muls	r0, r2
 800167a:	437a      	muls	r2, r7
 800167c:	4691      	mov	r9, r2
 800167e:	003a      	movs	r2, r7
 8001680:	4453      	add	r3, sl
 8001682:	9305      	str	r3, [sp, #20]
 8001684:	0c03      	lsrs	r3, r0, #16
 8001686:	469a      	mov	sl, r3
 8001688:	434a      	muls	r2, r1
 800168a:	4361      	muls	r1, r4
 800168c:	4449      	add	r1, r9
 800168e:	4451      	add	r1, sl
 8001690:	44ab      	add	fp, r5
 8001692:	4589      	cmp	r9, r1
 8001694:	d903      	bls.n	800169e <__aeabi_dmul+0x1a2>
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4699      	mov	r9, r3
 800169c:	444a      	add	r2, r9
 800169e:	0400      	lsls	r0, r0, #16
 80016a0:	0c0b      	lsrs	r3, r1, #16
 80016a2:	0c00      	lsrs	r0, r0, #16
 80016a4:	0409      	lsls	r1, r1, #16
 80016a6:	1809      	adds	r1, r1, r0
 80016a8:	0020      	movs	r0, r4
 80016aa:	4699      	mov	r9, r3
 80016ac:	4643      	mov	r3, r8
 80016ae:	4370      	muls	r0, r6
 80016b0:	435c      	muls	r4, r3
 80016b2:	437e      	muls	r6, r7
 80016b4:	435f      	muls	r7, r3
 80016b6:	0c03      	lsrs	r3, r0, #16
 80016b8:	4698      	mov	r8, r3
 80016ba:	19a4      	adds	r4, r4, r6
 80016bc:	4444      	add	r4, r8
 80016be:	444a      	add	r2, r9
 80016c0:	9703      	str	r7, [sp, #12]
 80016c2:	42a6      	cmp	r6, r4
 80016c4:	d904      	bls.n	80016d0 <__aeabi_dmul+0x1d4>
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	4698      	mov	r8, r3
 80016cc:	4447      	add	r7, r8
 80016ce:	9703      	str	r7, [sp, #12]
 80016d0:	0423      	lsls	r3, r4, #16
 80016d2:	9e02      	ldr	r6, [sp, #8]
 80016d4:	469a      	mov	sl, r3
 80016d6:	9b05      	ldr	r3, [sp, #20]
 80016d8:	445e      	add	r6, fp
 80016da:	4698      	mov	r8, r3
 80016dc:	42ae      	cmp	r6, r5
 80016de:	41ad      	sbcs	r5, r5
 80016e0:	1876      	adds	r6, r6, r1
 80016e2:	428e      	cmp	r6, r1
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	0400      	lsls	r0, r0, #16
 80016e8:	0c00      	lsrs	r0, r0, #16
 80016ea:	4450      	add	r0, sl
 80016ec:	4440      	add	r0, r8
 80016ee:	426d      	negs	r5, r5
 80016f0:	1947      	adds	r7, r0, r5
 80016f2:	46b8      	mov	r8, r7
 80016f4:	4693      	mov	fp, r2
 80016f6:	4249      	negs	r1, r1
 80016f8:	4689      	mov	r9, r1
 80016fa:	44c3      	add	fp, r8
 80016fc:	44d9      	add	r9, fp
 80016fe:	4298      	cmp	r0, r3
 8001700:	4180      	sbcs	r0, r0
 8001702:	45a8      	cmp	r8, r5
 8001704:	41ad      	sbcs	r5, r5
 8001706:	4593      	cmp	fp, r2
 8001708:	4192      	sbcs	r2, r2
 800170a:	4589      	cmp	r9, r1
 800170c:	4189      	sbcs	r1, r1
 800170e:	426d      	negs	r5, r5
 8001710:	4240      	negs	r0, r0
 8001712:	4328      	orrs	r0, r5
 8001714:	0c24      	lsrs	r4, r4, #16
 8001716:	4252      	negs	r2, r2
 8001718:	4249      	negs	r1, r1
 800171a:	430a      	orrs	r2, r1
 800171c:	9b03      	ldr	r3, [sp, #12]
 800171e:	1900      	adds	r0, r0, r4
 8001720:	1880      	adds	r0, r0, r2
 8001722:	18c7      	adds	r7, r0, r3
 8001724:	464b      	mov	r3, r9
 8001726:	0ddc      	lsrs	r4, r3, #23
 8001728:	9b04      	ldr	r3, [sp, #16]
 800172a:	0275      	lsls	r5, r6, #9
 800172c:	431d      	orrs	r5, r3
 800172e:	1e6a      	subs	r2, r5, #1
 8001730:	4195      	sbcs	r5, r2
 8001732:	464b      	mov	r3, r9
 8001734:	0df6      	lsrs	r6, r6, #23
 8001736:	027f      	lsls	r7, r7, #9
 8001738:	4335      	orrs	r5, r6
 800173a:	025a      	lsls	r2, r3, #9
 800173c:	433c      	orrs	r4, r7
 800173e:	4315      	orrs	r5, r2
 8001740:	01fb      	lsls	r3, r7, #7
 8001742:	d400      	bmi.n	8001746 <__aeabi_dmul+0x24a>
 8001744:	e11c      	b.n	8001980 <__aeabi_dmul+0x484>
 8001746:	2101      	movs	r1, #1
 8001748:	086a      	lsrs	r2, r5, #1
 800174a:	400d      	ands	r5, r1
 800174c:	4315      	orrs	r5, r2
 800174e:	07e2      	lsls	r2, r4, #31
 8001750:	4315      	orrs	r5, r2
 8001752:	0864      	lsrs	r4, r4, #1
 8001754:	494f      	ldr	r1, [pc, #316]	; (8001894 <__aeabi_dmul+0x398>)
 8001756:	4461      	add	r1, ip
 8001758:	2900      	cmp	r1, #0
 800175a:	dc00      	bgt.n	800175e <__aeabi_dmul+0x262>
 800175c:	e0b0      	b.n	80018c0 <__aeabi_dmul+0x3c4>
 800175e:	076b      	lsls	r3, r5, #29
 8001760:	d009      	beq.n	8001776 <__aeabi_dmul+0x27a>
 8001762:	220f      	movs	r2, #15
 8001764:	402a      	ands	r2, r5
 8001766:	2a04      	cmp	r2, #4
 8001768:	d005      	beq.n	8001776 <__aeabi_dmul+0x27a>
 800176a:	1d2a      	adds	r2, r5, #4
 800176c:	42aa      	cmp	r2, r5
 800176e:	41ad      	sbcs	r5, r5
 8001770:	426d      	negs	r5, r5
 8001772:	1964      	adds	r4, r4, r5
 8001774:	0015      	movs	r5, r2
 8001776:	01e3      	lsls	r3, r4, #7
 8001778:	d504      	bpl.n	8001784 <__aeabi_dmul+0x288>
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	4a46      	ldr	r2, [pc, #280]	; (8001898 <__aeabi_dmul+0x39c>)
 800177e:	00c9      	lsls	r1, r1, #3
 8001780:	4014      	ands	r4, r2
 8001782:	4461      	add	r1, ip
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <__aeabi_dmul+0x3a0>)
 8001786:	4291      	cmp	r1, r2
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x290>
 800178a:	e726      	b.n	80015da <__aeabi_dmul+0xde>
 800178c:	0762      	lsls	r2, r4, #29
 800178e:	08ed      	lsrs	r5, r5, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	0549      	lsls	r1, r1, #21
 8001794:	4315      	orrs	r5, r2
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d4a      	lsrs	r2, r1, #21
 800179a:	e710      	b.n	80015be <__aeabi_dmul+0xc2>
 800179c:	4652      	mov	r2, sl
 800179e:	4332      	orrs	r2, r6
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dmul+0x2a8>
 80017a2:	e07f      	b.n	80018a4 <__aeabi_dmul+0x3a8>
 80017a4:	2e00      	cmp	r6, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x2ae>
 80017a8:	e0dc      	b.n	8001964 <__aeabi_dmul+0x468>
 80017aa:	0030      	movs	r0, r6
 80017ac:	f000 fd4e 	bl	800224c <__clzsi2>
 80017b0:	0002      	movs	r2, r0
 80017b2:	3a0b      	subs	r2, #11
 80017b4:	231d      	movs	r3, #29
 80017b6:	0001      	movs	r1, r0
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	4652      	mov	r2, sl
 80017bc:	3908      	subs	r1, #8
 80017be:	40da      	lsrs	r2, r3
 80017c0:	408e      	lsls	r6, r1
 80017c2:	4316      	orrs	r6, r2
 80017c4:	4652      	mov	r2, sl
 80017c6:	408a      	lsls	r2, r1
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	4935      	ldr	r1, [pc, #212]	; (80018a0 <__aeabi_dmul+0x3a4>)
 80017cc:	1a18      	subs	r0, r3, r0
 80017ce:	0003      	movs	r3, r0
 80017d0:	468c      	mov	ip, r1
 80017d2:	4463      	add	r3, ip
 80017d4:	2000      	movs	r0, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	e6d3      	b.n	8001582 <__aeabi_dmul+0x86>
 80017da:	0025      	movs	r5, r4
 80017dc:	4305      	orrs	r5, r0
 80017de:	d04a      	beq.n	8001876 <__aeabi_dmul+0x37a>
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dmul+0x2ea>
 80017e4:	e0b0      	b.n	8001948 <__aeabi_dmul+0x44c>
 80017e6:	0020      	movs	r0, r4
 80017e8:	f000 fd30 	bl	800224c <__clzsi2>
 80017ec:	0001      	movs	r1, r0
 80017ee:	0002      	movs	r2, r0
 80017f0:	390b      	subs	r1, #11
 80017f2:	231d      	movs	r3, #29
 80017f4:	0010      	movs	r0, r2
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	0031      	movs	r1, r6
 80017fa:	0035      	movs	r5, r6
 80017fc:	3808      	subs	r0, #8
 80017fe:	4084      	lsls	r4, r0
 8001800:	40d9      	lsrs	r1, r3
 8001802:	4085      	lsls	r5, r0
 8001804:	430c      	orrs	r4, r1
 8001806:	4826      	ldr	r0, [pc, #152]	; (80018a0 <__aeabi_dmul+0x3a4>)
 8001808:	1a83      	subs	r3, r0, r2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	4699      	mov	r9, r3
 8001810:	469b      	mov	fp, r3
 8001812:	e697      	b.n	8001544 <__aeabi_dmul+0x48>
 8001814:	0005      	movs	r5, r0
 8001816:	4325      	orrs	r5, r4
 8001818:	d126      	bne.n	8001868 <__aeabi_dmul+0x36c>
 800181a:	2208      	movs	r2, #8
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	2400      	movs	r4, #0
 8001822:	4691      	mov	r9, r2
 8001824:	469b      	mov	fp, r3
 8001826:	e68d      	b.n	8001544 <__aeabi_dmul+0x48>
 8001828:	4652      	mov	r2, sl
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	4332      	orrs	r2, r6
 800182e:	d110      	bne.n	8001852 <__aeabi_dmul+0x356>
 8001830:	4915      	ldr	r1, [pc, #84]	; (8001888 <__aeabi_dmul+0x38c>)
 8001832:	2600      	movs	r6, #0
 8001834:	468c      	mov	ip, r1
 8001836:	4463      	add	r3, ip
 8001838:	4649      	mov	r1, r9
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	4319      	orrs	r1, r3
 8001840:	4689      	mov	r9, r1
 8001842:	2002      	movs	r0, #2
 8001844:	e69d      	b.n	8001582 <__aeabi_dmul+0x86>
 8001846:	465b      	mov	r3, fp
 8001848:	9701      	str	r7, [sp, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d000      	beq.n	8001850 <__aeabi_dmul+0x354>
 800184e:	e6ad      	b.n	80015ac <__aeabi_dmul+0xb0>
 8001850:	e6c3      	b.n	80015da <__aeabi_dmul+0xde>
 8001852:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <__aeabi_dmul+0x38c>)
 8001854:	2003      	movs	r0, #3
 8001856:	4694      	mov	ip, r2
 8001858:	4463      	add	r3, ip
 800185a:	464a      	mov	r2, r9
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2303      	movs	r3, #3
 8001860:	431a      	orrs	r2, r3
 8001862:	4691      	mov	r9, r2
 8001864:	4652      	mov	r2, sl
 8001866:	e68c      	b.n	8001582 <__aeabi_dmul+0x86>
 8001868:	220c      	movs	r2, #12
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2303      	movs	r3, #3
 800186e:	0005      	movs	r5, r0
 8001870:	4691      	mov	r9, r2
 8001872:	469b      	mov	fp, r3
 8001874:	e666      	b.n	8001544 <__aeabi_dmul+0x48>
 8001876:	2304      	movs	r3, #4
 8001878:	4699      	mov	r9, r3
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	2400      	movs	r4, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e65e      	b.n	8001544 <__aeabi_dmul+0x48>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	000007ff 	.word	0x000007ff
 800188c:	fffffc01 	.word	0xfffffc01
 8001890:	0800b2a0 	.word	0x0800b2a0
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	fffffc0d 	.word	0xfffffc0d
 80018a4:	4649      	mov	r1, r9
 80018a6:	2301      	movs	r3, #1
 80018a8:	4319      	orrs	r1, r3
 80018aa:	4689      	mov	r9, r1
 80018ac:	2600      	movs	r6, #0
 80018ae:	2001      	movs	r0, #1
 80018b0:	e667      	b.n	8001582 <__aeabi_dmul+0x86>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	2500      	movs	r5, #0
 80018b8:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <__aeabi_dmul+0x4cc>)
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	e67e      	b.n	80015be <__aeabi_dmul+0xc2>
 80018c0:	2001      	movs	r0, #1
 80018c2:	1a40      	subs	r0, r0, r1
 80018c4:	2838      	cmp	r0, #56	; 0x38
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dmul+0x3ce>
 80018c8:	e676      	b.n	80015b8 <__aeabi_dmul+0xbc>
 80018ca:	281f      	cmp	r0, #31
 80018cc:	dd5b      	ble.n	8001986 <__aeabi_dmul+0x48a>
 80018ce:	221f      	movs	r2, #31
 80018d0:	0023      	movs	r3, r4
 80018d2:	4252      	negs	r2, r2
 80018d4:	1a51      	subs	r1, r2, r1
 80018d6:	40cb      	lsrs	r3, r1
 80018d8:	0019      	movs	r1, r3
 80018da:	2820      	cmp	r0, #32
 80018dc:	d003      	beq.n	80018e6 <__aeabi_dmul+0x3ea>
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <__aeabi_dmul+0x4d0>)
 80018e0:	4462      	add	r2, ip
 80018e2:	4094      	lsls	r4, r2
 80018e4:	4325      	orrs	r5, r4
 80018e6:	1e6a      	subs	r2, r5, #1
 80018e8:	4195      	sbcs	r5, r2
 80018ea:	002a      	movs	r2, r5
 80018ec:	430a      	orrs	r2, r1
 80018ee:	2107      	movs	r1, #7
 80018f0:	000d      	movs	r5, r1
 80018f2:	2400      	movs	r4, #0
 80018f4:	4015      	ands	r5, r2
 80018f6:	4211      	tst	r1, r2
 80018f8:	d05b      	beq.n	80019b2 <__aeabi_dmul+0x4b6>
 80018fa:	210f      	movs	r1, #15
 80018fc:	2400      	movs	r4, #0
 80018fe:	4011      	ands	r1, r2
 8001900:	2904      	cmp	r1, #4
 8001902:	d053      	beq.n	80019ac <__aeabi_dmul+0x4b0>
 8001904:	1d11      	adds	r1, r2, #4
 8001906:	4291      	cmp	r1, r2
 8001908:	4192      	sbcs	r2, r2
 800190a:	4252      	negs	r2, r2
 800190c:	18a4      	adds	r4, r4, r2
 800190e:	000a      	movs	r2, r1
 8001910:	0223      	lsls	r3, r4, #8
 8001912:	d54b      	bpl.n	80019ac <__aeabi_dmul+0x4b0>
 8001914:	2201      	movs	r2, #1
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e650      	b.n	80015be <__aeabi_dmul+0xc2>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	031b      	lsls	r3, r3, #12
 8001920:	421c      	tst	r4, r3
 8001922:	d009      	beq.n	8001938 <__aeabi_dmul+0x43c>
 8001924:	421e      	tst	r6, r3
 8001926:	d107      	bne.n	8001938 <__aeabi_dmul+0x43c>
 8001928:	4333      	orrs	r3, r6
 800192a:	031c      	lsls	r4, r3, #12
 800192c:	4643      	mov	r3, r8
 800192e:	0015      	movs	r5, r2
 8001930:	0b24      	lsrs	r4, r4, #12
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <__aeabi_dmul+0x4cc>)
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	e642      	b.n	80015be <__aeabi_dmul+0xc2>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <__aeabi_dmul+0x4cc>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	9701      	str	r7, [sp, #4]
 8001946:	e63a      	b.n	80015be <__aeabi_dmul+0xc2>
 8001948:	f000 fc80 	bl	800224c <__clzsi2>
 800194c:	0001      	movs	r1, r0
 800194e:	0002      	movs	r2, r0
 8001950:	3115      	adds	r1, #21
 8001952:	3220      	adds	r2, #32
 8001954:	291c      	cmp	r1, #28
 8001956:	dc00      	bgt.n	800195a <__aeabi_dmul+0x45e>
 8001958:	e74b      	b.n	80017f2 <__aeabi_dmul+0x2f6>
 800195a:	0034      	movs	r4, r6
 800195c:	3808      	subs	r0, #8
 800195e:	2500      	movs	r5, #0
 8001960:	4084      	lsls	r4, r0
 8001962:	e750      	b.n	8001806 <__aeabi_dmul+0x30a>
 8001964:	f000 fc72 	bl	800224c <__clzsi2>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	3215      	adds	r2, #21
 800196e:	3020      	adds	r0, #32
 8001970:	2a1c      	cmp	r2, #28
 8001972:	dc00      	bgt.n	8001976 <__aeabi_dmul+0x47a>
 8001974:	e71e      	b.n	80017b4 <__aeabi_dmul+0x2b8>
 8001976:	4656      	mov	r6, sl
 8001978:	3b08      	subs	r3, #8
 800197a:	2200      	movs	r2, #0
 800197c:	409e      	lsls	r6, r3
 800197e:	e723      	b.n	80017c8 <__aeabi_dmul+0x2cc>
 8001980:	9b00      	ldr	r3, [sp, #0]
 8001982:	469c      	mov	ip, r3
 8001984:	e6e6      	b.n	8001754 <__aeabi_dmul+0x258>
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <__aeabi_dmul+0x4d4>)
 8001988:	0022      	movs	r2, r4
 800198a:	4461      	add	r1, ip
 800198c:	002e      	movs	r6, r5
 800198e:	408d      	lsls	r5, r1
 8001990:	408a      	lsls	r2, r1
 8001992:	40c6      	lsrs	r6, r0
 8001994:	1e69      	subs	r1, r5, #1
 8001996:	418d      	sbcs	r5, r1
 8001998:	4332      	orrs	r2, r6
 800199a:	432a      	orrs	r2, r5
 800199c:	40c4      	lsrs	r4, r0
 800199e:	0753      	lsls	r3, r2, #29
 80019a0:	d0b6      	beq.n	8001910 <__aeabi_dmul+0x414>
 80019a2:	210f      	movs	r1, #15
 80019a4:	4011      	ands	r1, r2
 80019a6:	2904      	cmp	r1, #4
 80019a8:	d1ac      	bne.n	8001904 <__aeabi_dmul+0x408>
 80019aa:	e7b1      	b.n	8001910 <__aeabi_dmul+0x414>
 80019ac:	0765      	lsls	r5, r4, #29
 80019ae:	0264      	lsls	r4, r4, #9
 80019b0:	0b24      	lsrs	r4, r4, #12
 80019b2:	08d2      	lsrs	r2, r2, #3
 80019b4:	4315      	orrs	r5, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	e601      	b.n	80015be <__aeabi_dmul+0xc2>
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	0312      	lsls	r2, r2, #12
 80019be:	4314      	orrs	r4, r2
 80019c0:	0324      	lsls	r4, r4, #12
 80019c2:	4a01      	ldr	r2, [pc, #4]	; (80019c8 <__aeabi_dmul+0x4cc>)
 80019c4:	0b24      	lsrs	r4, r4, #12
 80019c6:	e5fa      	b.n	80015be <__aeabi_dmul+0xc2>
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	0000043e 	.word	0x0000043e
 80019d0:	0000041e 	.word	0x0000041e

080019d4 <__aeabi_dsub>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	4645      	mov	r5, r8
 80019dc:	46de      	mov	lr, fp
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	001e      	movs	r6, r3
 80019e2:	0017      	movs	r7, r2
 80019e4:	004a      	lsls	r2, r1, #1
 80019e6:	030b      	lsls	r3, r1, #12
 80019e8:	0d52      	lsrs	r2, r2, #21
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	4690      	mov	r8, r2
 80019ee:	0f42      	lsrs	r2, r0, #29
 80019f0:	431a      	orrs	r2, r3
 80019f2:	0fcd      	lsrs	r5, r1, #31
 80019f4:	4ccd      	ldr	r4, [pc, #820]	; (8001d2c <__aeabi_dsub+0x358>)
 80019f6:	0331      	lsls	r1, r6, #12
 80019f8:	00c3      	lsls	r3, r0, #3
 80019fa:	4694      	mov	ip, r2
 80019fc:	0070      	lsls	r0, r6, #1
 80019fe:	0f7a      	lsrs	r2, r7, #29
 8001a00:	0a49      	lsrs	r1, r1, #9
 8001a02:	00ff      	lsls	r7, r7, #3
 8001a04:	469a      	mov	sl, r3
 8001a06:	46b9      	mov	r9, r7
 8001a08:	0d40      	lsrs	r0, r0, #21
 8001a0a:	0ff6      	lsrs	r6, r6, #31
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	42a0      	cmp	r0, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x40>
 8001a12:	e0b1      	b.n	8001b78 <__aeabi_dsub+0x1a4>
 8001a14:	2201      	movs	r2, #1
 8001a16:	4056      	eors	r6, r2
 8001a18:	46b3      	mov	fp, r6
 8001a1a:	42b5      	cmp	r5, r6
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x4c>
 8001a1e:	e088      	b.n	8001b32 <__aeabi_dsub+0x15e>
 8001a20:	4642      	mov	r2, r8
 8001a22:	1a12      	subs	r2, r2, r0
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_dsub+0x56>
 8001a28:	e0ae      	b.n	8001b88 <__aeabi_dsub+0x1b4>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x5c>
 8001a2e:	e0c1      	b.n	8001bb4 <__aeabi_dsub+0x1e0>
 8001a30:	48be      	ldr	r0, [pc, #760]	; (8001d2c <__aeabi_dsub+0x358>)
 8001a32:	4580      	cmp	r8, r0
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x64>
 8001a36:	e151      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001a38:	2080      	movs	r0, #128	; 0x80
 8001a3a:	0400      	lsls	r0, r0, #16
 8001a3c:	4301      	orrs	r1, r0
 8001a3e:	2a38      	cmp	r2, #56	; 0x38
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dsub+0x70>
 8001a42:	e17b      	b.n	8001d3c <__aeabi_dsub+0x368>
 8001a44:	2a1f      	cmp	r2, #31
 8001a46:	dd00      	ble.n	8001a4a <__aeabi_dsub+0x76>
 8001a48:	e1ee      	b.n	8001e28 <__aeabi_dsub+0x454>
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	003e      	movs	r6, r7
 8001a4e:	1a80      	subs	r0, r0, r2
 8001a50:	000c      	movs	r4, r1
 8001a52:	40d6      	lsrs	r6, r2
 8001a54:	40d1      	lsrs	r1, r2
 8001a56:	4087      	lsls	r7, r0
 8001a58:	4662      	mov	r2, ip
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	1a52      	subs	r2, r2, r1
 8001a5e:	1e78      	subs	r0, r7, #1
 8001a60:	4187      	sbcs	r7, r0
 8001a62:	4694      	mov	ip, r2
 8001a64:	4334      	orrs	r4, r6
 8001a66:	4327      	orrs	r7, r4
 8001a68:	1bdc      	subs	r4, r3, r7
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	419b      	sbcs	r3, r3
 8001a6e:	4662      	mov	r2, ip
 8001a70:	425b      	negs	r3, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4699      	mov	r9, r3
 8001a76:	464b      	mov	r3, r9
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	d400      	bmi.n	8001a7e <__aeabi_dsub+0xaa>
 8001a7c:	e118      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001a7e:	464b      	mov	r3, r9
 8001a80:	0258      	lsls	r0, r3, #9
 8001a82:	0a43      	lsrs	r3, r0, #9
 8001a84:	4699      	mov	r9, r3
 8001a86:	464b      	mov	r3, r9
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0xba>
 8001a8c:	e137      	b.n	8001cfe <__aeabi_dsub+0x32a>
 8001a8e:	4648      	mov	r0, r9
 8001a90:	f000 fbdc 	bl	800224c <__clzsi2>
 8001a94:	0001      	movs	r1, r0
 8001a96:	3908      	subs	r1, #8
 8001a98:	2320      	movs	r3, #32
 8001a9a:	0022      	movs	r2, r4
 8001a9c:	4648      	mov	r0, r9
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	40da      	lsrs	r2, r3
 8001aa2:	4088      	lsls	r0, r1
 8001aa4:	408c      	lsls	r4, r1
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	4310      	orrs	r0, r2
 8001aaa:	4588      	cmp	r8, r1
 8001aac:	dd00      	ble.n	8001ab0 <__aeabi_dsub+0xdc>
 8001aae:	e136      	b.n	8001d1e <__aeabi_dsub+0x34a>
 8001ab0:	1ac9      	subs	r1, r1, r3
 8001ab2:	1c4b      	adds	r3, r1, #1
 8001ab4:	2b1f      	cmp	r3, #31
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dsub+0xe6>
 8001ab8:	e0ea      	b.n	8001c90 <__aeabi_dsub+0x2bc>
 8001aba:	2220      	movs	r2, #32
 8001abc:	0026      	movs	r6, r4
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	4094      	lsls	r4, r2
 8001ac4:	40de      	lsrs	r6, r3
 8001ac6:	40d8      	lsrs	r0, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4091      	lsls	r1, r2
 8001acc:	1e62      	subs	r2, r4, #1
 8001ace:	4194      	sbcs	r4, r2
 8001ad0:	4681      	mov	r9, r0
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	4331      	orrs	r1, r6
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d009      	beq.n	8001af0 <__aeabi_dsub+0x11c>
 8001adc:	230f      	movs	r3, #15
 8001ade:	4023      	ands	r3, r4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d005      	beq.n	8001af0 <__aeabi_dsub+0x11c>
 8001ae4:	1d23      	adds	r3, r4, #4
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	41a4      	sbcs	r4, r4
 8001aea:	4264      	negs	r4, r4
 8001aec:	44a1      	add	r9, r4
 8001aee:	001c      	movs	r4, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	d400      	bmi.n	8001af8 <__aeabi_dsub+0x124>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_dsub+0x2e2>
 8001af8:	4641      	mov	r1, r8
 8001afa:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <__aeabi_dsub+0x358>)
 8001afc:	3101      	adds	r1, #1
 8001afe:	4299      	cmp	r1, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x130>
 8001b02:	e0e7      	b.n	8001cd4 <__aeabi_dsub+0x300>
 8001b04:	464b      	mov	r3, r9
 8001b06:	488a      	ldr	r0, [pc, #552]	; (8001d30 <__aeabi_dsub+0x35c>)
 8001b08:	08e4      	lsrs	r4, r4, #3
 8001b0a:	4003      	ands	r3, r0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	0549      	lsls	r1, r1, #21
 8001b10:	075b      	lsls	r3, r3, #29
 8001b12:	0240      	lsls	r0, r0, #9
 8001b14:	4323      	orrs	r3, r4
 8001b16:	0d4a      	lsrs	r2, r1, #21
 8001b18:	0b04      	lsrs	r4, r0, #12
 8001b1a:	0512      	lsls	r2, r2, #20
 8001b1c:	07ed      	lsls	r5, r5, #31
 8001b1e:	4322      	orrs	r2, r4
 8001b20:	432a      	orrs	r2, r5
 8001b22:	0018      	movs	r0, r3
 8001b24:	0011      	movs	r1, r2
 8001b26:	bcf0      	pop	{r4, r5, r6, r7}
 8001b28:	46bb      	mov	fp, r7
 8001b2a:	46b2      	mov	sl, r6
 8001b2c:	46a9      	mov	r9, r5
 8001b2e:	46a0      	mov	r8, r4
 8001b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b32:	4642      	mov	r2, r8
 8001b34:	1a12      	subs	r2, r2, r0
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	dd52      	ble.n	8001be0 <__aeabi_dsub+0x20c>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x16c>
 8001b3e:	e09c      	b.n	8001c7a <__aeabi_dsub+0x2a6>
 8001b40:	45a0      	cmp	r8, r4
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x172>
 8001b44:	e0ca      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001b46:	2080      	movs	r0, #128	; 0x80
 8001b48:	0400      	lsls	r0, r0, #16
 8001b4a:	4301      	orrs	r1, r0
 8001b4c:	2a38      	cmp	r2, #56	; 0x38
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x17e>
 8001b50:	e149      	b.n	8001de6 <__aeabi_dsub+0x412>
 8001b52:	2a1f      	cmp	r2, #31
 8001b54:	dc00      	bgt.n	8001b58 <__aeabi_dsub+0x184>
 8001b56:	e197      	b.n	8001e88 <__aeabi_dsub+0x4b4>
 8001b58:	0010      	movs	r0, r2
 8001b5a:	000e      	movs	r6, r1
 8001b5c:	3820      	subs	r0, #32
 8001b5e:	40c6      	lsrs	r6, r0
 8001b60:	2a20      	cmp	r2, #32
 8001b62:	d004      	beq.n	8001b6e <__aeabi_dsub+0x19a>
 8001b64:	2040      	movs	r0, #64	; 0x40
 8001b66:	1a82      	subs	r2, r0, r2
 8001b68:	4091      	lsls	r1, r2
 8001b6a:	430f      	orrs	r7, r1
 8001b6c:	46b9      	mov	r9, r7
 8001b6e:	464c      	mov	r4, r9
 8001b70:	1e62      	subs	r2, r4, #1
 8001b72:	4194      	sbcs	r4, r2
 8001b74:	4334      	orrs	r4, r6
 8001b76:	e13a      	b.n	8001dee <__aeabi_dsub+0x41a>
 8001b78:	000a      	movs	r2, r1
 8001b7a:	433a      	orrs	r2, r7
 8001b7c:	d028      	beq.n	8001bd0 <__aeabi_dsub+0x1fc>
 8001b7e:	46b3      	mov	fp, r6
 8001b80:	42b5      	cmp	r5, r6
 8001b82:	d02b      	beq.n	8001bdc <__aeabi_dsub+0x208>
 8001b84:	4a6b      	ldr	r2, [pc, #428]	; (8001d34 <__aeabi_dsub+0x360>)
 8001b86:	4442      	add	r2, r8
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d05d      	beq.n	8001c48 <__aeabi_dsub+0x274>
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	4644      	mov	r4, r8
 8001b90:	1a82      	subs	r2, r0, r2
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dsub+0x1c4>
 8001b96:	e0f5      	b.n	8001d84 <__aeabi_dsub+0x3b0>
 8001b98:	4665      	mov	r5, ip
 8001b9a:	431d      	orrs	r5, r3
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x1cc>
 8001b9e:	e19c      	b.n	8001eda <__aeabi_dsub+0x506>
 8001ba0:	1e55      	subs	r5, r2, #1
 8001ba2:	2a01      	cmp	r2, #1
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x1d4>
 8001ba6:	e1fb      	b.n	8001fa0 <__aeabi_dsub+0x5cc>
 8001ba8:	4c60      	ldr	r4, [pc, #384]	; (8001d2c <__aeabi_dsub+0x358>)
 8001baa:	42a2      	cmp	r2, r4
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x1dc>
 8001bae:	e1bd      	b.n	8001f2c <__aeabi_dsub+0x558>
 8001bb0:	002a      	movs	r2, r5
 8001bb2:	e0f0      	b.n	8001d96 <__aeabi_dsub+0x3c2>
 8001bb4:	0008      	movs	r0, r1
 8001bb6:	4338      	orrs	r0, r7
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x1e8>
 8001bba:	e0c3      	b.n	8001d44 <__aeabi_dsub+0x370>
 8001bbc:	1e50      	subs	r0, r2, #1
 8001bbe:	2a01      	cmp	r2, #1
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x1f0>
 8001bc2:	e1a8      	b.n	8001f16 <__aeabi_dsub+0x542>
 8001bc4:	4c59      	ldr	r4, [pc, #356]	; (8001d2c <__aeabi_dsub+0x358>)
 8001bc6:	42a2      	cmp	r2, r4
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x1f8>
 8001bca:	e087      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	e736      	b.n	8001a3e <__aeabi_dsub+0x6a>
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4056      	eors	r6, r2
 8001bd4:	46b3      	mov	fp, r6
 8001bd6:	42b5      	cmp	r5, r6
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x208>
 8001bda:	e721      	b.n	8001a20 <__aeabi_dsub+0x4c>
 8001bdc:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <__aeabi_dsub+0x360>)
 8001bde:	4442      	add	r2, r8
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x212>
 8001be4:	e0b5      	b.n	8001d52 <__aeabi_dsub+0x37e>
 8001be6:	4642      	mov	r2, r8
 8001be8:	4644      	mov	r4, r8
 8001bea:	1a82      	subs	r2, r0, r2
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x21e>
 8001bf0:	e138      	b.n	8001e64 <__aeabi_dsub+0x490>
 8001bf2:	4e4e      	ldr	r6, [pc, #312]	; (8001d2c <__aeabi_dsub+0x358>)
 8001bf4:	42b0      	cmp	r0, r6
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x226>
 8001bf8:	e1de      	b.n	8001fb8 <__aeabi_dsub+0x5e4>
 8001bfa:	2680      	movs	r6, #128	; 0x80
 8001bfc:	4664      	mov	r4, ip
 8001bfe:	0436      	lsls	r6, r6, #16
 8001c00:	4334      	orrs	r4, r6
 8001c02:	46a4      	mov	ip, r4
 8001c04:	2a38      	cmp	r2, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0x236>
 8001c08:	e196      	b.n	8001f38 <__aeabi_dsub+0x564>
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dd00      	ble.n	8001c10 <__aeabi_dsub+0x23c>
 8001c0e:	e224      	b.n	800205a <__aeabi_dsub+0x686>
 8001c10:	2620      	movs	r6, #32
 8001c12:	1ab4      	subs	r4, r6, r2
 8001c14:	46a2      	mov	sl, r4
 8001c16:	4664      	mov	r4, ip
 8001c18:	4656      	mov	r6, sl
 8001c1a:	40b4      	lsls	r4, r6
 8001c1c:	46a1      	mov	r9, r4
 8001c1e:	001c      	movs	r4, r3
 8001c20:	464e      	mov	r6, r9
 8001c22:	40d4      	lsrs	r4, r2
 8001c24:	4326      	orrs	r6, r4
 8001c26:	0034      	movs	r4, r6
 8001c28:	4656      	mov	r6, sl
 8001c2a:	40b3      	lsls	r3, r6
 8001c2c:	1e5e      	subs	r6, r3, #1
 8001c2e:	41b3      	sbcs	r3, r6
 8001c30:	431c      	orrs	r4, r3
 8001c32:	4663      	mov	r3, ip
 8001c34:	40d3      	lsrs	r3, r2
 8001c36:	18c9      	adds	r1, r1, r3
 8001c38:	19e4      	adds	r4, r4, r7
 8001c3a:	42bc      	cmp	r4, r7
 8001c3c:	41bf      	sbcs	r7, r7
 8001c3e:	427f      	negs	r7, r7
 8001c40:	46b9      	mov	r9, r7
 8001c42:	4680      	mov	r8, r0
 8001c44:	4489      	add	r9, r1
 8001c46:	e0d8      	b.n	8001dfa <__aeabi_dsub+0x426>
 8001c48:	4640      	mov	r0, r8
 8001c4a:	4c3b      	ldr	r4, [pc, #236]	; (8001d38 <__aeabi_dsub+0x364>)
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	4220      	tst	r0, r4
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x280>
 8001c52:	e0b4      	b.n	8001dbe <__aeabi_dsub+0x3ea>
 8001c54:	4640      	mov	r0, r8
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x288>
 8001c5a:	e144      	b.n	8001ee6 <__aeabi_dsub+0x512>
 8001c5c:	4660      	mov	r0, ip
 8001c5e:	4318      	orrs	r0, r3
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x290>
 8001c62:	e190      	b.n	8001f86 <__aeabi_dsub+0x5b2>
 8001c64:	0008      	movs	r0, r1
 8001c66:	4338      	orrs	r0, r7
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dsub+0x298>
 8001c6a:	e1aa      	b.n	8001fc2 <__aeabi_dsub+0x5ee>
 8001c6c:	4661      	mov	r1, ip
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	0749      	lsls	r1, r1, #29
 8001c72:	430b      	orrs	r3, r1
 8001c74:	4661      	mov	r1, ip
 8001c76:	08cc      	lsrs	r4, r1, #3
 8001c78:	e027      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001c7a:	0008      	movs	r0, r1
 8001c7c:	4338      	orrs	r0, r7
 8001c7e:	d061      	beq.n	8001d44 <__aeabi_dsub+0x370>
 8001c80:	1e50      	subs	r0, r2, #1
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x2b4>
 8001c86:	e139      	b.n	8001efc <__aeabi_dsub+0x528>
 8001c88:	42a2      	cmp	r2, r4
 8001c8a:	d027      	beq.n	8001cdc <__aeabi_dsub+0x308>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	e75d      	b.n	8001b4c <__aeabi_dsub+0x178>
 8001c90:	0002      	movs	r2, r0
 8001c92:	391f      	subs	r1, #31
 8001c94:	40ca      	lsrs	r2, r1
 8001c96:	0011      	movs	r1, r2
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d003      	beq.n	8001ca4 <__aeabi_dsub+0x2d0>
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4098      	lsls	r0, r3
 8001ca2:	4304      	orrs	r4, r0
 8001ca4:	1e63      	subs	r3, r4, #1
 8001ca6:	419c      	sbcs	r4, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4699      	mov	r9, r3
 8001cac:	4698      	mov	r8, r3
 8001cae:	430c      	orrs	r4, r1
 8001cb0:	0763      	lsls	r3, r4, #29
 8001cb2:	d000      	beq.n	8001cb6 <__aeabi_dsub+0x2e2>
 8001cb4:	e712      	b.n	8001adc <__aeabi_dsub+0x108>
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	464a      	mov	r2, r9
 8001cba:	08e4      	lsrs	r4, r4, #3
 8001cbc:	075b      	lsls	r3, r3, #29
 8001cbe:	4323      	orrs	r3, r4
 8001cc0:	08d4      	lsrs	r4, r2, #3
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4919      	ldr	r1, [pc, #100]	; (8001d2c <__aeabi_dsub+0x358>)
 8001cc6:	428a      	cmp	r2, r1
 8001cc8:	d00e      	beq.n	8001ce8 <__aeabi_dsub+0x314>
 8001cca:	0324      	lsls	r4, r4, #12
 8001ccc:	0552      	lsls	r2, r2, #21
 8001cce:	0b24      	lsrs	r4, r4, #12
 8001cd0:	0d52      	lsrs	r2, r2, #21
 8001cd2:	e722      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e71e      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	4662      	mov	r2, ip
 8001ce0:	0752      	lsls	r2, r2, #29
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	4662      	mov	r2, ip
 8001ce6:	08d4      	lsrs	r4, r2, #3
 8001ce8:	001a      	movs	r2, r3
 8001cea:	4322      	orrs	r2, r4
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x31c>
 8001cee:	e1fc      	b.n	80020ea <__aeabi_dsub+0x716>
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0312      	lsls	r2, r2, #12
 8001cf4:	4314      	orrs	r4, r2
 8001cf6:	0324      	lsls	r4, r4, #12
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <__aeabi_dsub+0x358>)
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	e70d      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f000 faa4 	bl	800224c <__clzsi2>
 8001d04:	0001      	movs	r1, r0
 8001d06:	3118      	adds	r1, #24
 8001d08:	291f      	cmp	r1, #31
 8001d0a:	dc00      	bgt.n	8001d0e <__aeabi_dsub+0x33a>
 8001d0c:	e6c4      	b.n	8001a98 <__aeabi_dsub+0xc4>
 8001d0e:	3808      	subs	r0, #8
 8001d10:	4084      	lsls	r4, r0
 8001d12:	4643      	mov	r3, r8
 8001d14:	0020      	movs	r0, r4
 8001d16:	2400      	movs	r4, #0
 8001d18:	4588      	cmp	r8, r1
 8001d1a:	dc00      	bgt.n	8001d1e <__aeabi_dsub+0x34a>
 8001d1c:	e6c8      	b.n	8001ab0 <__aeabi_dsub+0xdc>
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__aeabi_dsub+0x35c>)
 8001d20:	1a5b      	subs	r3, r3, r1
 8001d22:	4010      	ands	r0, r2
 8001d24:	4698      	mov	r8, r3
 8001d26:	4681      	mov	r9, r0
 8001d28:	e6d6      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	000007ff 	.word	0x000007ff
 8001d30:	ff7fffff 	.word	0xff7fffff
 8001d34:	fffff801 	.word	0xfffff801
 8001d38:	000007fe 	.word	0x000007fe
 8001d3c:	430f      	orrs	r7, r1
 8001d3e:	1e7a      	subs	r2, r7, #1
 8001d40:	4197      	sbcs	r7, r2
 8001d42:	e691      	b.n	8001a68 <__aeabi_dsub+0x94>
 8001d44:	4661      	mov	r1, ip
 8001d46:	08db      	lsrs	r3, r3, #3
 8001d48:	0749      	lsls	r1, r1, #29
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	4661      	mov	r1, ip
 8001d4e:	08cc      	lsrs	r4, r1, #3
 8001d50:	e7b8      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001d52:	4640      	mov	r0, r8
 8001d54:	4cd3      	ldr	r4, [pc, #844]	; (80020a4 <__aeabi_dsub+0x6d0>)
 8001d56:	3001      	adds	r0, #1
 8001d58:	4220      	tst	r0, r4
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x38a>
 8001d5c:	e0a2      	b.n	8001ea4 <__aeabi_dsub+0x4d0>
 8001d5e:	4640      	mov	r0, r8
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d000      	beq.n	8001d66 <__aeabi_dsub+0x392>
 8001d64:	e101      	b.n	8001f6a <__aeabi_dsub+0x596>
 8001d66:	4660      	mov	r0, ip
 8001d68:	4318      	orrs	r0, r3
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x39a>
 8001d6c:	e15e      	b.n	800202c <__aeabi_dsub+0x658>
 8001d6e:	0008      	movs	r0, r1
 8001d70:	4338      	orrs	r0, r7
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x3a2>
 8001d74:	e15f      	b.n	8002036 <__aeabi_dsub+0x662>
 8001d76:	4661      	mov	r1, ip
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	0749      	lsls	r1, r1, #29
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	4661      	mov	r1, ip
 8001d80:	08cc      	lsrs	r4, r1, #3
 8001d82:	e7a2      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001d84:	4dc8      	ldr	r5, [pc, #800]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001d86:	42a8      	cmp	r0, r5
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x3b8>
 8001d8a:	e0cf      	b.n	8001f2c <__aeabi_dsub+0x558>
 8001d8c:	2580      	movs	r5, #128	; 0x80
 8001d8e:	4664      	mov	r4, ip
 8001d90:	042d      	lsls	r5, r5, #16
 8001d92:	432c      	orrs	r4, r5
 8001d94:	46a4      	mov	ip, r4
 8001d96:	2a38      	cmp	r2, #56	; 0x38
 8001d98:	dc56      	bgt.n	8001e48 <__aeabi_dsub+0x474>
 8001d9a:	2a1f      	cmp	r2, #31
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_dsub+0x3cc>
 8001d9e:	e0d1      	b.n	8001f44 <__aeabi_dsub+0x570>
 8001da0:	2520      	movs	r5, #32
 8001da2:	001e      	movs	r6, r3
 8001da4:	1aad      	subs	r5, r5, r2
 8001da6:	4664      	mov	r4, ip
 8001da8:	40ab      	lsls	r3, r5
 8001daa:	40ac      	lsls	r4, r5
 8001dac:	40d6      	lsrs	r6, r2
 8001dae:	1e5d      	subs	r5, r3, #1
 8001db0:	41ab      	sbcs	r3, r5
 8001db2:	4334      	orrs	r4, r6
 8001db4:	4323      	orrs	r3, r4
 8001db6:	4664      	mov	r4, ip
 8001db8:	40d4      	lsrs	r4, r2
 8001dba:	1b09      	subs	r1, r1, r4
 8001dbc:	e049      	b.n	8001e52 <__aeabi_dsub+0x47e>
 8001dbe:	4660      	mov	r0, ip
 8001dc0:	1bdc      	subs	r4, r3, r7
 8001dc2:	1a46      	subs	r6, r0, r1
 8001dc4:	42a3      	cmp	r3, r4
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	4240      	negs	r0, r0
 8001dca:	4681      	mov	r9, r0
 8001dcc:	0030      	movs	r0, r6
 8001dce:	464e      	mov	r6, r9
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	4681      	mov	r9, r0
 8001dd4:	0200      	lsls	r0, r0, #8
 8001dd6:	d476      	bmi.n	8001ec6 <__aeabi_dsub+0x4f2>
 8001dd8:	464b      	mov	r3, r9
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x40c>
 8001dde:	e652      	b.n	8001a86 <__aeabi_dsub+0xb2>
 8001de0:	2400      	movs	r4, #0
 8001de2:	2500      	movs	r5, #0
 8001de4:	e771      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001de6:	4339      	orrs	r1, r7
 8001de8:	000c      	movs	r4, r1
 8001dea:	1e62      	subs	r2, r4, #1
 8001dec:	4194      	sbcs	r4, r2
 8001dee:	18e4      	adds	r4, r4, r3
 8001df0:	429c      	cmp	r4, r3
 8001df2:	419b      	sbcs	r3, r3
 8001df4:	425b      	negs	r3, r3
 8001df6:	4463      	add	r3, ip
 8001df8:	4699      	mov	r9, r3
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	d400      	bmi.n	8001e02 <__aeabi_dsub+0x42e>
 8001e00:	e756      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001e02:	2301      	movs	r3, #1
 8001e04:	469c      	mov	ip, r3
 8001e06:	4ba8      	ldr	r3, [pc, #672]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001e08:	44e0      	add	r8, ip
 8001e0a:	4598      	cmp	r8, r3
 8001e0c:	d038      	beq.n	8001e80 <__aeabi_dsub+0x4ac>
 8001e0e:	464b      	mov	r3, r9
 8001e10:	48a6      	ldr	r0, [pc, #664]	; (80020ac <__aeabi_dsub+0x6d8>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	4003      	ands	r3, r0
 8001e16:	0018      	movs	r0, r3
 8001e18:	0863      	lsrs	r3, r4, #1
 8001e1a:	4014      	ands	r4, r2
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	07c3      	lsls	r3, r0, #31
 8001e20:	431c      	orrs	r4, r3
 8001e22:	0843      	lsrs	r3, r0, #1
 8001e24:	4699      	mov	r9, r3
 8001e26:	e657      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001e28:	0010      	movs	r0, r2
 8001e2a:	000e      	movs	r6, r1
 8001e2c:	3820      	subs	r0, #32
 8001e2e:	40c6      	lsrs	r6, r0
 8001e30:	2a20      	cmp	r2, #32
 8001e32:	d004      	beq.n	8001e3e <__aeabi_dsub+0x46a>
 8001e34:	2040      	movs	r0, #64	; 0x40
 8001e36:	1a82      	subs	r2, r0, r2
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	430f      	orrs	r7, r1
 8001e3c:	46b9      	mov	r9, r7
 8001e3e:	464f      	mov	r7, r9
 8001e40:	1e7a      	subs	r2, r7, #1
 8001e42:	4197      	sbcs	r7, r2
 8001e44:	4337      	orrs	r7, r6
 8001e46:	e60f      	b.n	8001a68 <__aeabi_dsub+0x94>
 8001e48:	4662      	mov	r2, ip
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	4193      	sbcs	r3, r2
 8001e52:	1afc      	subs	r4, r7, r3
 8001e54:	42a7      	cmp	r7, r4
 8001e56:	41bf      	sbcs	r7, r7
 8001e58:	427f      	negs	r7, r7
 8001e5a:	1bcb      	subs	r3, r1, r7
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	465d      	mov	r5, fp
 8001e60:	4680      	mov	r8, r0
 8001e62:	e608      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001e64:	4666      	mov	r6, ip
 8001e66:	431e      	orrs	r6, r3
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x498>
 8001e6a:	e0be      	b.n	8001fea <__aeabi_dsub+0x616>
 8001e6c:	1e56      	subs	r6, r2, #1
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x4a0>
 8001e72:	e109      	b.n	8002088 <__aeabi_dsub+0x6b4>
 8001e74:	4c8c      	ldr	r4, [pc, #560]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x4a8>
 8001e7a:	e119      	b.n	80020b0 <__aeabi_dsub+0x6dc>
 8001e7c:	0032      	movs	r2, r6
 8001e7e:	e6c1      	b.n	8001c04 <__aeabi_dsub+0x230>
 8001e80:	4642      	mov	r2, r8
 8001e82:	2400      	movs	r4, #0
 8001e84:	2300      	movs	r3, #0
 8001e86:	e648      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001e88:	2020      	movs	r0, #32
 8001e8a:	000c      	movs	r4, r1
 8001e8c:	1a80      	subs	r0, r0, r2
 8001e8e:	003e      	movs	r6, r7
 8001e90:	4087      	lsls	r7, r0
 8001e92:	4084      	lsls	r4, r0
 8001e94:	40d6      	lsrs	r6, r2
 8001e96:	1e78      	subs	r0, r7, #1
 8001e98:	4187      	sbcs	r7, r0
 8001e9a:	40d1      	lsrs	r1, r2
 8001e9c:	4334      	orrs	r4, r6
 8001e9e:	433c      	orrs	r4, r7
 8001ea0:	448c      	add	ip, r1
 8001ea2:	e7a4      	b.n	8001dee <__aeabi_dsub+0x41a>
 8001ea4:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001ea6:	4290      	cmp	r0, r2
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x4d8>
 8001eaa:	e0e9      	b.n	8002080 <__aeabi_dsub+0x6ac>
 8001eac:	19df      	adds	r7, r3, r7
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	4461      	add	r1, ip
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	18c9      	adds	r1, r1, r3
 8001eb8:	07cc      	lsls	r4, r1, #31
 8001eba:	087f      	lsrs	r7, r7, #1
 8001ebc:	084b      	lsrs	r3, r1, #1
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	e6f4      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001ec6:	1afc      	subs	r4, r7, r3
 8001ec8:	42a7      	cmp	r7, r4
 8001eca:	41bf      	sbcs	r7, r7
 8001ecc:	4663      	mov	r3, ip
 8001ece:	427f      	negs	r7, r7
 8001ed0:	1ac9      	subs	r1, r1, r3
 8001ed2:	1bcb      	subs	r3, r1, r7
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	e5d5      	b.n	8001a86 <__aeabi_dsub+0xb2>
 8001eda:	08ff      	lsrs	r7, r7, #3
 8001edc:	074b      	lsls	r3, r1, #29
 8001ede:	465d      	mov	r5, fp
 8001ee0:	433b      	orrs	r3, r7
 8001ee2:	08cc      	lsrs	r4, r1, #3
 8001ee4:	e6ee      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x51a>
 8001eec:	e082      	b.n	8001ff4 <__aeabi_dsub+0x620>
 8001eee:	000b      	movs	r3, r1
 8001ef0:	433b      	orrs	r3, r7
 8001ef2:	d11b      	bne.n	8001f2c <__aeabi_dsub+0x558>
 8001ef4:	2480      	movs	r4, #128	; 0x80
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	0324      	lsls	r4, r4, #12
 8001efa:	e6f9      	b.n	8001cf0 <__aeabi_dsub+0x31c>
 8001efc:	19dc      	adds	r4, r3, r7
 8001efe:	429c      	cmp	r4, r3
 8001f00:	419b      	sbcs	r3, r3
 8001f02:	4461      	add	r1, ip
 8001f04:	4689      	mov	r9, r1
 8001f06:	425b      	negs	r3, r3
 8001f08:	4499      	add	r9, r3
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	d444      	bmi.n	8001f9a <__aeabi_dsub+0x5c6>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4698      	mov	r8, r3
 8001f14:	e6cc      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001f16:	1bdc      	subs	r4, r3, r7
 8001f18:	4662      	mov	r2, ip
 8001f1a:	42a3      	cmp	r3, r4
 8001f1c:	419b      	sbcs	r3, r3
 8001f1e:	1a51      	subs	r1, r2, r1
 8001f20:	425b      	negs	r3, r3
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	4699      	mov	r9, r3
 8001f26:	2301      	movs	r3, #1
 8001f28:	4698      	mov	r8, r3
 8001f2a:	e5a4      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001f2c:	08ff      	lsrs	r7, r7, #3
 8001f2e:	074b      	lsls	r3, r1, #29
 8001f30:	465d      	mov	r5, fp
 8001f32:	433b      	orrs	r3, r7
 8001f34:	08cc      	lsrs	r4, r1, #3
 8001f36:	e6d7      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001f38:	4662      	mov	r2, ip
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	0014      	movs	r4, r2
 8001f3e:	1e63      	subs	r3, r4, #1
 8001f40:	419c      	sbcs	r4, r3
 8001f42:	e679      	b.n	8001c38 <__aeabi_dsub+0x264>
 8001f44:	0015      	movs	r5, r2
 8001f46:	4664      	mov	r4, ip
 8001f48:	3d20      	subs	r5, #32
 8001f4a:	40ec      	lsrs	r4, r5
 8001f4c:	46a0      	mov	r8, r4
 8001f4e:	2a20      	cmp	r2, #32
 8001f50:	d005      	beq.n	8001f5e <__aeabi_dsub+0x58a>
 8001f52:	2540      	movs	r5, #64	; 0x40
 8001f54:	4664      	mov	r4, ip
 8001f56:	1aaa      	subs	r2, r5, r2
 8001f58:	4094      	lsls	r4, r2
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	469a      	mov	sl, r3
 8001f5e:	4654      	mov	r4, sl
 8001f60:	1e63      	subs	r3, r4, #1
 8001f62:	419c      	sbcs	r4, r3
 8001f64:	4643      	mov	r3, r8
 8001f66:	4323      	orrs	r3, r4
 8001f68:	e773      	b.n	8001e52 <__aeabi_dsub+0x47e>
 8001f6a:	4662      	mov	r2, ip
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	d023      	beq.n	8001fb8 <__aeabi_dsub+0x5e4>
 8001f70:	000a      	movs	r2, r1
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x5a4>
 8001f76:	e0a0      	b.n	80020ba <__aeabi_dsub+0x6e6>
 8001f78:	4662      	mov	r2, ip
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0752      	lsls	r2, r2, #29
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	4662      	mov	r2, ip
 8001f82:	08d4      	lsrs	r4, r2, #3
 8001f84:	e6b0      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001f86:	000b      	movs	r3, r1
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x5ba>
 8001f8c:	e728      	b.n	8001de0 <__aeabi_dsub+0x40c>
 8001f8e:	08ff      	lsrs	r7, r7, #3
 8001f90:	074b      	lsls	r3, r1, #29
 8001f92:	465d      	mov	r5, fp
 8001f94:	433b      	orrs	r3, r7
 8001f96:	08cc      	lsrs	r4, r1, #3
 8001f98:	e697      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	e736      	b.n	8001e0e <__aeabi_dsub+0x43a>
 8001fa0:	1afc      	subs	r4, r7, r3
 8001fa2:	42a7      	cmp	r7, r4
 8001fa4:	41bf      	sbcs	r7, r7
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	427f      	negs	r7, r7
 8001faa:	1ac9      	subs	r1, r1, r3
 8001fac:	1bcb      	subs	r3, r1, r7
 8001fae:	4699      	mov	r9, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	e55e      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	08ff      	lsrs	r7, r7, #3
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e692      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001fc2:	1bdc      	subs	r4, r3, r7
 8001fc4:	4660      	mov	r0, ip
 8001fc6:	42a3      	cmp	r3, r4
 8001fc8:	41b6      	sbcs	r6, r6
 8001fca:	1a40      	subs	r0, r0, r1
 8001fcc:	4276      	negs	r6, r6
 8001fce:	1b80      	subs	r0, r0, r6
 8001fd0:	4681      	mov	r9, r0
 8001fd2:	0200      	lsls	r0, r0, #8
 8001fd4:	d560      	bpl.n	8002098 <__aeabi_dsub+0x6c4>
 8001fd6:	1afc      	subs	r4, r7, r3
 8001fd8:	42a7      	cmp	r7, r4
 8001fda:	41bf      	sbcs	r7, r7
 8001fdc:	4663      	mov	r3, ip
 8001fde:	427f      	negs	r7, r7
 8001fe0:	1ac9      	subs	r1, r1, r3
 8001fe2:	1bcb      	subs	r3, r1, r7
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	465d      	mov	r5, fp
 8001fe8:	e576      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	433b      	orrs	r3, r7
 8001ff0:	08cc      	lsrs	r4, r1, #3
 8001ff2:	e667      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	433a      	orrs	r2, r7
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x62a>
 8001ffc:	e66f      	b.n	8001cde <__aeabi_dsub+0x30a>
 8001ffe:	4662      	mov	r2, ip
 8002000:	0752      	lsls	r2, r2, #29
 8002002:	4313      	orrs	r3, r2
 8002004:	4662      	mov	r2, ip
 8002006:	08d4      	lsrs	r4, r2, #3
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	4214      	tst	r4, r2
 800200e:	d007      	beq.n	8002020 <__aeabi_dsub+0x64c>
 8002010:	08c8      	lsrs	r0, r1, #3
 8002012:	4210      	tst	r0, r2
 8002014:	d104      	bne.n	8002020 <__aeabi_dsub+0x64c>
 8002016:	465d      	mov	r5, fp
 8002018:	0004      	movs	r4, r0
 800201a:	08fb      	lsrs	r3, r7, #3
 800201c:	0749      	lsls	r1, r1, #29
 800201e:	430b      	orrs	r3, r1
 8002020:	0f5a      	lsrs	r2, r3, #29
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	08db      	lsrs	r3, r3, #3
 8002026:	0752      	lsls	r2, r2, #29
 8002028:	4313      	orrs	r3, r2
 800202a:	e65d      	b.n	8001ce8 <__aeabi_dsub+0x314>
 800202c:	074b      	lsls	r3, r1, #29
 800202e:	08ff      	lsrs	r7, r7, #3
 8002030:	433b      	orrs	r3, r7
 8002032:	08cc      	lsrs	r4, r1, #3
 8002034:	e649      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8002036:	19dc      	adds	r4, r3, r7
 8002038:	429c      	cmp	r4, r3
 800203a:	419b      	sbcs	r3, r3
 800203c:	4461      	add	r1, ip
 800203e:	4689      	mov	r9, r1
 8002040:	425b      	negs	r3, r3
 8002042:	4499      	add	r9, r3
 8002044:	464b      	mov	r3, r9
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	d400      	bmi.n	800204c <__aeabi_dsub+0x678>
 800204a:	e631      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 800204c:	464a      	mov	r2, r9
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <__aeabi_dsub+0x6d8>)
 8002050:	401a      	ands	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	4691      	mov	r9, r2
 8002056:	4698      	mov	r8, r3
 8002058:	e62a      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 800205a:	0016      	movs	r6, r2
 800205c:	4664      	mov	r4, ip
 800205e:	3e20      	subs	r6, #32
 8002060:	40f4      	lsrs	r4, r6
 8002062:	46a0      	mov	r8, r4
 8002064:	2a20      	cmp	r2, #32
 8002066:	d005      	beq.n	8002074 <__aeabi_dsub+0x6a0>
 8002068:	2640      	movs	r6, #64	; 0x40
 800206a:	4664      	mov	r4, ip
 800206c:	1ab2      	subs	r2, r6, r2
 800206e:	4094      	lsls	r4, r2
 8002070:	4323      	orrs	r3, r4
 8002072:	469a      	mov	sl, r3
 8002074:	4654      	mov	r4, sl
 8002076:	1e63      	subs	r3, r4, #1
 8002078:	419c      	sbcs	r4, r3
 800207a:	4643      	mov	r3, r8
 800207c:	431c      	orrs	r4, r3
 800207e:	e5db      	b.n	8001c38 <__aeabi_dsub+0x264>
 8002080:	0002      	movs	r2, r0
 8002082:	2400      	movs	r4, #0
 8002084:	2300      	movs	r3, #0
 8002086:	e548      	b.n	8001b1a <__aeabi_dsub+0x146>
 8002088:	19dc      	adds	r4, r3, r7
 800208a:	42bc      	cmp	r4, r7
 800208c:	41bf      	sbcs	r7, r7
 800208e:	4461      	add	r1, ip
 8002090:	4689      	mov	r9, r1
 8002092:	427f      	negs	r7, r7
 8002094:	44b9      	add	r9, r7
 8002096:	e738      	b.n	8001f0a <__aeabi_dsub+0x536>
 8002098:	464b      	mov	r3, r9
 800209a:	4323      	orrs	r3, r4
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x6cc>
 800209e:	e69f      	b.n	8001de0 <__aeabi_dsub+0x40c>
 80020a0:	e606      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000007fe 	.word	0x000007fe
 80020a8:	000007ff 	.word	0x000007ff
 80020ac:	ff7fffff 	.word	0xff7fffff
 80020b0:	08ff      	lsrs	r7, r7, #3
 80020b2:	074b      	lsls	r3, r1, #29
 80020b4:	433b      	orrs	r3, r7
 80020b6:	08cc      	lsrs	r4, r1, #3
 80020b8:	e616      	b.n	8001ce8 <__aeabi_dsub+0x314>
 80020ba:	4662      	mov	r2, ip
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	4313      	orrs	r3, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	08d4      	lsrs	r4, r2, #3
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	0312      	lsls	r2, r2, #12
 80020ca:	4214      	tst	r4, r2
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x70a>
 80020ce:	08c8      	lsrs	r0, r1, #3
 80020d0:	4210      	tst	r0, r2
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x70a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0004      	movs	r4, r0
 80020d8:	08fb      	lsrs	r3, r7, #3
 80020da:	0749      	lsls	r1, r1, #29
 80020dc:	430b      	orrs	r3, r1
 80020de:	0f5a      	lsrs	r2, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0752      	lsls	r2, r2, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	e5fe      	b.n	8001ce8 <__aeabi_dsub+0x314>
 80020ea:	2300      	movs	r3, #0
 80020ec:	4a01      	ldr	r2, [pc, #4]	; (80020f4 <__aeabi_dsub+0x720>)
 80020ee:	001c      	movs	r4, r3
 80020f0:	e513      	b.n	8001b1a <__aeabi_dsub+0x146>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_dcmpun>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	0005      	movs	r5, r0
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <__aeabi_dcmpun+0x38>)
 80020fe:	031c      	lsls	r4, r3, #12
 8002100:	0016      	movs	r6, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	030a      	lsls	r2, r1, #12
 8002106:	0049      	lsls	r1, r1, #1
 8002108:	0b12      	lsrs	r2, r2, #12
 800210a:	0d49      	lsrs	r1, r1, #21
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	0d5b      	lsrs	r3, r3, #21
 8002110:	4281      	cmp	r1, r0
 8002112:	d008      	beq.n	8002126 <__aeabi_dcmpun+0x2e>
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <__aeabi_dcmpun+0x38>)
 8002116:	2000      	movs	r0, #0
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <__aeabi_dcmpun+0x2c>
 800211c:	0020      	movs	r0, r4
 800211e:	4330      	orrs	r0, r6
 8002120:	1e43      	subs	r3, r0, #1
 8002122:	4198      	sbcs	r0, r3
 8002124:	bd70      	pop	{r4, r5, r6, pc}
 8002126:	2001      	movs	r0, #1
 8002128:	432a      	orrs	r2, r5
 800212a:	d1fb      	bne.n	8002124 <__aeabi_dcmpun+0x2c>
 800212c:	e7f2      	b.n	8002114 <__aeabi_dcmpun+0x1c>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff

08002134 <__aeabi_d2iz>:
 8002134:	000a      	movs	r2, r1
 8002136:	b530      	push	{r4, r5, lr}
 8002138:	4c13      	ldr	r4, [pc, #76]	; (8002188 <__aeabi_d2iz+0x54>)
 800213a:	0053      	lsls	r3, r2, #1
 800213c:	0309      	lsls	r1, r1, #12
 800213e:	0005      	movs	r5, r0
 8002140:	0b09      	lsrs	r1, r1, #12
 8002142:	2000      	movs	r0, #0
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	0fd2      	lsrs	r2, r2, #31
 8002148:	42a3      	cmp	r3, r4
 800214a:	dd04      	ble.n	8002156 <__aeabi_d2iz+0x22>
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <__aeabi_d2iz+0x58>)
 800214e:	4283      	cmp	r3, r0
 8002150:	dd02      	ble.n	8002158 <__aeabi_d2iz+0x24>
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <__aeabi_d2iz+0x5c>)
 8002154:	18d0      	adds	r0, r2, r3
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	0340      	lsls	r0, r0, #13
 800215c:	4301      	orrs	r1, r0
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <__aeabi_d2iz+0x60>)
 8002160:	1ac0      	subs	r0, r0, r3
 8002162:	281f      	cmp	r0, #31
 8002164:	dd08      	ble.n	8002178 <__aeabi_d2iz+0x44>
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <__aeabi_d2iz+0x64>)
 8002168:	1ac3      	subs	r3, r0, r3
 800216a:	40d9      	lsrs	r1, r3
 800216c:	000b      	movs	r3, r1
 800216e:	4258      	negs	r0, r3
 8002170:	2a00      	cmp	r2, #0
 8002172:	d1f0      	bne.n	8002156 <__aeabi_d2iz+0x22>
 8002174:	0018      	movs	r0, r3
 8002176:	e7ee      	b.n	8002156 <__aeabi_d2iz+0x22>
 8002178:	4c08      	ldr	r4, [pc, #32]	; (800219c <__aeabi_d2iz+0x68>)
 800217a:	40c5      	lsrs	r5, r0
 800217c:	46a4      	mov	ip, r4
 800217e:	4463      	add	r3, ip
 8002180:	4099      	lsls	r1, r3
 8002182:	000b      	movs	r3, r1
 8002184:	432b      	orrs	r3, r5
 8002186:	e7f2      	b.n	800216e <__aeabi_d2iz+0x3a>
 8002188:	000003fe 	.word	0x000003fe
 800218c:	0000041d 	.word	0x0000041d
 8002190:	7fffffff 	.word	0x7fffffff
 8002194:	00000433 	.word	0x00000433
 8002198:	00000413 	.word	0x00000413
 800219c:	fffffbed 	.word	0xfffffbed

080021a0 <__aeabi_i2d>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d016      	beq.n	80021d4 <__aeabi_i2d+0x34>
 80021a6:	17c3      	asrs	r3, r0, #31
 80021a8:	18c5      	adds	r5, r0, r3
 80021aa:	405d      	eors	r5, r3
 80021ac:	0fc4      	lsrs	r4, r0, #31
 80021ae:	0028      	movs	r0, r5
 80021b0:	f000 f84c 	bl	800224c <__clzsi2>
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <__aeabi_i2d+0x5c>)
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	280a      	cmp	r0, #10
 80021ba:	dc16      	bgt.n	80021ea <__aeabi_i2d+0x4a>
 80021bc:	0003      	movs	r3, r0
 80021be:	002e      	movs	r6, r5
 80021c0:	3315      	adds	r3, #21
 80021c2:	409e      	lsls	r6, r3
 80021c4:	230b      	movs	r3, #11
 80021c6:	1a18      	subs	r0, r3, r0
 80021c8:	40c5      	lsrs	r5, r0
 80021ca:	0552      	lsls	r2, r2, #21
 80021cc:	032d      	lsls	r5, r5, #12
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	0d53      	lsrs	r3, r2, #21
 80021d2:	e003      	b.n	80021dc <__aeabi_i2d+0x3c>
 80021d4:	2400      	movs	r4, #0
 80021d6:	2300      	movs	r3, #0
 80021d8:	2500      	movs	r5, #0
 80021da:	2600      	movs	r6, #0
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	432b      	orrs	r3, r5
 80021e0:	07e4      	lsls	r4, r4, #31
 80021e2:	4323      	orrs	r3, r4
 80021e4:	0030      	movs	r0, r6
 80021e6:	0019      	movs	r1, r3
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	380b      	subs	r0, #11
 80021ec:	4085      	lsls	r5, r0
 80021ee:	0552      	lsls	r2, r2, #21
 80021f0:	032d      	lsls	r5, r5, #12
 80021f2:	2600      	movs	r6, #0
 80021f4:	0b2d      	lsrs	r5, r5, #12
 80021f6:	0d53      	lsrs	r3, r2, #21
 80021f8:	e7f0      	b.n	80021dc <__aeabi_i2d+0x3c>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	0000041e 	.word	0x0000041e

08002200 <__aeabi_ui2d>:
 8002200:	b510      	push	{r4, lr}
 8002202:	1e04      	subs	r4, r0, #0
 8002204:	d010      	beq.n	8002228 <__aeabi_ui2d+0x28>
 8002206:	f000 f821 	bl	800224c <__clzsi2>
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <__aeabi_ui2d+0x48>)
 800220c:	1a1b      	subs	r3, r3, r0
 800220e:	280a      	cmp	r0, #10
 8002210:	dc11      	bgt.n	8002236 <__aeabi_ui2d+0x36>
 8002212:	220b      	movs	r2, #11
 8002214:	0021      	movs	r1, r4
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	40d1      	lsrs	r1, r2
 800221a:	3015      	adds	r0, #21
 800221c:	030a      	lsls	r2, r1, #12
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	4084      	lsls	r4, r0
 8002222:	0b12      	lsrs	r2, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e001      	b.n	800222c <__aeabi_ui2d+0x2c>
 8002228:	2300      	movs	r3, #0
 800222a:	2200      	movs	r2, #0
 800222c:	051b      	lsls	r3, r3, #20
 800222e:	4313      	orrs	r3, r2
 8002230:	0020      	movs	r0, r4
 8002232:	0019      	movs	r1, r3
 8002234:	bd10      	pop	{r4, pc}
 8002236:	0022      	movs	r2, r4
 8002238:	380b      	subs	r0, #11
 800223a:	4082      	lsls	r2, r0
 800223c:	055b      	lsls	r3, r3, #21
 800223e:	0312      	lsls	r2, r2, #12
 8002240:	2400      	movs	r4, #0
 8002242:	0b12      	lsrs	r2, r2, #12
 8002244:	0d5b      	lsrs	r3, r3, #21
 8002246:	e7f1      	b.n	800222c <__aeabi_ui2d+0x2c>
 8002248:	0000041e 	.word	0x0000041e

0800224c <__clzsi2>:
 800224c:	211c      	movs	r1, #28
 800224e:	2301      	movs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0xe>
 8002256:	0c00      	lsrs	r0, r0, #16
 8002258:	3910      	subs	r1, #16
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	4298      	cmp	r0, r3
 800225e:	d301      	bcc.n	8002264 <__clzsi2+0x18>
 8002260:	0a00      	lsrs	r0, r0, #8
 8002262:	3908      	subs	r1, #8
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	4298      	cmp	r0, r3
 8002268:	d301      	bcc.n	800226e <__clzsi2+0x22>
 800226a:	0900      	lsrs	r0, r0, #4
 800226c:	3904      	subs	r1, #4
 800226e:	a202      	add	r2, pc, #8	; (adr r2, 8002278 <__clzsi2+0x2c>)
 8002270:	5c10      	ldrb	r0, [r2, r0]
 8002272:	1840      	adds	r0, r0, r1
 8002274:	4770      	bx	lr
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	02020304 	.word	0x02020304
 800227c:	01010101 	.word	0x01010101
	...

08002288 <__clzdi2>:
 8002288:	b510      	push	{r4, lr}
 800228a:	2900      	cmp	r1, #0
 800228c:	d103      	bne.n	8002296 <__clzdi2+0xe>
 800228e:	f7ff ffdd 	bl	800224c <__clzsi2>
 8002292:	3020      	adds	r0, #32
 8002294:	e002      	b.n	800229c <__clzdi2+0x14>
 8002296:	0008      	movs	r0, r1
 8002298:	f7ff ffd8 	bl	800224c <__clzsi2>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			; (mov r8, r8)

080022a0 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e00d      	b.n	80022ca <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d001      	beq.n	80022ba <crc32_for_byte+0x1a>
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <crc32_for_byte+0x1c>
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <crc32_for_byte+0x40>)
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	0852      	lsrs	r2, r2, #1
 80022c0:	4053      	eors	r3, r2
 80022c2:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b07      	cmp	r3, #7
 80022ce:	ddee      	ble.n	80022ae <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	0612      	lsls	r2, r2, #24
 80022d6:	4053      	eors	r3, r2
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	edb88320 	.word	0xedb88320

080022e4 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <crc32+0x78>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d111      	bne.n	800231e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e00b      	b.n	8002318 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff ffcc 	bl	80022a0 <crc32_for_byte>
 8002308:	0001      	movs	r1, r0
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <crc32+0x78>)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	3301      	adds	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d9f0      	bls.n	8002300 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e012      	b.n	800234a <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	18cb      	adds	r3, r1, r3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4053      	eors	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	001a      	movs	r2, r3
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <crc32+0x78>)
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	58d2      	ldr	r2, [r2, r3]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	4053      	eors	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3e8      	bcc.n	8002324 <crc32+0x40>

  return crc;
 8002352:	697b      	ldr	r3, [r7, #20]
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000684 	.word	0x20000684

08002360 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

    switch (slot)
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d002      	beq.n	800237e <image_get_header+0x1e>
 8002378:	2b02      	cmp	r3, #2
 800237a:	d003      	beq.n	8002384 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 800237c:	e005      	b.n	800238a <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <image_get_header+0x54>)
 8002380:	60fb      	str	r3, [r7, #12]
        break;
 8002382:	e002      	b.n	800238a <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <image_get_header+0x58>)
 8002386:	60fb      	str	r3, [r7, #12]
        break;
 8002388:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <image_get_header+0x48>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4313      	orrs	r3, r2
 800239a:	b29a      	uxth	r2, r3
 800239c:	23e7      	movs	r3, #231	; 0xe7
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d101      	bne.n	80023a8 <image_get_header+0x48>
    {
        return hdr;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	e000      	b.n	80023aa <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 80023a8:	2300      	movs	r3, #0
    }
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	08011800 	.word	0x08011800
 80023b8:	0800c800 	.word	0x0800c800

080023bc <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	0002      	movs	r2, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

    switch (slot)
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d002      	beq.n	80023dc <image_validate+0x20>
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d003      	beq.n	80023e2 <image_validate+0x26>
 80023da:	e005      	b.n	80023e8 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <image_validate+0xa0>)
 80023de:	617b      	str	r3, [r7, #20]
        break;
 80023e0:	e007      	b.n	80023f2 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <image_validate+0xa4>)
 80023e4:	617b      	str	r3, [r7, #20]
        break;
 80023e6:	e004      	b.n	80023f2 <image_validate+0x36>
    default:
        addr = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
        return -1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	425b      	negs	r3, r3
 80023f0:	e030      	b.n	8002454 <image_validate+0x98>
    }

    addr += sizeof(image_hdr_t);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3320      	adds	r3, #32
 80023f6:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7a1a      	ldrb	r2, [r3, #8]
 80023fc:	7a59      	ldrb	r1, [r3, #9]
 80023fe:	0209      	lsls	r1, r1, #8
 8002400:	430a      	orrs	r2, r1
 8002402:	7a99      	ldrb	r1, [r3, #10]
 8002404:	0409      	lsls	r1, r1, #16
 8002406:	430a      	orrs	r2, r1
 8002408:	7adb      	ldrb	r3, [r3, #11]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	0011      	movs	r1, r2
 8002416:	0018      	movs	r0, r3
 8002418:	f7ff ff64 	bl	80022e4 <crc32>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	791a      	ldrb	r2, [r3, #4]
 8002424:	7959      	ldrb	r1, [r3, #5]
 8002426:	0209      	lsls	r1, r1, #8
 8002428:	430a      	orrs	r2, r1
 800242a:	7999      	ldrb	r1, [r3, #6]
 800242c:	0409      	lsls	r1, r1, #16
 800242e:	430a      	orrs	r2, r1
 8002430:	79db      	ldrb	r3, [r3, #7]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d101      	bne.n	8002444 <image_validate+0x88>
        return 0;
 8002440:	2300      	movs	r3, #0
 8002442:	e007      	b.n	8002454 <image_validate+0x98>
    }
    else {
        printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <image_validate+0xa8>)
 800244a:	0018      	movs	r0, r3
 800244c:	f006 fa9e 	bl	800898c <iprintf>
        return -1;
 8002450:	2301      	movs	r3, #1
 8002452:	425b      	negs	r3, r3
    }

}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b006      	add	sp, #24
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08011800 	.word	0x08011800
 8002460:	0800c800 	.word	0x0800c800
 8002464:	0800af40 	.word	0x0800af40

08002468 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	000a      	movs	r2, r1
 8002472:	1cbb      	adds	r3, r7, #2
 8002474:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_buff, sizeof rx_buff);
 8002476:	2382      	movs	r3, #130	; 0x82
 8002478:	009a      	lsls	r2, r3, #2
 800247a:	4906      	ldr	r1, [pc, #24]	; (8002494 <HAL_UARTEx_RxEventCallback+0x2c>)
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_UARTEx_RxEventCallback+0x30>)
 800247e:	0018      	movs	r0, r3
 8002480:	f005 fd14 	bl	8007eac <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  dato_recivido = true;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_UARTEx_RxEventCallback+0x34>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	20000c18 	.word	0x20000c18
 8002498:	20000b64 	.word	0x20000b64
 800249c:	20000c08 	.word	0x20000c08

080024a0 <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	0008      	movs	r0, r1
 80024aa:	0011      	movs	r1, r2
 80024ac:	1cbb      	adds	r3, r7, #2
 80024ae:	1c02      	adds	r2, r0, #0
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	003b      	movs	r3, r7
 80024b4:	1c0a      	adds	r2, r1, #0
 80024b6:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 80024bc:	003b      	movs	r3, r7
 80024be:	003a      	movs	r2, r7
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	43d2      	mvns	r2, r2
 80024c4:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 80024c6:	e012      	b.n	80024ee <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 80024c8:	003b      	movs	r3, r7
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1c59      	adds	r1, r3, #1
 80024d0:	60f9      	str	r1, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4053      	eors	r3, r2
 80024d6:	22ff      	movs	r2, #255	; 0xff
 80024d8:	401a      	ands	r2, r3
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <CRC16_X25+0x6c>)
 80024dc:	0052      	lsls	r2, r2, #1
 80024de:	5ad1      	ldrh	r1, [r2, r3]
 80024e0:	003b      	movs	r3, r7
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	003b      	movs	r3, r7
 80024ea:	404a      	eors	r2, r1
 80024ec:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 80024ee:	1cbb      	adds	r3, r7, #2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	1cba      	adds	r2, r7, #2
 80024f4:	1e59      	subs	r1, r3, #1
 80024f6:	8011      	strh	r1, [r2, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e5      	bne.n	80024c8 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 80024fc:	003b      	movs	r3, r7
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	43db      	mvns	r3, r3
 8002502:	b29b      	uxth	r3, r3
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	0800b2e0 	.word	0x0800b2e0

08002510 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	0002      	movs	r2, r0
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	801a      	strh	r2, [r3, #0]
	  if(GPIO_Pin == RST_Pin)
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	2b20      	cmp	r3, #32
 8002522:	d101      	bne.n	8002528 <HAL_GPIO_EXTI_Falling_Callback+0x18>
	  {
			HAL_NVIC_SystemReset(); //resetea el uC
 8002524:	f001 fb89 	bl	8003c3a <HAL_NVIC_SystemReset>
	  }// End LTC interrup
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3340      	adds	r3, #64	; 0x40
 800253e:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 8002540:	2316      	movs	r3, #22
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2200      	movs	r2, #0
 8002546:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8002548:	f001 fc9e 	bl	8003e88 <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e023      	b.n	800259a <write+0x6a>
	{
	  _index = 8*i;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	4915      	ldr	r1, [pc, #84]	; (80025b0 <write+0x80>)
 800255a:	2201      	movs	r2, #1
 800255c:	4252      	negs	r2, r2
 800255e:	17d3      	asrs	r3, r2, #31
 8002560:	600a      	str	r2, [r1, #0]
 8002562:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 8002564:	2416      	movs	r4, #22
 8002566:	193b      	adds	r3, r7, r4
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	18d1      	adds	r1, r2, r3
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <write+0x80>)
 8002570:	2208      	movs	r2, #8
 8002572:	0018      	movs	r0, r3
 8002574:	f005 fd8a 	bl	800808c <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <write+0x84>)
 800257c:	1899      	adds	r1, r3, r2
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <write+0x80>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2001      	movs	r0, #1
 8002586:	f001 fc31 	bl	8003dec <HAL_FLASH_Program>
	  k+=8;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	193a      	adds	r2, r7, r4
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	3208      	adds	r2, #8
 8002592:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	3301      	adds	r3, #1
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3d7      	bcc.n	8002552 <write+0x22>
	}
	HAL_FLASH_Lock();
 80025a2:	f001 fc95 	bl	8003ed0 <HAL_FLASH_Lock>
	return end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b007      	add	sp, #28
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	20000c00 	.word	0x20000c00
 80025b4:	0800c800 	.word	0x0800c800

080025b8 <clone_rom>:
	  		  printf("%02X",*(ptr++));
	  	  printf("|\r\r\n");
}

uint32_t clone_rom(uint32_t Firmware_zise)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2207      	movs	r2, #7
 80025ca:	4013      	ands	r3, r2
 80025cc:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
	HAL_FLASH_Unlock();
 80025d2:	f001 fc59 	bl	8003e88 <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e02e      	b.n	800263a <clone_rom+0x82>
    {
  	  _index = 8*i;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	617b      	str	r3, [r7, #20]
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <clone_rom+0x118>)
 80025e6:	4694      	mov	ip, r2
 80025e8:	4463      	add	r3, ip
 80025ea:	001a      	movs	r2, r3
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <clone_rom+0x11c>)
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	4939      	ldr	r1, [pc, #228]	; (80026d8 <clone_rom+0x120>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	4252      	negs	r2, r2
 80025f6:	17d3      	asrs	r3, r2, #31
 80025f8:	600a      	str	r2, [r1, #0]
 80025fa:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <clone_rom+0x11c>)
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <clone_rom+0x120>)
 8002602:	2208      	movs	r2, #8
 8002604:	0018      	movs	r0, r3
 8002606:	f005 fd41 	bl	800808c <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a33      	ldr	r2, [pc, #204]	; (80026dc <clone_rom+0x124>)
 800260e:	1899      	adds	r1, r3, r2
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <clone_rom+0x120>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2001      	movs	r0, #1
 8002618:	f001 fbe8 	bl	8003dec <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <clone_rom+0x11c>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <clone_rom+0x128>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	001a      	movs	r2, r3
 8002626:	2108      	movs	r1, #8
 8002628:	f7ff ff3a 	bl	80024a0 <CRC16_X25>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <clone_rom+0x128>)
 8002632:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3301      	adds	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3b01      	subs	r3, #1
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d9cb      	bls.n	80025dc <clone_rom+0x24>
	  //printf(" \r crc parts_app_rom: %04X \n",crc_temp);
	  //print_double_word(__loader_rom_start__+_index,&double_word);
    }
    if(offset!=0)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d031      	beq.n	80026ae <clone_rom+0xf6>
 800264a:	4923      	ldr	r1, [pc, #140]	; (80026d8 <clone_rom+0x120>)
 800264c:	2201      	movs	r2, #1
 800264e:	4252      	negs	r2, r2
 8002650:	17d3      	asrs	r3, r2, #31
 8002652:	600a      	str	r2, [r1, #0]
 8002654:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3308      	adds	r3, #8
 800265a:	617b      	str	r3, [r7, #20]
		RDAddr = (uint64_t *)(loader_rom + _index);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <clone_rom+0x118>)
 8002660:	4694      	mov	ip, r2
 8002662:	4463      	add	r3, ip
 8002664:	001a      	movs	r2, r3
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <clone_rom+0x11c>)
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	491b      	ldr	r1, [pc, #108]	; (80026d8 <clone_rom+0x120>)
 800266c:	2201      	movs	r2, #1
 800266e:	4252      	negs	r2, r2
 8002670:	17d3      	asrs	r3, r2, #31
 8002672:	600a      	str	r2, [r1, #0]
 8002674:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <clone_rom+0x11c>)
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <clone_rom+0x120>)
 800267e:	0018      	movs	r0, r3
 8002680:	f005 fd04 	bl	800808c <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <clone_rom+0x124>)
 8002688:	1899      	adds	r1, r3, r2
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <clone_rom+0x120>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2001      	movs	r0, #1
 8002692:	f001 fbab 	bl	8003dec <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	b299      	uxth	r1, r3
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <clone_rom+0x128>)
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <clone_rom+0x120>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff fefd 	bl	80024a0 <CRC16_X25>
 80026a6:	0003      	movs	r3, r0
 80026a8:	001a      	movs	r2, r3
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <clone_rom+0x128>)
 80026ac:	801a      	strh	r2, [r3, #0]
		//printf(" \r crc parts_app_rom: %04X \n",crc_temp);
		//print_double_word(__loader_rom_start__+_index,&double_word);
    }
    HAL_FLASH_Lock();
 80026ae:	f001 fc0f 	bl	8003ed0 <HAL_FLASH_Lock>

    if(crc_temp == CRC_16)
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <clone_rom+0x128>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	001a      	movs	r2, r3
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <clone_rom+0x12c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d101      	bne.n	80026c4 <clone_rom+0x10c>
   		return 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <clone_rom+0x10e>
    else
    	return 1;
 80026c4:	2301      	movs	r3, #1

}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b006      	add	sp, #24
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	0800c800 	.word	0x0800c800
 80026d4:	20000bf8 	.word	0x20000bf8
 80026d8:	20000c00 	.word	0x20000c00
 80026dc:	08011800 	.word	0x08011800
 80026e0:	20000e2e 	.word	0x20000e2e
 80026e4:	20000e24 	.word	0x20000e24

080026e8 <wait>:

void wait(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 80026ec:	e006      	b.n	80026fc <wait+0x14>
	 {
		 printf("\r waiting... \r\n");
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <wait+0x2c>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f006 f9d7 	bl	8008aa4 <puts>
		 HAL_Delay(100);
 80026f6:	2064      	movs	r0, #100	; 0x64
 80026f8:	f001 f998 	bl	8003a2c <HAL_Delay>
	 while(dato_recivido == false)
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <wait+0x30>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4053      	eors	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f1      	bne.n	80026ee <wait+0x6>
	 }
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	0800af84 	.word	0x0800af84
 8002718:	20000c08 	.word	0x20000c08

0800271c <update_firmware>:

uint32_t update_firmware (void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
	 int err = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]

	 HAL_UART_Transmit(&huart3,"FZ", sizeof("FZ"),500);// begin
 8002726:	23fa      	movs	r3, #250	; 0xfa
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	49ed      	ldr	r1, [pc, #948]	; (8002ae0 <update_firmware+0x3c4>)
 800272c:	48ed      	ldr	r0, [pc, #948]	; (8002ae4 <update_firmware+0x3c8>)
 800272e:	2203      	movs	r2, #3
 8002730:	f003 fade 	bl	8005cf0 <HAL_UART_Transmit>
	 printf("\r Send FZ ... \r\n");
 8002734:	4bec      	ldr	r3, [pc, #944]	; (8002ae8 <update_firmware+0x3cc>)
 8002736:	0018      	movs	r0, r3
 8002738:	f006 f9b4 	bl	8008aa4 <puts>
	 wait();
 800273c:	f7ff ffd4 	bl	80026e8 <wait>
	 dato_recivido = false;
 8002740:	4bea      	ldr	r3, [pc, #936]	; (8002aec <update_firmware+0x3d0>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	4bea      	ldr	r3, [pc, #936]	; (8002af0 <update_firmware+0x3d4>)
 8002748:	681a      	ldr	r2, [r3, #0]

	memcpy(&FW_SIZE,&rx_buff[0],4);
 800274a:	4bea      	ldr	r3, [pc, #936]	; (8002af4 <update_firmware+0x3d8>)
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	4be8      	ldr	r3, [pc, #928]	; (8002af0 <update_firmware+0x3d4>)
 8002750:	685a      	ldr	r2, [r3, #4]
	memcpy(&CRC_16,&rx_buff[4],4);
 8002752:	4be9      	ldr	r3, [pc, #932]	; (8002af8 <update_firmware+0x3dc>)
 8002754:	601a      	str	r2, [r3, #0]
	FW_SIZE = REV32(FW_SIZE);
 8002756:	4be7      	ldr	r3, [pc, #924]	; (8002af4 <update_firmware+0x3d8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0e1a      	lsrs	r2, r3, #24
 800275c:	4be5      	ldr	r3, [pc, #916]	; (8002af4 <update_firmware+0x3d8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	0c19      	lsrs	r1, r3, #16
 8002764:	23ff      	movs	r3, #255	; 0xff
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	400b      	ands	r3, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	4be1      	ldr	r3, [pc, #900]	; (8002af4 <update_firmware+0x3d8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	0419      	lsls	r1, r3, #16
 8002774:	23ff      	movs	r3, #255	; 0xff
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	400b      	ands	r3, r1
 800277a:	431a      	orrs	r2, r3
 800277c:	4bdd      	ldr	r3, [pc, #884]	; (8002af4 <update_firmware+0x3d8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	4bdb      	ldr	r3, [pc, #876]	; (8002af4 <update_firmware+0x3d8>)
 8002786:	601a      	str	r2, [r3, #0]
	CRC_16 = REV32(CRC_16);
 8002788:	4bdb      	ldr	r3, [pc, #876]	; (8002af8 <update_firmware+0x3dc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e1a      	lsrs	r2, r3, #24
 800278e:	4bda      	ldr	r3, [pc, #872]	; (8002af8 <update_firmware+0x3dc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	0c19      	lsrs	r1, r3, #16
 8002796:	23ff      	movs	r3, #255	; 0xff
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	400b      	ands	r3, r1
 800279c:	431a      	orrs	r2, r3
 800279e:	4bd6      	ldr	r3, [pc, #856]	; (8002af8 <update_firmware+0x3dc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	0419      	lsls	r1, r3, #16
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	400b      	ands	r3, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	4bd2      	ldr	r3, [pc, #840]	; (8002af8 <update_firmware+0x3dc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	061b      	lsls	r3, r3, #24
 80027b4:	431a      	orrs	r2, r3
 80027b6:	4bd0      	ldr	r3, [pc, #832]	; (8002af8 <update_firmware+0x3dc>)
 80027b8:	601a      	str	r2, [r3, #0]
	pages = (uint32_t)(FW_SIZE/512);
 80027ba:	4bce      	ldr	r3, [pc, #824]	; (8002af4 <update_firmware+0x3d8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0a5a      	lsrs	r2, r3, #9
 80027c0:	4bce      	ldr	r3, [pc, #824]	; (8002afc <update_firmware+0x3e0>)
 80027c2:	601a      	str	r2, [r3, #0]
	n_bytes = 512*pages;
 80027c4:	4bcd      	ldr	r3, [pc, #820]	; (8002afc <update_firmware+0x3e0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	025a      	lsls	r2, r3, #9
 80027ca:	4bcd      	ldr	r3, [pc, #820]	; (8002b00 <update_firmware+0x3e4>)
 80027cc:	601a      	str	r2, [r3, #0]
	offset = FW_SIZE - n_bytes;
 80027ce:	4bc9      	ldr	r3, [pc, #804]	; (8002af4 <update_firmware+0x3d8>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4bcb      	ldr	r3, [pc, #812]	; (8002b00 <update_firmware+0x3e4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	4bca      	ldr	r3, [pc, #808]	; (8002b04 <update_firmware+0x3e8>)
 80027da:	601a      	str	r2, [r3, #0]
	printf(" \r fw_size: %lX \n",FW_SIZE);
 80027dc:	4bc5      	ldr	r3, [pc, #788]	; (8002af4 <update_firmware+0x3d8>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4bc9      	ldr	r3, [pc, #804]	; (8002b08 <update_firmware+0x3ec>)
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f006 f8d1 	bl	800898c <iprintf>
	printf(" \r crc_app: %lX \n",CRC_16);
 80027ea:	4bc3      	ldr	r3, [pc, #780]	; (8002af8 <update_firmware+0x3dc>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4bc7      	ldr	r3, [pc, #796]	; (8002b0c <update_firmware+0x3f0>)
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f006 f8ca 	bl	800898c <iprintf>
	printf(" \r pages: %ld \n",pages);
 80027f8:	4bc0      	ldr	r3, [pc, #768]	; (8002afc <update_firmware+0x3e0>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4bc4      	ldr	r3, [pc, #784]	; (8002b10 <update_firmware+0x3f4>)
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f006 f8c3 	bl	800898c <iprintf>
	printf(" \r n_bytes: %ld \n",n_bytes);
 8002806:	4bbe      	ldr	r3, [pc, #760]	; (8002b00 <update_firmware+0x3e4>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4bc2      	ldr	r3, [pc, #776]	; (8002b14 <update_firmware+0x3f8>)
 800280c:	0011      	movs	r1, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f006 f8bc 	bl	800898c <iprintf>
	printf(" \r offset: %ld \n",offset);
 8002814:	4bbb      	ldr	r3, [pc, #748]	; (8002b04 <update_firmware+0x3e8>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4bbf      	ldr	r3, [pc, #764]	; (8002b18 <update_firmware+0x3fc>)
 800281a:	0011      	movs	r1, r2
 800281c:	0018      	movs	r0, r3
 800281e:	f006 f8b5 	bl	800898c <iprintf>
	HAL_UART_Transmit(&huart3,"OK", sizeof("OK"),500);
 8002822:	23fa      	movs	r3, #250	; 0xfa
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	49bd      	ldr	r1, [pc, #756]	; (8002b1c <update_firmware+0x400>)
 8002828:	48ae      	ldr	r0, [pc, #696]	; (8002ae4 <update_firmware+0x3c8>)
 800282a:	2203      	movs	r2, #3
 800282c:	f003 fa60 	bl	8005cf0 <HAL_UART_Transmit>
	memset(rx_buff,'\0',sizeof(rx_buff));
 8002830:	2382      	movs	r3, #130	; 0x82
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	4bae      	ldr	r3, [pc, #696]	; (8002af0 <update_firmware+0x3d4>)
 8002836:	2100      	movs	r1, #0
 8002838:	0018      	movs	r0, r3
 800283a:	f005 fc30 	bl	800809e <memset>
	wait();
 800283e:	f7ff ff53 	bl	80026e8 <wait>
	 dato_recivido = false;
 8002842:	4baa      	ldr	r3, [pc, #680]	; (8002aec <update_firmware+0x3d0>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

	for(int i =0; i<pages; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	e096      	b.n	800297c <update_firmware+0x260>
 800284e:	4ba8      	ldr	r3, [pc, #672]	; (8002af0 <update_firmware+0x3d4>)
 8002850:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(&index_page,&rx_buff[0],4);
 8002852:	4bb3      	ldr	r3, [pc, #716]	; (8002b20 <update_firmware+0x404>)
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	4ba6      	ldr	r3, [pc, #664]	; (8002af0 <update_firmware+0x3d4>)
 8002858:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 800285a:	4bb2      	ldr	r3, [pc, #712]	; (8002b24 <update_firmware+0x408>)
 800285c:	601a      	str	r2, [r3, #0]
		index_page = REV32(index_page);
 800285e:	4bb0      	ldr	r3, [pc, #704]	; (8002b20 <update_firmware+0x404>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0e1a      	lsrs	r2, r3, #24
 8002864:	4bae      	ldr	r3, [pc, #696]	; (8002b20 <update_firmware+0x404>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	0c19      	lsrs	r1, r3, #16
 800286c:	23ff      	movs	r3, #255	; 0xff
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	400b      	ands	r3, r1
 8002872:	431a      	orrs	r2, r3
 8002874:	4baa      	ldr	r3, [pc, #680]	; (8002b20 <update_firmware+0x404>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	0419      	lsls	r1, r3, #16
 800287c:	23ff      	movs	r3, #255	; 0xff
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	400b      	ands	r3, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	4ba6      	ldr	r3, [pc, #664]	; (8002b20 <update_firmware+0x404>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	431a      	orrs	r2, r3
 800288c:	4ba4      	ldr	r3, [pc, #656]	; (8002b20 <update_firmware+0x404>)
 800288e:	601a      	str	r2, [r3, #0]
		crc_part = REV32(crc_part);
 8002890:	4ba4      	ldr	r3, [pc, #656]	; (8002b24 <update_firmware+0x408>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e1a      	lsrs	r2, r3, #24
 8002896:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <update_firmware+0x408>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	0c19      	lsrs	r1, r3, #16
 800289e:	23ff      	movs	r3, #255	; 0xff
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	4b9f      	ldr	r3, [pc, #636]	; (8002b24 <update_firmware+0x408>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	0419      	lsls	r1, r3, #16
 80028ae:	23ff      	movs	r3, #255	; 0xff
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	400b      	ands	r3, r1
 80028b4:	431a      	orrs	r2, r3
 80028b6:	4b9b      	ldr	r3, [pc, #620]	; (8002b24 <update_firmware+0x408>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	431a      	orrs	r2, r3
 80028be:	4b99      	ldr	r3, [pc, #612]	; (8002b24 <update_firmware+0x408>)
 80028c0:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 80028c2:	4b97      	ldr	r3, [pc, #604]	; (8002b20 <update_firmware+0x404>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <update_firmware+0x40c>)
 80028c8:	0011      	movs	r1, r2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f006 f85e 	bl	800898c <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 80028d0:	4b94      	ldr	r3, [pc, #592]	; (8002b24 <update_firmware+0x408>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b95      	ldr	r3, [pc, #596]	; (8002b2c <update_firmware+0x410>)
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f006 f857 	bl	800898c <iprintf>
		crc = CRC16_X25(&rx_buff[8], 512, crc);
 80028de:	4b94      	ldr	r3, [pc, #592]	; (8002b30 <update_firmware+0x414>)
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	0099      	lsls	r1, r3, #2
 80028e6:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <update_firmware+0x418>)
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff fdd9 	bl	80024a0 <CRC16_X25>
 80028ee:	0003      	movs	r3, r0
 80028f0:	001a      	movs	r2, r3
 80028f2:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <update_firmware+0x414>)
 80028f4:	801a      	strh	r2, [r3, #0]
		if(crc == crc_part)
 80028f6:	4b8e      	ldr	r3, [pc, #568]	; (8002b30 <update_firmware+0x414>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	001a      	movs	r2, r3
 80028fc:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <update_firmware+0x408>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d135      	bne.n	8002970 <update_firmware+0x254>
		{
			a = write(&rx_buff[8],a);
 8002904:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <update_firmware+0x41c>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	001a      	movs	r2, r3
 800290a:	4b8a      	ldr	r3, [pc, #552]	; (8002b34 <update_firmware+0x418>)
 800290c:	0011      	movs	r1, r2
 800290e:	0018      	movs	r0, r3
 8002910:	f7ff fe0e 	bl	8002530 <write>
 8002914:	0003      	movs	r3, r0
 8002916:	b29a      	uxth	r2, r3
 8002918:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <update_firmware+0x41c>)
 800291a:	801a      	strh	r2, [r3, #0]
			printf(" \r WRITE OK \r\n");
 800291c:	4b87      	ldr	r3, [pc, #540]	; (8002b3c <update_firmware+0x420>)
 800291e:	0018      	movs	r0, r3
 8002920:	f006 f8c0 	bl	8008aa4 <puts>
			printf(" \r a: %d \n",a);
 8002924:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <update_firmware+0x41c>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <update_firmware+0x424>)
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f006 f82c 	bl	800898c <iprintf>
			printf(" \r crc: %X \n",crc);
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <update_firmware+0x414>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	001a      	movs	r2, r3
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <update_firmware+0x428>)
 800293c:	0011      	movs	r1, r2
 800293e:	0018      	movs	r0, r3
 8002940:	f006 f824 	bl	800898c <iprintf>
			HAL_UART_Transmit(&huart3,"OK", sizeof("OK"),500);
 8002944:	23fa      	movs	r3, #250	; 0xfa
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4974      	ldr	r1, [pc, #464]	; (8002b1c <update_firmware+0x400>)
 800294a:	4866      	ldr	r0, [pc, #408]	; (8002ae4 <update_firmware+0x3c8>)
 800294c:	2203      	movs	r2, #3
 800294e:	f003 f9cf 	bl	8005cf0 <HAL_UART_Transmit>
			memset(rx_buff,'\0',sizeof(rx_buff));
 8002952:	2382      	movs	r3, #130	; 0x82
 8002954:	009a      	lsls	r2, r3, #2
 8002956:	4b66      	ldr	r3, [pc, #408]	; (8002af0 <update_firmware+0x3d4>)
 8002958:	2100      	movs	r1, #0
 800295a:	0018      	movs	r0, r3
 800295c:	f005 fb9f 	bl	800809e <memset>
			wait();
 8002960:	f7ff fec2 	bl	80026e8 <wait>
			dato_recivido = false;
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <update_firmware+0x3d0>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
			err = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e002      	b.n	8002976 <update_firmware+0x25a>
		}
		else
		{
			err = 1;
 8002970:	2301      	movs	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
			break;
 8002974:	e008      	b.n	8002988 <update_firmware+0x26c>
	for(int i =0; i<pages; i++)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <update_firmware+0x3e0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d200      	bcs.n	8002988 <update_firmware+0x26c>
 8002986:	e762      	b.n	800284e <update_firmware+0x132>
		}

	}// end for
	if(err != 1)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d100      	bne.n	8002990 <update_firmware+0x274>
 800298e:	e095      	b.n	8002abc <update_firmware+0x3a0>
	{
		printf(" \r --------------Last Page ----------- \n");
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <update_firmware+0x42c>)
 8002992:	0018      	movs	r0, r3
 8002994:	f006 f886 	bl	8008aa4 <puts>
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <update_firmware+0x3d4>)
 800299a:	681a      	ldr	r2, [r3, #0]
		memcpy(&index_page,&rx_buff[0],4);
 800299c:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <update_firmware+0x404>)
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <update_firmware+0x3d4>)
 80029a2:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <update_firmware+0x408>)
 80029a6:	601a      	str	r2, [r3, #0]
		index_page = REV32(index_page);
 80029a8:	4b5d      	ldr	r3, [pc, #372]	; (8002b20 <update_firmware+0x404>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e1a      	lsrs	r2, r3, #24
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <update_firmware+0x404>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	0c19      	lsrs	r1, r3, #16
 80029b6:	23ff      	movs	r3, #255	; 0xff
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <update_firmware+0x404>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	0419      	lsls	r1, r3, #16
 80029c6:	23ff      	movs	r3, #255	; 0xff
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	400b      	ands	r3, r1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <update_firmware+0x404>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	431a      	orrs	r2, r3
 80029d6:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <update_firmware+0x404>)
 80029d8:	601a      	str	r2, [r3, #0]
		crc_part = REV32(crc_part);
 80029da:	4b52      	ldr	r3, [pc, #328]	; (8002b24 <update_firmware+0x408>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e1a      	lsrs	r2, r3, #24
 80029e0:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <update_firmware+0x408>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	0c19      	lsrs	r1, r3, #16
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	400b      	ands	r3, r1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	4b4c      	ldr	r3, [pc, #304]	; (8002b24 <update_firmware+0x408>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	0419      	lsls	r1, r3, #16
 80029f8:	23ff      	movs	r3, #255	; 0xff
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	400b      	ands	r3, r1
 80029fe:	431a      	orrs	r2, r3
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <update_firmware+0x408>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	431a      	orrs	r2, r3
 8002a08:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <update_firmware+0x408>)
 8002a0a:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <update_firmware+0x404>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b45      	ldr	r3, [pc, #276]	; (8002b28 <update_firmware+0x40c>)
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f005 ffb9 	bl	800898c <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 8002a1a:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <update_firmware+0x408>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <update_firmware+0x410>)
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f005 ffb2 	bl	800898c <iprintf>
		crc = CRC16_X25(&rx_buff[8], offset, crc);
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <update_firmware+0x3e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b299      	uxth	r1, r3
 8002a2e:	4b40      	ldr	r3, [pc, #256]	; (8002b30 <update_firmware+0x414>)
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <update_firmware+0x418>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fd33 	bl	80024a0 <CRC16_X25>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <update_firmware+0x414>)
 8002a40:	801a      	strh	r2, [r3, #0]

		if(crc == crc_part)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <update_firmware+0x414>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	001a      	movs	r2, r3
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <update_firmware+0x408>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d135      	bne.n	8002abc <update_firmware+0x3a0>
		{
			a = write(&rx_buff[8],a);
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <update_firmware+0x41c>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	001a      	movs	r2, r3
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <update_firmware+0x418>)
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fd68 	bl	8002530 <write>
 8002a60:	0003      	movs	r3, r0
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <update_firmware+0x41c>)
 8002a66:	801a      	strh	r2, [r3, #0]
			printf(" \r WRITE OK \r\n");
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <update_firmware+0x420>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f006 f81a 	bl	8008aa4 <puts>
			printf(" \r a: %d \n",a);
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <update_firmware+0x41c>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	001a      	movs	r2, r3
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <update_firmware+0x424>)
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f005 ff86 	bl	800898c <iprintf>
			printf(" \r crc: %X \n",crc);
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <update_firmware+0x414>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	001a      	movs	r2, r3
 8002a86:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <update_firmware+0x428>)
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f005 ff7e 	bl	800898c <iprintf>
			memset(rx_buff,'\0',sizeof(rx_buff));
 8002a90:	2382      	movs	r3, #130	; 0x82
 8002a92:	009a      	lsls	r2, r3, #2
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <update_firmware+0x3d4>)
 8002a96:	2100      	movs	r1, #0
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f005 fb00 	bl	800809e <memset>
			printf(" \r crc parts: %04X \n",crc);
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <update_firmware+0x414>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <update_firmware+0x430>)
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f005 ff6f 	bl	800898c <iprintf>
			printf(" \r CRC Blink: %lX \n",CRC_16);//do
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <update_firmware+0x3dc>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <update_firmware+0x434>)
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f005 ff68 	bl	800898c <iprintf>
		}
	}

//---------------- Validate -------------------------
	const image_hdr_t *hdr = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	607b      	str	r3, [r7, #4]
	hdr = image_get_header(IMAGE_SLOT_2);//magic
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7ff fc4d 	bl	8002360 <image_get_header>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	607b      	str	r3, [r7, #4]
	if (hdr == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d143      	bne.n	8002b58 <update_firmware+0x43c>
	{
		printf("Magic incorrect \r\n");
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <update_firmware+0x438>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f005 ffe6 	bl	8008aa4 <puts>
		return -1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	425b      	negs	r3, r3
 8002adc:	e05f      	b.n	8002b9e <update_firmware+0x482>
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	0800af94 	.word	0x0800af94
 8002ae4:	20000b64 	.word	0x20000b64
 8002ae8:	0800af98 	.word	0x0800af98
 8002aec:	20000c08 	.word	0x20000c08
 8002af0:	20000c18 	.word	0x20000c18
 8002af4:	20000e20 	.word	0x20000e20
 8002af8:	20000e24 	.word	0x20000e24
 8002afc:	20000c0c 	.word	0x20000c0c
 8002b00:	20000c14 	.word	0x20000c14
 8002b04:	20000c10 	.word	0x20000c10
 8002b08:	0800afa8 	.word	0x0800afa8
 8002b0c:	0800afbc 	.word	0x0800afbc
 8002b10:	0800afd0 	.word	0x0800afd0
 8002b14:	0800afe0 	.word	0x0800afe0
 8002b18:	0800aff4 	.word	0x0800aff4
 8002b1c:	0800b008 	.word	0x0800b008
 8002b20:	20000e28 	.word	0x20000e28
 8002b24:	20000e38 	.word	0x20000e38
 8002b28:	0800b00c 	.word	0x0800b00c
 8002b2c:	0800b01c 	.word	0x0800b01c
 8002b30:	20000e2c 	.word	0x20000e2c
 8002b34:	20000c20 	.word	0x20000c20
 8002b38:	20000e30 	.word	0x20000e30
 8002b3c:	0800b030 	.word	0x0800b030
 8002b40:	0800b040 	.word	0x0800b040
 8002b44:	0800b04c 	.word	0x0800b04c
 8002b48:	0800b05c 	.word	0x0800b05c
 8002b4c:	0800b084 	.word	0x0800b084
 8002b50:	0800b09c 	.word	0x0800b09c
 8002b54:	0800b0b0 	.word	0x0800b0b0
	}
	if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7ff fc2d 	bl	80023bc <image_validate>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d006      	beq.n	8002b74 <update_firmware+0x458>
	{
		printf("CRC incorrect \r\n");
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <update_firmware+0x48c>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f005 ff9b 	bl	8008aa4 <puts>
		return -1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	425b      	negs	r3, r3
 8002b72:	e014      	b.n	8002b9e <update_firmware+0x482>
	}
// -------------------------- Clone ----------------------------
	err = clone_rom(FW_SIZE);
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <update_firmware+0x490>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f7ff fd1d 	bl	80025b8 <clone_rom>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	60fb      	str	r3, [r7, #12]
	if ( err == 0)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d105      	bne.n	8002b94 <update_firmware+0x478>
	{
		printf("UPDATE SUCCESSFULLY\r\n");
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <update_firmware+0x494>)
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f005 ff8a 	bl	8008aa4 <puts>
		return err;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	e004      	b.n	8002b9e <update_firmware+0x482>
	}
	else
	{
		printf("UPDATE FAIL\r\n");
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <update_firmware+0x498>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f005 ff84 	bl	8008aa4 <puts>
		return err;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
	}

}/// get_Firmware()
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	0800b0c4 	.word	0x0800b0c4
 8002bac:	20000e20 	.word	0x20000e20
 8002bb0:	0800b0d4 	.word	0x0800b0d4
 8002bb4:	0800b0ec 	.word	0x0800b0ec

08002bb8 <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 8002bb8:	f381 8808 	msr	MSP, r1
 8002bbc:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 8002bbe:	46c0      	nop			; (mov r8, r8)

08002bc0 <image_start>:

	/* Execute application */
	BootJumpASM(address[1], address[0]);
}

static void image_start(const image_hdr_t *hdr) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002bc8:	200f      	movs	r0, #15
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <image_start+0xb8>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 8002bda:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <image_start+0xbc>)
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <image_start+0xbc>)
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	0489      	lsls	r1, r1, #18
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e015      	b.n	8002c1c <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8002bf0:	4923      	ldr	r1, [pc, #140]	; (8002c80 <image_start+0xc0>)
 8002bf2:	200f      	movs	r0, #15
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4252      	negs	r2, r2
 8002c00:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 8002c02:	491f      	ldr	r1, [pc, #124]	; (8002c80 <image_start+0xc0>)
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4252      	negs	r2, r2
 8002c10:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	3201      	adds	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d9e4      	bls.n	8002bf0 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c26:	f3bf 8f4f 	dsb	sy
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c2c:	f3bf 8f6f 	isb	sy
}
 8002c30:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7c1a      	ldrb	r2, [r3, #16]
 8002c36:	7c59      	ldrb	r1, [r3, #17]
 8002c38:	0209      	lsls	r1, r1, #8
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	7c99      	ldrb	r1, [r3, #18]
 8002c3e:	0409      	lsls	r1, r1, #16
 8002c40:	430a      	orrs	r2, r1
 8002c42:	7cdb      	ldrb	r3, [r3, #19]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <image_start+0xbc>)
 8002c4e:	21ff      	movs	r1, #255	; 0xff
 8002c50:	438a      	bics	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c54:	f3bf 8f4f 	dsb	sy
}
 8002c58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c5a:	f3bf 8f6f 	isb	sy
}
 8002c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8002c60:	b662      	cpsie	i
}
 8002c62:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3304      	adds	r3, #4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0019      	movs	r1, r3
 8002c70:	0010      	movs	r0, r2
 8002c72:	f7ff ffa1 	bl	8002bb8 <BootJumpASM>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	e000e010 	.word	0xe000e010
 8002c7c:	e000ed00 	.word	0xe000ed00
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c8a:	f000 fe49 	bl	8003920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c8e:	f000 f90b 	bl	8002ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c92:	f000 fa49 	bl	8003128 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c96:	f000 f9ab 	bl	8002ff0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002c9a:	f000 f9f7 	bl	800308c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002c9e:	f000 f94b 	bl	8002f38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
   RetargetInit(&huart2);
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <main+0x1d4>)
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fb97 	bl	80033d8 <RetargetInit>
   HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_buff, sizeof rx_buff);
 8002caa:	2382      	movs	r3, #130	; 0x82
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	496b      	ldr	r1, [pc, #428]	; (8002e5c <main+0x1d8>)
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <main+0x1dc>)
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f005 f8fa 	bl	8007eac <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shared_memory_init();
 8002cb8:	f000 fb02 	bl	80032c0 <shared_memory_init>
	printf("Start \r\n");
 8002cbc:	4b69      	ldr	r3, [pc, #420]	; (8002e64 <main+0x1e0>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f005 fef0 	bl	8008aa4 <puts>
	timer_flag = 0;
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <main+0x1e4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <main+0x1e8>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f002 fb4d 	bl	800536c <HAL_TIM_Base_Start_IT>


	while (1)
	{
		HAL_Delay(10);
 8002cd2:	200a      	movs	r0, #10
 8002cd4:	f000 feaa 	bl	8003a2c <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);// 1/0
 8002cd8:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <main+0x1ec>)
 8002cda:	2108      	movs	r1, #8
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f001 faed 	bl	80042bc <HAL_GPIO_ReadPin>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <main+0x1f0>)
 8002ce8:	801a      	strh	r2, [r3, #0]
		printf("\r boot: %d \r\n",boot);
 8002cea:	4b62      	ldr	r3, [pc, #392]	; (8002e74 <main+0x1f0>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	001a      	movs	r2, r3
 8002cf0:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <main+0x1f4>)
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f005 fe49 	bl	800898c <iprintf>
		bootloader = timer_flag & boot;
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <main+0x1e4>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <main+0x1f0>)
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	4193      	sbcs	r3, r2
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <main+0x1f8>)
 8002d0e:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 8002d10:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <main+0x1f8>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <main+0xac>
		{
			printf(" \r App \r\n");
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <main+0x1fc>)
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f005 fec2 	bl	8008aa4 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <main+0x1e8>)
 8002d22:	0018      	movs	r0, r3
 8002d24:	f002 fb84 	bl	8005430 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f000 fb31 	bl	8003390 <shared_mem_set_app_update_requested>
 8002d2e:	e00a      	b.n	8002d46 <main+0xc2>
		}
		else
		{
			printf(" \r Bootloader \r\n");
 8002d30:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <main+0x200>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f005 feb6 	bl	8008aa4 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <main+0x1e8>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 fb78 	bl	8005430 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 fb25 	bl	8003390 <shared_mem_set_app_update_requested>
		}


		const image_hdr_t *hdr = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]

		if (shared_mem_is_bl_upd_requested()) {
 8002d4a:	f000 fae0 	bl	800330e <shared_mem_is_bl_upd_requested>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d01b      	beq.n	8002d8a <main+0x106>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 8002d52:	2002      	movs	r0, #2
 8002d54:	f7ff fb04 	bl	8002360 <image_get_header>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	607b      	str	r3, [r7, #4]

		// Load the updater (apparom)
		if (hdr == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <main+0xe8>
		{
			printf("No image found in slot 2\r\n");
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <main+0x204>)
 8002d64:	0018      	movs	r0, r3
 8002d66:	f005 fe9d 	bl	8008aa4 <puts>
 8002d6a:	e004      	b.n	8002d76 <main+0xf2>
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0019      	movs	r1, r3
 8002d70:	2002      	movs	r0, #2
 8002d72:	f7ff fb23 	bl	80023bc <image_validate>
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);

		printf("Jumping to updater\r\n");
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <main+0x208>)
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f005 fe93 	bl	8008aa4 <puts>
		shared_mem_increment_boot_counter();
 8002d7e:	f000 facf 	bl	8003320 <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff ff1b 	bl	8002bc0 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {
 8002d8a:	f000 fab7 	bl	80032fc <shared_mem_is_app_upd_requested>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	001a      	movs	r2, r3
 8002d92:	2301      	movs	r3, #1
 8002d94:	4053      	eors	r3, r2
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d033      	beq.n	8002e04 <main+0x180>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 8002d9c:	1cfb      	adds	r3, r7, #3
 8002d9e:	2204      	movs	r2, #4
 8002da0:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 8002da2:	f000 fad5 	bl	8003350 <shared_mem_get_boot_counter>
 8002da6:	0003      	movs	r3, r0
 8002da8:	001a      	movs	r2, r3
 8002daa:	1cfb      	adds	r3, r7, #3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d809      	bhi.n	8002dc6 <main+0x142>
		{
			shared_mem_clear_boot_counter();
 8002db2:	f000 fac3 	bl	800333c <shared_mem_clear_boot_counter>
			printf("App unstable, entering to DFU mode\r\n");
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <main+0x20c>)
 8002db8:	0018      	movs	r0, r3
 8002dba:	f005 fe73 	bl	8008aa4 <puts>
			break;
 8002dbe:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 8002dc0:	f000 ff3b 	bl	8003c3a <HAL_NVIC_SystemReset>
 8002dc4:	e043      	b.n	8002e4e <main+0x1ca>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7ff faca 	bl	8002360 <image_get_header>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	607b      	str	r3, [r7, #4]
		if (hdr == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <main+0x15c>
			printf("No image found in slot 1\r\n");
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <main+0x210>)
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f005 fe63 	bl	8008aa4 <puts>
			goto invalid;
 8002dde:	e036      	b.n	8002e4e <main+0x1ca>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0019      	movs	r1, r3
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7ff fae9 	bl	80023bc <image_validate>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d12e      	bne.n	8002e4c <main+0x1c8>
		printf("Jumping to application\r\n\n");
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <main+0x214>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f005 fe57 	bl	8008aa4 <puts>
		shared_mem_increment_boot_counter();
 8002df6:	f000 fa93 	bl	8003320 <shared_mem_increment_boot_counter>
		image_start(hdr);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff fedf 	bl	8002bc0 <image_start>
 8002e02:	e766      	b.n	8002cd2 <main+0x4e>
	else if (shared_mem_is_app_upd_requested())
 8002e04:	f000 fa7a 	bl	80032fc <shared_mem_is_app_upd_requested>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d100      	bne.n	8002e0e <main+0x18a>
 8002e0c:	e761      	b.n	8002cd2 <main+0x4e>
		if (update_firmware() == 0)
 8002e0e:	f7ff fc85 	bl	800271c <update_firmware>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d000      	beq.n	8002e18 <main+0x194>
 8002e16:	e75c      	b.n	8002cd2 <main+0x4e>
			printf("Update completed, restarting\r\n");
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <main+0x218>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f005 fe42 	bl	8008aa4 <puts>
			shared_mem_set_update_completed();
 8002e20:	f000 faa0 	bl	8003364 <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 8002e24:	f000 fa8a 	bl	800333c <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 8002e28:	f000 faa8 	bl	800337c <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f000 faaf 	bl	8003390 <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 8002e32:	f000 fabd 	bl	80033b0 <shared_mem_set_update>
			printf("\r shared_mem_get_update: %d \r\n",shared_mem_get_update());
 8002e36:	f000 fac5 	bl	80033c4 <shared_mem_get_update>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <main+0x21c>)
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f005 fda3 	bl	800898c <iprintf>
			HAL_NVIC_SystemReset(); //resetea el uC
 8002e46:	f000 fef8 	bl	8003c3a <HAL_NVIC_SystemReset>
	{
 8002e4a:	e742      	b.n	8002cd2 <main+0x4e>
			goto invalid;
 8002e4c:	46c0      	nop			; (mov r8, r8)

	invalid:
		printf("\r\nFlash a valid application\r\n");
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <main+0x220>)
 8002e50:	0018      	movs	r0, r3
 8002e52:	f005 fe27 	bl	8008aa4 <puts>
		while (true)
		{
			__asm__ __volatile__("");
 8002e56:	e7fe      	b.n	8002e56 <main+0x1d2>
 8002e58:	20000ad0 	.word	0x20000ad0
 8002e5c:	20000c18 	.word	0x20000c18
 8002e60:	20000b64 	.word	0x20000b64
 8002e64:	0800b0fc 	.word	0x0800b0fc
 8002e68:	20000e34 	.word	0x20000e34
 8002e6c:	20000a84 	.word	0x20000a84
 8002e70:	50000800 	.word	0x50000800
 8002e74:	20000e32 	.word	0x20000e32
 8002e78:	0800b104 	.word	0x0800b104
 8002e7c:	20000c09 	.word	0x20000c09
 8002e80:	0800b114 	.word	0x0800b114
 8002e84:	0800b120 	.word	0x0800b120
 8002e88:	0800b130 	.word	0x0800b130
 8002e8c:	0800b14c 	.word	0x0800b14c
 8002e90:	0800b160 	.word	0x0800b160
 8002e94:	0800b184 	.word	0x0800b184
 8002e98:	0800b1a0 	.word	0x0800b1a0
 8002e9c:	0800b1bc 	.word	0x0800b1bc
 8002ea0:	0800b1dc 	.word	0x0800b1dc
 8002ea4:	0800b1fc 	.word	0x0800b1fc

08002ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b095      	sub	sp, #84	; 0x54
 8002eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eae:	2414      	movs	r4, #20
 8002eb0:	193b      	adds	r3, r7, r4
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	233c      	movs	r3, #60	; 0x3c
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f005 f8f0 	bl	800809e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f005 f8e9 	bl	800809e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f001 fa61 	bl	8004398 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	2202      	movs	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	0052      	lsls	r2, r2, #1
 8002ee2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f001 fa99 	bl	8004430 <HAL_RCC_OscConfig>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d001      	beq.n	8002f06 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f02:	f000 f9a5 	bl	8003250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f06:	1d3b      	adds	r3, r7, #4
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f12:	1d3b      	adds	r3, r7, #4
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	2100      	movs	r1, #0
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 fde4 	bl	8004af0 <HAL_RCC_ClockConfig>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f2c:	f000 f990 	bl	8003250 <Error_Handler>
  }
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b015      	add	sp, #84	; 0x54
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3e:	2310      	movs	r3, #16
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	0018      	movs	r0, r3
 8002f44:	2310      	movs	r3, #16
 8002f46:	001a      	movs	r2, r3
 8002f48:	2100      	movs	r1, #0
 8002f4a:	f005 f8a8 	bl	800809e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	0018      	movs	r0, r3
 8002f52:	230c      	movs	r3, #12
 8002f54:	001a      	movs	r2, r3
 8002f56:	2100      	movs	r1, #0
 8002f58:	f005 f8a1 	bl	800809e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f5e:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <MX_TIM1_Init+0xb0>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <MX_TIM1_Init+0xb4>)
 8002f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f70:	22fa      	movs	r2, #250	; 0xfa
 8002f72:	0052      	lsls	r2, r2, #1
 8002f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f002 f996 	bl	80052bc <HAL_TIM_Base_Init>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8002f94:	f000 f95c 	bl	8003250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f98:	2110      	movs	r1, #16
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	0152      	lsls	r2, r2, #5
 8002fa0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fa2:	187a      	adds	r2, r7, r1
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f002 fba1 	bl	80056f0 <HAL_TIM_ConfigClockSource>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002fb2:	f000 f94d 	bl	8003250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fc8:	1d3a      	adds	r2, r7, #4
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_TIM1_Init+0xac>)
 8002fcc:	0011      	movs	r1, r2
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f002 fdaa 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002fd8:	f000 f93a 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b008      	add	sp, #32
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000a84 	.word	0x20000a84
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	00003e7f 	.word	0x00003e7f

08002ff0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8002ff6:	4a24      	ldr	r2, [pc, #144]	; (8003088 <MX_USART2_UART_Init+0x98>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8002ffc:	22e1      	movs	r2, #225	; 0xe1
 8002ffe:	0252      	lsls	r2, r2, #9
 8003000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <MX_USART2_UART_Init+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800303a:	0018      	movs	r0, r3
 800303c:	f002 fe02 	bl	8005c44 <HAL_UART_Init>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d001      	beq.n	8003048 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003044:	f000 f904 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800304a:	2100      	movs	r1, #0
 800304c:	0018      	movs	r0, r3
 800304e:	f004 feab 	bl	8007da8 <HAL_UARTEx_SetTxFifoThreshold>
 8003052:	1e03      	subs	r3, r0, #0
 8003054:	d001      	beq.n	800305a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003056:	f000 f8fb 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800305c:	2100      	movs	r1, #0
 800305e:	0018      	movs	r0, r3
 8003060:	f004 fee2 	bl	8007e28 <HAL_UARTEx_SetRxFifoThreshold>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d001      	beq.n	800306c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003068:	f000 f8f2 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <MX_USART2_UART_Init+0x94>)
 800306e:	0018      	movs	r0, r3
 8003070:	f004 fe60 	bl	8007d34 <HAL_UARTEx_DisableFifoMode>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d001      	beq.n	800307c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003078:	f000 f8ea 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000ad0 	.word	0x20000ad0
 8003088:	40004400 	.word	0x40004400

0800308c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <MX_USART3_UART_Init+0x94>)
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <MX_USART3_UART_Init+0x98>)
 8003094:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <MX_USART3_UART_Init+0x94>)
 8003098:	22e1      	movs	r2, #225	; 0xe1
 800309a:	0252      	lsls	r2, r2, #9
 800309c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f002 fdb4 	bl	8005c44 <HAL_UART_Init>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030e0:	f000 f8b6 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030e6:	2100      	movs	r1, #0
 80030e8:	0018      	movs	r0, r3
 80030ea:	f004 fe5d 	bl	8007da8 <HAL_UARTEx_SetTxFifoThreshold>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030f2:	f000 f8ad 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <MX_USART3_UART_Init+0x94>)
 80030f8:	2100      	movs	r1, #0
 80030fa:	0018      	movs	r0, r3
 80030fc:	f004 fe94 	bl	8007e28 <HAL_UARTEx_SetRxFifoThreshold>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003104:	f000 f8a4 	bl	8003250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <MX_USART3_UART_Init+0x94>)
 800310a:	0018      	movs	r0, r3
 800310c:	f004 fe12 	bl	8007d34 <HAL_UARTEx_DisableFifoMode>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003114:	f000 f89c 	bl	8003250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000b64 	.word	0x20000b64
 8003124:	40004800 	.word	0x40004800

08003128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	240c      	movs	r4, #12
 8003130:	193b      	adds	r3, r7, r4
 8003132:	0018      	movs	r0, r3
 8003134:	2314      	movs	r3, #20
 8003136:	001a      	movs	r2, r3
 8003138:	2100      	movs	r1, #0
 800313a:	f004 ffb0 	bl	800809e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <MX_GPIO_Init+0xec>)
 8003140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <MX_GPIO_Init+0xec>)
 8003144:	2104      	movs	r1, #4
 8003146:	430a      	orrs	r2, r1
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
 800314a:	4b32      	ldr	r3, [pc, #200]	; (8003214 <MX_GPIO_Init+0xec>)
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2204      	movs	r2, #4
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <MX_GPIO_Init+0xec>)
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <MX_GPIO_Init+0xec>)
 800315c:	2120      	movs	r1, #32
 800315e:	430a      	orrs	r2, r1
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <MX_GPIO_Init+0xec>)
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	2220      	movs	r2, #32
 8003168:	4013      	ands	r3, r2
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	4b29      	ldr	r3, [pc, #164]	; (8003214 <MX_GPIO_Init+0xec>)
 8003170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MX_GPIO_Init+0xec>)
 8003174:	2101      	movs	r1, #1
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <MX_GPIO_Init+0xec>)
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	2201      	movs	r2, #1
 8003180:	4013      	ands	r3, r2
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	2200      	movs	r2, #0
 800318c:	2120      	movs	r1, #32
 800318e:	0018      	movs	r0, r3
 8003190:	f001 f8b1 	bl	80042f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 8003194:	193b      	adds	r3, r7, r4
 8003196:	2208      	movs	r2, #8
 8003198:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	2201      	movs	r2, #1
 80031a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80031a6:	193b      	adds	r3, r7, r4
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <MX_GPIO_Init+0xf0>)
 80031aa:	0019      	movs	r1, r3
 80031ac:	0010      	movs	r0, r2
 80031ae:	f000 ff19 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	2220      	movs	r2, #32
 80031b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2201      	movs	r2, #1
 80031bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	2202      	movs	r2, #2
 80031c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80031ca:	193a      	adds	r2, r7, r4
 80031cc:	23a0      	movs	r3, #160	; 0xa0
 80031ce:	05db      	lsls	r3, r3, #23
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 ff06 	bl	8003fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80031d8:	0021      	movs	r1, r4
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2220      	movs	r2, #32
 80031de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	2284      	movs	r2, #132	; 0x84
 80031e4:	0392      	lsls	r2, r2, #14
 80031e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	4a09      	ldr	r2, [pc, #36]	; (8003218 <MX_GPIO_Init+0xf0>)
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f000 fef5 	bl	8003fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2007      	movs	r0, #7
 8003200:	f000 fcf6 	bl	8003bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003204:	2007      	movs	r0, #7
 8003206:	f000 fd08 	bl	8003c1a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b009      	add	sp, #36	; 0x24
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021000 	.word	0x40021000
 8003218:	50000800 	.word	0x50000800

0800321c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d106      	bne.n	800323c <HAL_TIM_PeriodElapsedCallback+0x20>
	  {
		timer_flag = 1 ;
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003230:	2201      	movs	r2, #1
 8003232:	801a      	strh	r2, [r3, #0]
		printf("\r ---------------- \r\n");
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003236:	0018      	movs	r0, r3
 8003238:	f005 fc34 	bl	8008aa4 <puts>
		printf("\r boot2_flag: %d \r\n",boot2_flag);
	}*/



}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40012c00 	.word	0x40012c00
 8003248:	20000e34 	.word	0x20000e34
 800324c:	0800b21c 	.word	0x0800b21c

08003250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003258:	e7fe      	b.n	8003258 <Error_Handler+0x8>
	...

0800325c <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	000a      	movs	r2, r1
 8003266:	1cfb      	adds	r3, r7, #3
 8003268:	701a      	strb	r2, [r3, #0]
    if (value) {
 800326a:	1cfb      	adds	r3, r7, #3
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <prv_set_flag+0x24>
        shared_data.flags |= flag;
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <prv_set_flag+0x3c>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	431a      	orrs	r2, r3
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <prv_set_flag+0x3c>)
 800327c:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 800327e:	e006      	b.n	800328e <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <prv_set_flag+0x3c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	43d2      	mvns	r2, r2
 8003288:	401a      	ands	r2, r3
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <prv_set_flag+0x3c>)
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000004 	.word	0x20000004

0800329c <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <prv_get_flag+0x20>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4013      	ands	r3, r2
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	4193      	sbcs	r3, r2
 80032b0:	b2db      	uxtb	r3, r3
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000004 	.word	0x20000004

080032c0 <shared_memory_init>:

void shared_memory_init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <shared_memory_init+0x34>)
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	23e7      	movs	r3, #231	; 0xe7
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d00d      	beq.n	80032ec <shared_memory_init+0x2c>
  {
    printf("Shared memory uninitialized, setting MAGIC\r\n");
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <shared_memory_init+0x38>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f005 fbe6 	bl	8008aa4 <puts>
    memset(&shared_data, 0, sizeof (shared_data_t));
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <shared_memory_init+0x34>)
 80032da:	2212      	movs	r2, #18
 80032dc:	2100      	movs	r1, #0
 80032de:	0018      	movs	r0, r3
 80032e0:	f004 fedd 	bl	800809e <memset>
    shared_data.magic = MAGIC;
 80032e4:	23e7      	movs	r3, #231	; 0xe7
 80032e6:	005a      	lsls	r2, r3, #1
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <shared_memory_init+0x34>)
 80032ea:	605a      	str	r2, [r3, #4]
  }
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	20000004 	.word	0x20000004
 80032f8:	0800b234 	.word	0x0800b234

080032fc <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff ffcb 	bl	800329c <prv_get_flag>
 8003306:	0003      	movs	r3, r0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 8003312:	2002      	movs	r0, #2
 8003314:	f7ff ffc2 	bl	800329c <prv_get_flag>
 8003318:	0003      	movs	r3, r0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <shared_mem_increment_boot_counter+0x18>)
 8003326:	7c1b      	ldrb	r3, [r3, #16]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <shared_mem_increment_boot_counter+0x18>)
 800332e:	741a      	strb	r2, [r3, #16]
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	20000004 	.word	0x20000004

0800333c <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 8003340:	4b02      	ldr	r3, [pc, #8]	; (800334c <shared_mem_clear_boot_counter+0x10>)
 8003342:	2200      	movs	r2, #0
 8003344:	741a      	strb	r2, [r3, #16]
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000004 	.word	0x20000004

08003350 <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 8003354:	4b02      	ldr	r3, [pc, #8]	; (8003360 <shared_mem_get_boot_counter+0x10>)
 8003356:	7c1b      	ldrb	r3, [r3, #16]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000004 	.word	0x20000004

08003364 <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 8003368:	4b02      	ldr	r3, [pc, #8]	; (8003374 <shared_mem_set_update_completed+0x10>)
 800336a:	4a03      	ldr	r2, [pc, #12]	; (8003378 <shared_mem_set_update_completed+0x14>)
 800336c:	60da      	str	r2, [r3, #12]
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000004 	.word	0x20000004
 8003378:	454e4f44 	.word	0x454e4f44

0800337c <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <shared_mem_clear_ota_info+0x10>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000004 	.word	0x20000004

08003390 <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	0002      	movs	r2, r0
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	0019      	movs	r1, r3
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7ff ff5a 	bl	800325c <prv_set_flag>
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <shared_mem_set_update+0x10>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	745a      	strb	r2, [r3, #17]
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000004 	.word	0x20000004

080033c4 <shared_mem_get_update>:
{
	shared_data.update = 0;
}

int shared_mem_get_update(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	return shared_data.update;
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <shared_mem_get_update+0x10>)
 80033ca:	7c5b      	ldrb	r3, [r3, #17]
}
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20000004 	.word	0x20000004

080033d8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80033e0:	4b07      	ldr	r3, [pc, #28]	; (8003400 <RetargetInit+0x28>)
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <RetargetInit+0x2c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6898      	ldr	r0, [r3, #8]
 80033ec:	2300      	movs	r3, #0
 80033ee:	2202      	movs	r2, #2
 80033f0:	2100      	movs	r1, #0
 80033f2:	f005 fb61 	bl	8008ab8 <setvbuf>
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000e3c 	.word	0x20000e3c
 8003404:	2000040c 	.word	0x2000040c

08003408 <_isatty>:

int _isatty(int fd) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db04      	blt.n	8003420 <_isatty+0x18>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	dc01      	bgt.n	8003420 <_isatty+0x18>
    return 1;
 800341c:	2301      	movs	r3, #1
 800341e:	e005      	b.n	800342c <_isatty+0x24>

  errno = EBADF;
 8003420:	f004 fe0a 	bl	8008038 <__errno>
 8003424:	0003      	movs	r3, r0
 8003426:	2209      	movs	r2, #9
 8003428:	601a      	str	r2, [r3, #0]
  return 0;
 800342a:	2300      	movs	r3, #0
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <_write>:

int _write(int fd, char* ptr, int len) {
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d002      	beq.n	800344c <_write+0x18>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d114      	bne.n	8003476 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <_write+0x58>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	b29a      	uxth	r2, r3
 8003454:	2517      	movs	r5, #23
 8003456:	197c      	adds	r4, r7, r5
 8003458:	2301      	movs	r3, #1
 800345a:	425b      	negs	r3, r3
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	f002 fc47 	bl	8005cf0 <HAL_UART_Transmit>
 8003462:	0003      	movs	r3, r0
 8003464:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8003466:	197b      	adds	r3, r7, r5
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <_write+0x3e>
      return len;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e008      	b.n	8003484 <_write+0x50>
    else
      return EIO;
 8003472:	2305      	movs	r3, #5
 8003474:	e006      	b.n	8003484 <_write+0x50>
  }
  errno = EBADF;
 8003476:	f004 fddf 	bl	8008038 <__errno>
 800347a:	0003      	movs	r3, r0
 800347c:	2209      	movs	r2, #9
 800347e:	601a      	str	r2, [r3, #0]
  return -1;
 8003480:	2301      	movs	r3, #1
 8003482:	425b      	negs	r3, r3
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bdb0      	pop	{r4, r5, r7, pc}
 800348c:	20000e3c 	.word	0x20000e3c

08003490 <_close>:

int _close(int fd) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db04      	blt.n	80034a8 <_close+0x18>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	dc01      	bgt.n	80034a8 <_close+0x18>
    return 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e006      	b.n	80034b6 <_close+0x26>

  errno = EBADF;
 80034a8:	f004 fdc6 	bl	8008038 <__errno>
 80034ac:	0003      	movs	r3, r0
 80034ae:	2209      	movs	r2, #9
 80034b0:	601a      	str	r2, [r3, #0]
  return -1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	425b      	negs	r3, r3
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}

080034be <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80034ca:	f004 fdb5 	bl	8008038 <__errno>
 80034ce:	0003      	movs	r3, r0
 80034d0:	2209      	movs	r2, #9
 80034d2:	601a      	str	r2, [r3, #0]
  return -1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	425b      	negs	r3, r3
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_read>:

int _read(int fd, char* ptr, int len) {
 80034e0:	b5b0      	push	{r4, r5, r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <_read+0x50>)
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	2517      	movs	r5, #23
 80034f8:	197c      	adds	r4, r7, r5
 80034fa:	2301      	movs	r3, #1
 80034fc:	425b      	negs	r3, r3
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	2201      	movs	r2, #1
 8003502:	f002 fc91 	bl	8005e28 <HAL_UART_Receive>
 8003506:	0003      	movs	r3, r0
 8003508:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800350a:	197b      	adds	r3, r7, r5
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <_read+0x36>
      return 1;
 8003512:	2301      	movs	r3, #1
 8003514:	e008      	b.n	8003528 <_read+0x48>
    else
      return EIO;
 8003516:	2305      	movs	r3, #5
 8003518:	e006      	b.n	8003528 <_read+0x48>
  }
  errno = EBADF;
 800351a:	f004 fd8d 	bl	8008038 <__errno>
 800351e:	0003      	movs	r3, r0
 8003520:	2209      	movs	r2, #9
 8003522:	601a      	str	r2, [r3, #0]
  return -1;
 8003524:	2301      	movs	r3, #1
 8003526:	425b      	negs	r3, r3
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b006      	add	sp, #24
 800352e:	bdb0      	pop	{r4, r5, r7, pc}
 8003530:	20000e3c 	.word	0x20000e3c

08003534 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db08      	blt.n	8003556 <_fstat+0x22>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	dc05      	bgt.n	8003556 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	0192      	lsls	r2, r2, #6
 8003550:	605a      	str	r2, [r3, #4]
    return 0;
 8003552:	2300      	movs	r3, #0
 8003554:	e005      	b.n	8003562 <_fstat+0x2e>
  }

  errno = EBADF;
 8003556:	f004 fd6f 	bl	8008038 <__errno>
 800355a:	0003      	movs	r3, r0
 800355c:	2209      	movs	r2, #9
 800355e:	601a      	str	r2, [r3, #0]
  return 0;
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_MspInit+0x44>)
 8003574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_MspInit+0x44>)
 8003578:	2101      	movs	r1, #1
 800357a:	430a      	orrs	r2, r1
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <HAL_MspInit+0x44>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2201      	movs	r2, #1
 8003584:	4013      	ands	r3, r2
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_MspInit+0x44>)
 800358c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358e:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_MspInit+0x44>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0549      	lsls	r1, r1, #21
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_MspInit+0x44>)
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	4013      	ands	r3, r2
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	40021000 	.word	0x40021000

080035b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b097      	sub	sp, #92	; 0x5c
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035bc:	240c      	movs	r4, #12
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	0018      	movs	r0, r3
 80035c2:	234c      	movs	r3, #76	; 0x4c
 80035c4:	001a      	movs	r2, r3
 80035c6:	2100      	movs	r1, #0
 80035c8:	f004 fd69 	bl	800809e <memset>
  if(htim_base->Instance==TIM1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_TIM_Base_MspInit+0x84>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12c      	bne.n	8003630 <HAL_TIM_Base_MspInit+0x7c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	0392      	lsls	r2, r2, #14
 80035dc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 fc2c 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80035f0:	f7ff fe2e 	bl	8003250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_TIM_Base_MspInit+0x88>)
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_TIM_Base_MspInit+0x88>)
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	0109      	lsls	r1, r1, #4
 80035fe:	430a      	orrs	r2, r1
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_TIM_Base_MspInit+0x88>)
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4013      	ands	r3, r2
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003610:	2200      	movs	r2, #0
 8003612:	2100      	movs	r1, #0
 8003614:	200d      	movs	r0, #13
 8003616:	f000 faeb 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800361a:	200d      	movs	r0, #13
 800361c:	f000 fafd 	bl	8003c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003620:	2200      	movs	r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	200e      	movs	r0, #14
 8003626:	f000 fae3 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800362a:	200e      	movs	r0, #14
 800362c:	f000 faf5 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b017      	add	sp, #92	; 0x5c
 8003636:	bd90      	pop	{r4, r7, pc}
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b09f      	sub	sp, #124	; 0x7c
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	2364      	movs	r3, #100	; 0x64
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	0018      	movs	r0, r3
 800364e:	2314      	movs	r3, #20
 8003650:	001a      	movs	r2, r3
 8003652:	2100      	movs	r1, #0
 8003654:	f004 fd23 	bl	800809e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003658:	2418      	movs	r4, #24
 800365a:	193b      	adds	r3, r7, r4
 800365c:	0018      	movs	r0, r3
 800365e:	234c      	movs	r3, #76	; 0x4c
 8003660:	001a      	movs	r2, r3
 8003662:	2100      	movs	r1, #0
 8003664:	f004 fd1b 	bl	800809e <memset>
  if(huart->Instance==USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_UART_MspInit+0x164>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d147      	bne.n	8003702 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2202      	movs	r2, #2
 8003676:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003678:	193b      	adds	r3, r7, r4
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367e:	193b      	adds	r3, r7, r4
 8003680:	0018      	movs	r0, r3
 8003682:	f001 fbdf 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8003686:	1e03      	subs	r3, r0, #0
 8003688:	d001      	beq.n	800368e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800368a:	f7ff fde1 	bl	8003250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800368e:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <HAL_UART_MspInit+0x168>)
 8003690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_UART_MspInit+0x168>)
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0289      	lsls	r1, r1, #10
 8003698:	430a      	orrs	r2, r1
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_UART_MspInit+0x168>)
 800369e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_UART_MspInit+0x168>)
 80036ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_UART_MspInit+0x168>)
 80036b0:	2101      	movs	r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_UART_MspInit+0x168>)
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	2201      	movs	r2, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80036c2:	2164      	movs	r1, #100	; 0x64
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2202      	movs	r2, #2
 80036ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2200      	movs	r2, #0
 80036da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2201      	movs	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	23a0      	movs	r3, #160	; 0xa0
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 fc7a 	bl	8003fe4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2100      	movs	r1, #0
 80036f4:	201c      	movs	r0, #28
 80036f6:	f000 fa7b 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 80036fa:	201c      	movs	r0, #28
 80036fc:	f000 fa8d 	bl	8003c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003700:	e04c      	b.n	800379c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_UART_MspInit+0x16c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d147      	bne.n	800379c <HAL_UART_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800370c:	2118      	movs	r1, #24
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2204      	movs	r2, #4
 8003712:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800371a:	187b      	adds	r3, r7, r1
 800371c:	0018      	movs	r0, r3
 800371e:	f001 fb91 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8003726:	f7ff fd93 	bl	8003250 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <HAL_UART_MspInit+0x168>)
 800372c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_UART_MspInit+0x168>)
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	02c9      	lsls	r1, r1, #11
 8003734:	430a      	orrs	r2, r1
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_UART_MspInit+0x168>)
 800373a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	02db      	lsls	r3, r3, #11
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_UART_MspInit+0x168>)
 8003748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_UART_MspInit+0x168>)
 800374c:	2104      	movs	r1, #4
 800374e:	430a      	orrs	r2, r1
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_UART_MspInit+0x168>)
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	2204      	movs	r2, #4
 8003758:	4013      	ands	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 800375e:	2164      	movs	r1, #100	; 0x64
 8003760:	187b      	adds	r3, r7, r1
 8003762:	2281      	movs	r2, #129	; 0x81
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2202      	movs	r2, #2
 800376c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003780:	187b      	adds	r3, r7, r1
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <HAL_UART_MspInit+0x170>)
 8003784:	0019      	movs	r1, r3
 8003786:	0010      	movs	r0, r2
 8003788:	f000 fc2c 	bl	8003fe4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	201d      	movs	r0, #29
 8003792:	f000 fa2d 	bl	8003bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8003796:	201d      	movs	r0, #29
 8003798:	f000 fa3f 	bl	8003c1a <HAL_NVIC_EnableIRQ>
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b01f      	add	sp, #124	; 0x7c
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	40004400 	.word	0x40004400
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40004800 	.word	0x40004800
 80037b0:	50000800 	.word	0x50000800

080037b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <NMI_Handler+0x4>

080037ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037be:	e7fe      	b.n	80037be <HardFault_Handler+0x4>

080037c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d8:	f000 f90c 	bl	80039f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RST_Pin);
 80037e6:	2020      	movs	r0, #32
 80037e8:	f000 fda2 	bl	8004330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80037fa:	0018      	movs	r0, r3
 80037fc:	f001 fe46 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000a84 	.word	0x20000a84

0800380c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <TIM1_CC_IRQHandler+0x14>)
 8003812:	0018      	movs	r0, r3
 8003814:	f001 fe3a 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	20000a84 	.word	0x20000a84

08003824 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <USART2_LPUART2_IRQHandler+0x14>)
 800382a:	0018      	movs	r0, r3
 800382c:	f002 fbde 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000ad0 	.word	0x20000ad0

0800383c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fbd2 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	20000b64 	.word	0x20000b64

08003854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <_sbrk+0x5c>)
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <_sbrk+0x60>)
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <_sbrk+0x64>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <_sbrk+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003884:	f004 fbd8 	bl	8008038 <__errno>
 8003888:	0003      	movs	r3, r0
 800388a:	220c      	movs	r2, #12
 800388c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388e:	2301      	movs	r3, #1
 8003890:	425b      	negs	r3, r3
 8003892:	e009      	b.n	80038a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	18d2      	adds	r2, r2, r3
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <_sbrk+0x64>)
 80038a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b006      	add	sp, #24
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20024000 	.word	0x20024000
 80038b4:	00000400 	.word	0x00000400
 80038b8:	20000e40 	.word	0x20000e40
 80038bc:	20000e78 	.word	0x20000e78

080038c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038cc:	480d      	ldr	r0, [pc, #52]	; (8003904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038d0:	f7ff fff6 	bl	80038c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <LoopForever+0x6>)
  ldr r1, =_edata
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <LoopForever+0xa>)
  ldr r2, =_sidata
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <LoopForever+0xe>)
  movs r3, #0
 80038da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038dc:	e002      	b.n	80038e4 <LoopCopyDataInit>

080038de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e2:	3304      	adds	r3, #4

080038e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e8:	d3f9      	bcc.n	80038de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038ec:	4c0a      	ldr	r4, [pc, #40]	; (8003918 <LoopForever+0x16>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f0:	e001      	b.n	80038f6 <LoopFillZerobss>

080038f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f4:	3204      	adds	r2, #4

080038f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f8:	d3fb      	bcc.n	80038f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80038fa:	f004 fba3 	bl	8008044 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80038fe:	f7ff f9c1 	bl	8002c84 <main>

08003902 <LoopForever>:

LoopForever:
  b LoopForever
 8003902:	e7fe      	b.n	8003902 <LoopForever>
  ldr   r0, =_estack
 8003904:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003908:	20000400 	.word	0x20000400
  ldr r1, =_edata
 800390c:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8003910:	0800b954 	.word	0x0800b954
  ldr r2, =_sbss
 8003914:	20000668 	.word	0x20000668
  ldr r4, =_ebss
 8003918:	20000e74 	.word	0x20000e74

0800391c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800391c:	e7fe      	b.n	800391c <ADC1_COMP_IRQHandler>
	...

08003920 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_Init+0x3c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_Init+0x3c>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800393a:	2000      	movs	r0, #0
 800393c:	f000 f810 	bl	8003960 <HAL_InitTick>
 8003940:	1e03      	subs	r3, r0, #0
 8003942:	d003      	beq.n	800394c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e001      	b.n	8003950 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800394c:	f7ff fe0e 	bl	800356c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003950:	1dfb      	adds	r3, r7, #7
 8003952:	781b      	ldrb	r3, [r3, #0]
}
 8003954:	0018      	movs	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_InitTick+0x88>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02b      	beq.n	80039d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003978:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_InitTick+0x8c>)
 800397a:	681c      	ldr	r4, [r3, #0]
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_InitTick+0x88>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	0019      	movs	r1, r3
 8003982:	23fa      	movs	r3, #250	; 0xfa
 8003984:	0098      	lsls	r0, r3, #2
 8003986:	f7fc fbdb 	bl	8000140 <__udivsi3>
 800398a:	0003      	movs	r3, r0
 800398c:	0019      	movs	r1, r3
 800398e:	0020      	movs	r0, r4
 8003990:	f7fc fbd6 	bl	8000140 <__udivsi3>
 8003994:	0003      	movs	r3, r0
 8003996:	0018      	movs	r0, r3
 8003998:	f000 f953 	bl	8003c42 <HAL_SYSTICK_Config>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d112      	bne.n	80039c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d80a      	bhi.n	80039bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	2301      	movs	r3, #1
 80039aa:	425b      	negs	r3, r3
 80039ac:	2200      	movs	r2, #0
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 f91e 	bl	8003bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_InitTick+0x90>)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e00d      	b.n	80039d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80039bc:	230f      	movs	r3, #15
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e008      	b.n	80039d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039c6:	230f      	movs	r3, #15
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039d0:	230f      	movs	r3, #15
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039d8:	230f      	movs	r3, #15
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	781b      	ldrb	r3, [r3, #0]
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b005      	add	sp, #20
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20000408 	.word	0x20000408
 80039ec:	20000400 	.word	0x20000400
 80039f0:	20000404 	.word	0x20000404

080039f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_IncTick+0x1c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	001a      	movs	r2, r3
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_IncTick+0x20>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	18d2      	adds	r2, r2, r3
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_IncTick+0x20>)
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	20000408 	.word	0x20000408
 8003a14:	20000e44 	.word	0x20000e44

08003a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a1c:	4b02      	ldr	r3, [pc, #8]	; (8003a28 <HAL_GetTick+0x10>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	20000e44 	.word	0x20000e44

08003a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3301      	adds	r3, #1
 8003a44:	d005      	beq.n	8003a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_Delay+0x44>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	f7ff ffe0 	bl	8003a18 <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8f7      	bhi.n	8003a54 <HAL_Delay+0x28>
  {
  }
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	20000408 	.word	0x20000408

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b7f      	cmp	r3, #127	; 0x7f
 8003a86:	d809      	bhi.n	8003a9c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	231f      	movs	r3, #31
 8003a90:	401a      	ands	r2, r3
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_EnableIRQ+0x30>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	4091      	lsls	r1, r2
 8003a98:	000a      	movs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	e000e100 	.word	0xe000e100

08003aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	0002      	movs	r2, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	1dfb      	adds	r3, r7, #7
 8003ab4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b7f      	cmp	r3, #127	; 0x7f
 8003abc:	d828      	bhi.n	8003b10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <__NVIC_SetPriority+0xd4>)
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	33c0      	adds	r3, #192	; 0xc0
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	589b      	ldr	r3, [r3, r2]
 8003ace:	1dfa      	adds	r2, r7, #7
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	00d2      	lsls	r2, r2, #3
 8003ada:	21ff      	movs	r1, #255	; 0xff
 8003adc:	4091      	lsls	r1, r2
 8003ade:	000a      	movs	r2, r1
 8003ae0:	43d2      	mvns	r2, r2
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	401a      	ands	r2, r3
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	0018      	movs	r0, r3
 8003af4:	2303      	movs	r3, #3
 8003af6:	4003      	ands	r3, r0
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003afc:	481f      	ldr	r0, [pc, #124]	; (8003b7c <__NVIC_SetPriority+0xd4>)
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	430a      	orrs	r2, r1
 8003b08:	33c0      	adds	r3, #192	; 0xc0
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003b0e:	e031      	b.n	8003b74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <__NVIC_SetPriority+0xd8>)
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	0019      	movs	r1, r3
 8003b18:	230f      	movs	r3, #15
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	3b08      	subs	r3, #8
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	3306      	adds	r3, #6
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	18d3      	adds	r3, r2, r3
 8003b26:	3304      	adds	r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1dfa      	adds	r2, r7, #7
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	0011      	movs	r1, r2
 8003b30:	2203      	movs	r2, #3
 8003b32:	400a      	ands	r2, r1
 8003b34:	00d2      	lsls	r2, r2, #3
 8003b36:	21ff      	movs	r1, #255	; 0xff
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	43d2      	mvns	r2, r2
 8003b3e:	401a      	ands	r2, r3
 8003b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	401a      	ands	r2, r3
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	2303      	movs	r3, #3
 8003b52:	4003      	ands	r3, r0
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b58:	4809      	ldr	r0, [pc, #36]	; (8003b80 <__NVIC_SetPriority+0xd8>)
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	001c      	movs	r4, r3
 8003b60:	230f      	movs	r3, #15
 8003b62:	4023      	ands	r3, r4
 8003b64:	3b08      	subs	r3, #8
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	18c3      	adds	r3, r0, r3
 8003b70:	3304      	adds	r3, #4
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b003      	add	sp, #12
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	e000e100 	.word	0xe000e100
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003b88:	f3bf 8f4f 	dsb	sy
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <__NVIC_SystemReset+0x1c>)
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <__NVIC_SystemReset+0x20>)
 8003b92:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b94:	f3bf 8f4f 	dsb	sy
}
 8003b98:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	e7fd      	b.n	8003b9a <__NVIC_SystemReset+0x16>
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	05fa0004 	.word	0x05fa0004

08003ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1e5a      	subs	r2, r3, #1
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	045b      	lsls	r3, r3, #17
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d301      	bcc.n	8003bc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e010      	b.n	8003be2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <SysTick_Config+0x44>)
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bc8:	2301      	movs	r3, #1
 8003bca:	425b      	negs	r3, r3
 8003bcc:	2103      	movs	r1, #3
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff ff6a 	bl	8003aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SysTick_Config+0x44>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <SysTick_Config+0x44>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	1c02      	adds	r2, r0, #0
 8003c00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7ff ff4b 	bl	8003aa8 <__NVIC_SetPriority>
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	0002      	movs	r2, r0
 8003c22:	1dfb      	adds	r3, r7, #7
 8003c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c26:	1dfb      	adds	r3, r7, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff ff21 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003c3e:	f7ff ffa1 	bl	8003b84 <__NVIC_SystemReset>

08003c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7ff ffab 	bl	8003ba8 <SysTick_Config>
 8003c52:	0003      	movs	r3, r0
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e04f      	b.n	8003d0e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2225      	movs	r2, #37	; 0x25
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d008      	beq.n	8003c8c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e040      	b.n	8003d0e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	210e      	movs	r1, #14
 8003c98:	438a      	bics	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	491c      	ldr	r1, [pc, #112]	; (8003d18 <HAL_DMA_Abort+0xbc>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	221c      	movs	r2, #28
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4091      	lsls	r1, r2
 8003ccc:	000a      	movs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	490a      	ldr	r1, [pc, #40]	; (8003d18 <HAL_DMA_Abort+0xbc>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cfa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2225      	movs	r2, #37	; 0x25
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	fffffeff 	.word	0xfffffeff

08003d1c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	210f      	movs	r1, #15
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2225      	movs	r2, #37	; 0x25
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d006      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e048      	b.n	8003dd8 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	210e      	movs	r1, #14
 8003d52:	438a      	bics	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2101      	movs	r1, #1
 8003d62:	438a      	bics	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	491d      	ldr	r1, [pc, #116]	; (8003de8 <HAL_DMA_Abort_IT+0xcc>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	221c      	movs	r2, #28
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2101      	movs	r1, #1
 8003d84:	4091      	lsls	r1, r2
 8003d86:	000a      	movs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00c      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	4910      	ldr	r1, [pc, #64]	; (8003de8 <HAL_DMA_Abort_IT+0xcc>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003db4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2225      	movs	r2, #37	; 0x25
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2224      	movs	r2, #36	; 0x24
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	0010      	movs	r0, r2
 8003dd6:	4798      	blx	r3
    }
  }
  return status;
 8003dd8:	230f      	movs	r3, #15
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	781b      	ldrb	r3, [r3, #0]
}
 8003dde:	0018      	movs	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	fffffeff 	.word	0xfffffeff

08003dec <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603a      	str	r2, [r7, #0]
 8003df8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dfa:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <HAL_FLASH_Program+0x94>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_FLASH_Program+0x1a>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e038      	b.n	8003e78 <HAL_FLASH_Program+0x8c>
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <HAL_FLASH_Program+0x94>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_FLASH_Program+0x94>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e12:	2517      	movs	r5, #23
 8003e14:	197c      	adds	r4, r7, r5
 8003e16:	23fa      	movs	r3, #250	; 0xfa
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f874 	bl	8003f08 <FLASH_WaitForLastOperation>
 8003e20:	0003      	movs	r3, r0
 8003e22:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003e24:	197b      	adds	r3, r7, r5
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11f      	bne.n	8003e6c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d106      	bne.n	8003e40 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	0008      	movs	r0, r1
 8003e3a:	f000 f8b3 	bl	8003fa4 <FLASH_Program_DoubleWord>
 8003e3e:	e005      	b.n	8003e4c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f007 f872 	bl	800af30 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e4c:	2317      	movs	r3, #23
 8003e4e:	18fc      	adds	r4, r7, r3
 8003e50:	23fa      	movs	r3, #250	; 0xfa
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 f857 	bl	8003f08 <FLASH_WaitForLastOperation>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_FLASH_Program+0x98>)
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43d9      	mvns	r1, r3
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <HAL_FLASH_Program+0x98>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <HAL_FLASH_Program+0x94>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003e72:	2317      	movs	r3, #23
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	781b      	ldrb	r3, [r3, #0]
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e80:	20000e48 	.word	0x20000e48
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	1dfb      	adds	r3, r7, #7
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_FLASH_Unlock+0x3c>)
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da0c      	bge.n	8003eb6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_FLASH_Unlock+0x3c>)
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <HAL_FLASH_Unlock+0x40>)
 8003ea0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_FLASH_Unlock+0x3c>)
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <HAL_FLASH_Unlock+0x44>)
 8003ea6:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_FLASH_Unlock+0x3c>)
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da02      	bge.n	8003eb6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003eb6:	1dfb      	adds	r3, r7, #7
 8003eb8:	781b      	ldrb	r3, [r3, #0]
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b002      	add	sp, #8
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	40022000 	.word	0x40022000
 8003ec8:	45670123 	.word	0x45670123
 8003ecc:	cdef89ab 	.word	0xcdef89ab

08003ed0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ed6:	1dfb      	adds	r3, r7, #7
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_FLASH_Lock+0x34>)
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_FLASH_Lock+0x34>)
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	0609      	lsls	r1, r1, #24
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_FLASH_Lock+0x34>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da02      	bge.n	8003ef8 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8003ef2:	1dfb      	adds	r3, r7, #7
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40022000 	.word	0x40022000

08003f08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8003f10:	f7ff fd82 	bl	8003a18 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8003f1c:	23c0      	movs	r3, #192	; 0xc0
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8003f22:	e007      	b.n	8003f34 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8003f24:	f7ff fd78 	bl	8003a18 <HAL_GetTick>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d801      	bhi.n	8003f34 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e02a      	b.n	8003f8a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8003f34:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <FLASH_WaitForLastOperation+0x8c>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d1f2      	bne.n	8003f24 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <FLASH_WaitForLastOperation+0x8c>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <FLASH_WaitForLastOperation+0x90>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <FLASH_WaitForLastOperation+0x8c>)
 8003f4a:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <FLASH_WaitForLastOperation+0x94>)
 8003f4c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <FLASH_WaitForLastOperation+0x98>)
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e015      	b.n	8003f8a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8003f5e:	f7ff fd5b 	bl	8003a18 <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003f6a:	e007      	b.n	8003f7c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8003f6c:	f7ff fd54 	bl	8003a18 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d801      	bhi.n	8003f7c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e006      	b.n	8003f8a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <FLASH_WaitForLastOperation+0x8c>)
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	02db      	lsls	r3, r3, #11
 8003f84:	4013      	ands	r3, r2
 8003f86:	d1f1      	bne.n	8003f6c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40022000 	.word	0x40022000
 8003f98:	0000c3fa 	.word	0x0000c3fa
 8003f9c:	0008c3fb 	.word	0x0008c3fb
 8003fa0:	20000e48 	.word	0x20000e48

08003fa4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	603a      	str	r2, [r7, #0]
 8003fae:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <FLASH_Program_DoubleWord+0x3c>)
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <FLASH_Program_DoubleWord+0x3c>)
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003fc2:	f3bf 8f6f 	isb	sy
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	001c      	movs	r4, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	001d      	movs	r5, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	0022      	movs	r2, r4
 8003fd6:	601a      	str	r2, [r3, #0]
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b004      	add	sp, #16
 8003fde:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe0:	40022000 	.word	0x40022000

08003fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff2:	e14d      	b.n	8004290 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4091      	lsls	r1, r2
 8003ffe:	000a      	movs	r2, r1
 8004000:	4013      	ands	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d100      	bne.n	800400c <HAL_GPIO_Init+0x28>
 800400a:	e13e      	b.n	800428a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	4013      	ands	r3, r2
 8004014:	2b01      	cmp	r3, #1
 8004016:	d005      	beq.n	8004024 <HAL_GPIO_Init+0x40>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	4013      	ands	r3, r2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d130      	bne.n	8004086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	409a      	lsls	r2, r3
 8004032:	0013      	movs	r3, r2
 8004034:	43da      	mvns	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4013      	ands	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	0013      	movs	r3, r2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405a:	2201      	movs	r2, #1
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	409a      	lsls	r2, r3
 8004060:	0013      	movs	r3, r2
 8004062:	43da      	mvns	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	2201      	movs	r2, #1
 8004072:	401a      	ands	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	4013      	ands	r3, r2
 800408e:	2b03      	cmp	r3, #3
 8004090:	d017      	beq.n	80040c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	409a      	lsls	r2, r3
 80040a0:	0013      	movs	r3, r2
 80040a2:	43da      	mvns	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	0013      	movs	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d123      	bne.n	8004116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	08da      	lsrs	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3208      	adds	r2, #8
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	58d3      	ldr	r3, [r2, r3]
 80040da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2207      	movs	r2, #7
 80040e0:	4013      	ands	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	409a      	lsls	r2, r3
 80040e8:	0013      	movs	r3, r2
 80040ea:	43da      	mvns	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2107      	movs	r1, #7
 80040fa:	400b      	ands	r3, r1
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	08da      	lsrs	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3208      	adds	r2, #8
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	6939      	ldr	r1, [r7, #16]
 8004114:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	409a      	lsls	r2, r3
 8004124:	0013      	movs	r3, r2
 8004126:	43da      	mvns	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2203      	movs	r2, #3
 8004134:	401a      	ands	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	23c0      	movs	r3, #192	; 0xc0
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4013      	ands	r3, r2
 8004154:	d100      	bne.n	8004158 <HAL_GPIO_Init+0x174>
 8004156:	e098      	b.n	800428a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004158:	4a53      	ldr	r2, [pc, #332]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	3318      	adds	r3, #24
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	589b      	ldr	r3, [r3, r2]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2203      	movs	r2, #3
 800416a:	4013      	ands	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	220f      	movs	r2, #15
 8004170:	409a      	lsls	r2, r3
 8004172:	0013      	movs	r3, r2
 8004174:	43da      	mvns	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	23a0      	movs	r3, #160	; 0xa0
 8004180:	05db      	lsls	r3, r3, #23
 8004182:	429a      	cmp	r2, r3
 8004184:	d019      	beq.n	80041ba <HAL_GPIO_Init+0x1d6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a48      	ldr	r2, [pc, #288]	; (80042ac <HAL_GPIO_Init+0x2c8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_GPIO_Init+0x1d2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a47      	ldr	r2, [pc, #284]	; (80042b0 <HAL_GPIO_Init+0x2cc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00d      	beq.n	80041b2 <HAL_GPIO_Init+0x1ce>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a46      	ldr	r2, [pc, #280]	; (80042b4 <HAL_GPIO_Init+0x2d0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <HAL_GPIO_Init+0x1ca>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a45      	ldr	r2, [pc, #276]	; (80042b8 <HAL_GPIO_Init+0x2d4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <HAL_GPIO_Init+0x1c6>
 80041a6:	2304      	movs	r3, #4
 80041a8:	e008      	b.n	80041bc <HAL_GPIO_Init+0x1d8>
 80041aa:	2305      	movs	r3, #5
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x1d8>
 80041ae:	2303      	movs	r3, #3
 80041b0:	e004      	b.n	80041bc <HAL_GPIO_Init+0x1d8>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_Init+0x1d8>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_GPIO_Init+0x1d8>
 80041ba:	2300      	movs	r3, #0
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	2103      	movs	r1, #3
 80041c0:	400a      	ands	r2, r1
 80041c2:	00d2      	lsls	r2, r2, #3
 80041c4:	4093      	lsls	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80041cc:	4936      	ldr	r1, [pc, #216]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	3318      	adds	r3, #24
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041da:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	035b      	lsls	r3, r3, #13
 80041f2:	4013      	ands	r3, r2
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004204:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43da      	mvns	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	039b      	lsls	r3, r3, #14
 800421c:	4013      	ands	r3, r2
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 8004230:	2384      	movs	r3, #132	; 0x84
 8004232:	58d3      	ldr	r3, [r2, r3]
 8004234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	43da      	mvns	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	4013      	ands	r3, r2
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004254:	4914      	ldr	r1, [pc, #80]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 8004256:	2284      	movs	r2, #132	; 0x84
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	58d3      	ldr	r3, [r2, r3]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43da      	mvns	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	025b      	lsls	r3, r3, #9
 8004276:	4013      	ands	r3, r2
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004282:	4909      	ldr	r1, [pc, #36]	; (80042a8 <HAL_GPIO_Init+0x2c4>)
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	40da      	lsrs	r2, r3
 8004298:	1e13      	subs	r3, r2, #0
 800429a:	d000      	beq.n	800429e <HAL_GPIO_Init+0x2ba>
 800429c:	e6aa      	b.n	8003ff4 <HAL_GPIO_Init+0x10>
  }
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021800 	.word	0x40021800
 80042ac:	50000400 	.word	0x50000400
 80042b0:	50000800 	.word	0x50000800
 80042b4:	50000c00 	.word	0x50000c00
 80042b8:	50001000 	.word	0x50001000

080042bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	000a      	movs	r2, r1
 80042c6:	1cbb      	adds	r3, r7, #2
 80042c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	1cba      	adds	r2, r7, #2
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	4013      	ands	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80042d6:	230f      	movs	r3, #15
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e003      	b.n	80042e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042e0:	230f      	movs	r3, #15
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80042e8:	230f      	movs	r3, #15
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	0008      	movs	r0, r1
 8004300:	0011      	movs	r1, r2
 8004302:	1cbb      	adds	r3, r7, #2
 8004304:	1c02      	adds	r2, r0, #0
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	1c7b      	adds	r3, r7, #1
 800430a:	1c0a      	adds	r2, r1, #0
 800430c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800430e:	1c7b      	adds	r3, r7, #1
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004316:	1cbb      	adds	r3, r7, #2
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800431e:	e003      	b.n	8004328 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004320:	1cbb      	adds	r3, r7, #2
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	0002      	movs	r2, r0
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	1dba      	adds	r2, r7, #6
 8004342:	8812      	ldrh	r2, [r2, #0]
 8004344:	4013      	ands	r3, r2
 8004346:	d008      	beq.n	800435a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800434a:	1dba      	adds	r2, r7, #6
 800434c:	8812      	ldrh	r2, [r2, #0]
 800434e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004350:	1dbb      	adds	r3, r7, #6
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	0018      	movs	r0, r3
 8004356:	f000 f815 	bl	8004384 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	1dba      	adds	r2, r7, #6
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	4013      	ands	r3, r2
 8004364:	d008      	beq.n	8004378 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004368:	1dba      	adds	r2, r7, #6
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	0018      	movs	r0, r3
 8004374:	f7fe f8cc 	bl	8002510 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021800 	.word	0x40021800

08004384 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d11f      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80043bc:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	0013      	movs	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4912      	ldr	r1, [pc, #72]	; (8004414 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7fb feb8 	bl	8000140 <__udivsi3>
 80043d0:	0003      	movs	r3, r0
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043d6:	e008      	b.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e009      	b.n	80043fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	401a      	ands	r2, r3
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d0ed      	beq.n	80043d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	40007000 	.word	0x40007000
 800440c:	fffff9ff 	.word	0xfffff9ff
 8004410:	20000400 	.word	0x20000400
 8004414:	000f4240 	.word	0x000f4240

08004418 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <LL_RCC_GetAPB1Prescaler+0x14>)
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	23e0      	movs	r3, #224	; 0xe0
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	4013      	ands	r3, r2
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f000 fb50 	bl	8004ae4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	4013      	ands	r3, r2
 800444c:	d100      	bne.n	8004450 <HAL_RCC_OscConfig+0x20>
 800444e:	e07c      	b.n	800454a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004450:	4bc3      	ldr	r3, [pc, #780]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2238      	movs	r2, #56	; 0x38
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445a:	4bc1      	ldr	r3, [pc, #772]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2203      	movs	r2, #3
 8004460:	4013      	ands	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d102      	bne.n	8004470 <HAL_RCC_OscConfig+0x40>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d002      	beq.n	8004476 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d10b      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004476:	4bba      	ldr	r3, [pc, #744]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4013      	ands	r3, r2
 8004480:	d062      	beq.n	8004548 <HAL_RCC_OscConfig+0x118>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d15e      	bne.n	8004548 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e32a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	025b      	lsls	r3, r3, #9
 8004496:	429a      	cmp	r2, r3
 8004498:	d107      	bne.n	80044aa <HAL_RCC_OscConfig+0x7a>
 800449a:	4bb1      	ldr	r3, [pc, #708]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4bb0      	ldr	r3, [pc, #704]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	0249      	lsls	r1, r1, #9
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e020      	b.n	80044ec <HAL_RCC_OscConfig+0xbc>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	23a0      	movs	r3, #160	; 0xa0
 80044b0:	02db      	lsls	r3, r3, #11
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d10e      	bne.n	80044d4 <HAL_RCC_OscConfig+0xa4>
 80044b6:	4baa      	ldr	r3, [pc, #680]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4ba9      	ldr	r3, [pc, #676]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	02c9      	lsls	r1, r1, #11
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	4ba6      	ldr	r3, [pc, #664]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4ba5      	ldr	r3, [pc, #660]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	0249      	lsls	r1, r1, #9
 80044ce:	430a      	orrs	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xbc>
 80044d4:	4ba2      	ldr	r3, [pc, #648]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044da:	49a2      	ldr	r1, [pc, #648]	; (8004764 <HAL_RCC_OscConfig+0x334>)
 80044dc:	400a      	ands	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	4b9f      	ldr	r3, [pc, #636]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b9e      	ldr	r3, [pc, #632]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80044e6:	49a0      	ldr	r1, [pc, #640]	; (8004768 <HAL_RCC_OscConfig+0x338>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d014      	beq.n	800451e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7ff fa90 	bl	8003a18 <HAL_GetTick>
 80044f8:	0003      	movs	r3, r0
 80044fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fe:	f7ff fa8b 	bl	8003a18 <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e2e9      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004510:	4b93      	ldr	r3, [pc, #588]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	029b      	lsls	r3, r3, #10
 8004518:	4013      	ands	r3, r2
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0xce>
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7ff fa7b 	bl	8003a18 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7ff fa76 	bl	8003a18 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2d4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453a:	4b89      	ldr	r3, [pc, #548]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	4013      	ands	r3, r2
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0xf8>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2202      	movs	r2, #2
 8004550:	4013      	ands	r3, r2
 8004552:	d100      	bne.n	8004556 <HAL_RCC_OscConfig+0x126>
 8004554:	e099      	b.n	800468a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004556:	4b82      	ldr	r3, [pc, #520]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2238      	movs	r2, #56	; 0x38
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004560:	4b7f      	ldr	r3, [pc, #508]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2203      	movs	r2, #3
 8004566:	4013      	ands	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b10      	cmp	r3, #16
 800456e:	d102      	bne.n	8004576 <HAL_RCC_OscConfig+0x146>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d002      	beq.n	800457c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d135      	bne.n	80045e8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800457c:	4b78      	ldr	r3, [pc, #480]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4013      	ands	r3, r2
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x164>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e2a7      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004594:	4b72      	ldr	r3, [pc, #456]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a74      	ldr	r2, [pc, #464]	; (800476c <HAL_RCC_OscConfig+0x33c>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d112      	bne.n	80045d6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045b0:	4b6b      	ldr	r3, [pc, #428]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x340>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	0019      	movs	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	4b68      	ldr	r3, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045c4:	4b66      	ldr	r3, [pc, #408]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0adb      	lsrs	r3, r3, #11
 80045ca:	2207      	movs	r2, #7
 80045cc:	4013      	ands	r3, r2
 80045ce:	4a69      	ldr	r2, [pc, #420]	; (8004774 <HAL_RCC_OscConfig+0x344>)
 80045d0:	40da      	lsrs	r2, r3
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x348>)
 80045d4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045d6:	4b69      	ldr	r3, [pc, #420]	; (800477c <HAL_RCC_OscConfig+0x34c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0018      	movs	r0, r3
 80045dc:	f7ff f9c0 	bl	8003960 <HAL_InitTick>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d051      	beq.n	8004688 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e27d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d030      	beq.n	8004652 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045f0:	4b5b      	ldr	r3, [pc, #364]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5e      	ldr	r2, [pc, #376]	; (8004770 <HAL_RCC_OscConfig+0x340>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b55      	ldr	r3, [pc, #340]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	0049      	lsls	r1, r1, #1
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7ff fa01 	bl	8003a18 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7ff f9fc 	bl	8003a18 <HAL_GetTick>
 8004620:	0002      	movs	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e25a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462e:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4013      	ands	r3, r2
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b49      	ldr	r3, [pc, #292]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4a4b      	ldr	r2, [pc, #300]	; (800476c <HAL_RCC_OscConfig+0x33c>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	021a      	lsls	r2, r3, #8
 800464a:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e01b      	b.n	800468a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b43      	ldr	r3, [pc, #268]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004658:	4949      	ldr	r1, [pc, #292]	; (8004780 <HAL_RCC_OscConfig+0x350>)
 800465a:	400a      	ands	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7ff f9db 	bl	8003a18 <HAL_GetTick>
 8004662:	0003      	movs	r3, r0
 8004664:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004668:	f7ff f9d6 	bl	8003a18 <HAL_GetTick>
 800466c:	0002      	movs	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e234      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4013      	ands	r3, r2
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x238>
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2208      	movs	r2, #8
 8004690:	4013      	ands	r3, r2
 8004692:	d047      	beq.n	8004724 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004694:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2238      	movs	r2, #56	; 0x38
 800469a:	4013      	ands	r3, r2
 800469c:	2b18      	cmp	r3, #24
 800469e:	d10a      	bne.n	80046b6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a4:	2202      	movs	r2, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d03c      	beq.n	8004724 <HAL_RCC_OscConfig+0x2f4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d138      	bne.n	8004724 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e216      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d019      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046c2:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046c4:	2101      	movs	r1, #1
 80046c6:	430a      	orrs	r2, r1
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7ff f9a5 	bl	8003a18 <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7ff f9a0 	bl	8003a18 <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e1fe      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e6:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	2202      	movs	r2, #2
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0f1      	beq.n	80046d4 <HAL_RCC_OscConfig+0x2a4>
 80046f0:	e018      	b.n	8004724 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 80046f8:	2101      	movs	r1, #1
 80046fa:	438a      	bics	r2, r1
 80046fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7ff f98b 	bl	8003a18 <HAL_GetTick>
 8004702:	0003      	movs	r3, r0
 8004704:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7ff f986 	bl	8003a18 <HAL_GetTick>
 800470c:	0002      	movs	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1e4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471e:	2202      	movs	r2, #2
 8004720:	4013      	ands	r3, r2
 8004722:	d1f1      	bne.n	8004708 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2204      	movs	r2, #4
 800472a:	4013      	ands	r3, r2
 800472c:	d100      	bne.n	8004730 <HAL_RCC_OscConfig+0x300>
 800472e:	e0c7      	b.n	80048c0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004730:	231f      	movs	r3, #31
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2238      	movs	r2, #56	; 0x38
 800473e:	4013      	ands	r3, r2
 8004740:	2b20      	cmp	r3, #32
 8004742:	d11f      	bne.n	8004784 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_OscConfig+0x330>)
 8004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004748:	2202      	movs	r2, #2
 800474a:	4013      	ands	r3, r2
 800474c:	d100      	bne.n	8004750 <HAL_RCC_OscConfig+0x320>
 800474e:	e0b7      	b.n	80048c0 <HAL_RCC_OscConfig+0x490>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d000      	beq.n	800475a <HAL_RCC_OscConfig+0x32a>
 8004758:	e0b2      	b.n	80048c0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e1c2      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	fffeffff 	.word	0xfffeffff
 8004768:	fffbffff 	.word	0xfffbffff
 800476c:	ffff80ff 	.word	0xffff80ff
 8004770:	ffffc7ff 	.word	0xffffc7ff
 8004774:	00f42400 	.word	0x00f42400
 8004778:	20000400 	.word	0x20000400
 800477c:	20000404 	.word	0x20000404
 8004780:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004784:	4bb5      	ldr	r3, [pc, #724]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	055b      	lsls	r3, r3, #21
 800478c:	4013      	ands	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_RCC_OscConfig+0x364>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x366>
 8004794:	2300      	movs	r3, #0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d011      	beq.n	80047be <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	4bb0      	ldr	r3, [pc, #704]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800479c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479e:	4baf      	ldr	r3, [pc, #700]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	0549      	lsls	r1, r1, #21
 80047a4:	430a      	orrs	r2, r1
 80047a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80047a8:	4bac      	ldr	r3, [pc, #688]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80047aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	055b      	lsls	r3, r3, #21
 80047b0:	4013      	ands	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80047b6:	231f      	movs	r3, #31
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047be:	4ba8      	ldr	r3, [pc, #672]	; (8004a60 <HAL_RCC_OscConfig+0x630>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d11a      	bne.n	8004800 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ca:	4ba5      	ldr	r3, [pc, #660]	; (8004a60 <HAL_RCC_OscConfig+0x630>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4ba4      	ldr	r3, [pc, #656]	; (8004a60 <HAL_RCC_OscConfig+0x630>)
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0049      	lsls	r1, r1, #1
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80047d8:	f7ff f91e 	bl	8003a18 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7ff f919 	bl	8003a18 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e177      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	4b9a      	ldr	r3, [pc, #616]	; (8004a60 <HAL_RCC_OscConfig+0x630>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4013      	ands	r3, r2
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x3e6>
 8004808:	4b94      	ldr	r3, [pc, #592]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800480a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800480c:	4b93      	ldr	r3, [pc, #588]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
 8004814:	e01c      	b.n	8004850 <HAL_RCC_OscConfig+0x420>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x408>
 800481e:	4b8f      	ldr	r3, [pc, #572]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004820:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004822:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004824:	2104      	movs	r1, #4
 8004826:	430a      	orrs	r2, r1
 8004828:	65da      	str	r2, [r3, #92]	; 0x5c
 800482a:	4b8c      	ldr	r3, [pc, #560]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800482c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800482e:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004830:	2101      	movs	r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	65da      	str	r2, [r3, #92]	; 0x5c
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0x420>
 8004838:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800483a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800483c:	4b87      	ldr	r3, [pc, #540]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800483e:	2101      	movs	r1, #1
 8004840:	438a      	bics	r2, r1
 8004842:	65da      	str	r2, [r3, #92]	; 0x5c
 8004844:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004846:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004848:	4b84      	ldr	r3, [pc, #528]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800484a:	2104      	movs	r1, #4
 800484c:	438a      	bics	r2, r1
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d014      	beq.n	8004882 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7ff f8de 	bl	8003a18 <HAL_GetTick>
 800485c:	0003      	movs	r3, r0
 800485e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004860:	e009      	b.n	8004876 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7ff f8d9 	bl	8003a18 <HAL_GetTick>
 8004866:	0002      	movs	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	4a7d      	ldr	r2, [pc, #500]	; (8004a64 <HAL_RCC_OscConfig+0x634>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e136      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004876:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x432>
 8004880:	e013      	b.n	80048aa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7ff f8c9 	bl	8003a18 <HAL_GetTick>
 8004886:	0003      	movs	r3, r0
 8004888:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800488a:	e009      	b.n	80048a0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7ff f8c4 	bl	8003a18 <HAL_GetTick>
 8004890:	0002      	movs	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	4a73      	ldr	r2, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x634>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e121      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a0:	4b6e      	ldr	r3, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80048aa:	231f      	movs	r3, #31
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80048b4:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b8:	4b68      	ldr	r3, [pc, #416]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048ba:	496b      	ldr	r1, [pc, #428]	; (8004a68 <HAL_RCC_OscConfig+0x638>)
 80048bc:	400a      	ands	r2, r1
 80048be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2220      	movs	r2, #32
 80048c6:	4013      	ands	r3, r2
 80048c8:	d039      	beq.n	800493e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	03c9      	lsls	r1, r1, #15
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7ff f89a 	bl	8003a18 <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ea:	f7ff f895 	bl	8003a18 <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0f3      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80048fc:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	4013      	ands	r3, r2
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x4ba>
 8004908:	e019      	b.n	800493e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800490a:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004910:	4956      	ldr	r1, [pc, #344]	; (8004a6c <HAL_RCC_OscConfig+0x63c>)
 8004912:	400a      	ands	r2, r1
 8004914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7ff f87f 	bl	8003a18 <HAL_GetTick>
 800491a:	0003      	movs	r3, r0
 800491c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004920:	f7ff f87a 	bl	8003a18 <HAL_GetTick>
 8004924:	0002      	movs	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0d8      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	041b      	lsls	r3, r3, #16
 800493a:	4013      	ands	r3, r2
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d100      	bne.n	8004948 <HAL_RCC_OscConfig+0x518>
 8004946:	e0cc      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004948:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2238      	movs	r2, #56	; 0x38
 800494e:	4013      	ands	r3, r2
 8004950:	2b10      	cmp	r3, #16
 8004952:	d100      	bne.n	8004956 <HAL_RCC_OscConfig+0x526>
 8004954:	e07b      	b.n	8004a4e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d156      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004964:	4942      	ldr	r1, [pc, #264]	; (8004a70 <HAL_RCC_OscConfig+0x640>)
 8004966:	400a      	ands	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7ff f855 	bl	8003a18 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7ff f850 	bl	8003a18 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0ae      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004986:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	049b      	lsls	r3, r3, #18
 800498e:	4013      	ands	r3, r2
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004992:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a37      	ldr	r2, [pc, #220]	; (8004a74 <HAL_RCC_OscConfig+0x644>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	431a      	orrs	r2, r3
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0449      	lsls	r1, r1, #17
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	0549      	lsls	r1, r1, #21
 80049de:	430a      	orrs	r2, r1
 80049e0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7ff f819 	bl	8003a18 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7ff f814 	bl	8003a18 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e072      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	049b      	lsls	r3, r3, #18
 8004a06:	4013      	ands	r3, r2
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x5bc>
 8004a0a:	e06a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a12:	4917      	ldr	r1, [pc, #92]	; (8004a70 <HAL_RCC_OscConfig+0x640>)
 8004a14:	400a      	ands	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fffe 	bl	8003a18 <HAL_GetTick>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fe fff9 	bl	8003a18 <HAL_GetTick>
 8004a26:	0002      	movs	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e057      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	049b      	lsls	r3, r3, #18
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_OscConfig+0x62c>)
 8004a46:	490c      	ldr	r1, [pc, #48]	; (8004a78 <HAL_RCC_OscConfig+0x648>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	60da      	str	r2, [r3, #12]
 8004a4c:	e049      	b.n	8004ae2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d112      	bne.n	8004a7c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e044      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
 8004a64:	00001388 	.word	0x00001388
 8004a68:	efffffff 	.word	0xefffffff
 8004a6c:	ffbfffff 	.word	0xffbfffff
 8004a70:	feffffff 	.word	0xfeffffff
 8004a74:	11c1808c 	.word	0x11c1808c
 8004a78:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCC_OscConfig+0x6bc>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2203      	movs	r2, #3
 8004a86:	401a      	ands	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d126      	bne.n	8004ade <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2270      	movs	r2, #112	; 0x70
 8004a94:	401a      	ands	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11f      	bne.n	8004ade <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	23fe      	movs	r3, #254	; 0xfe
 8004aa2:	01db      	lsls	r3, r3, #7
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d116      	bne.n	8004ade <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	23f8      	movs	r3, #248	; 0xf8
 8004ab4:	039b      	lsls	r3, r3, #14
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d10e      	bne.n	8004ade <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	23e0      	movs	r3, #224	; 0xe0
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	0f5b      	lsrs	r3, r3, #29
 8004ad4:	075a      	lsls	r2, r3, #29
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b008      	add	sp, #32
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0e9      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2207      	movs	r2, #7
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d91e      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2207      	movs	r2, #7
 8004b18:	4393      	bics	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b24:	f7fe ff78 	bl	8003a18 <HAL_GetTick>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b2c:	e009      	b.n	8004b42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2e:	f7fe ff73 	bl	8003a18 <HAL_GetTick>
 8004b32:	0002      	movs	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	4a6a      	ldr	r2, [pc, #424]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e0ca      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b42:	4b67      	ldr	r3, [pc, #412]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2207      	movs	r2, #7
 8004b48:	4013      	ands	r3, r2
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1ee      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2202      	movs	r2, #2
 8004b56:	4013      	ands	r3, r2
 8004b58:	d015      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	4013      	ands	r3, r2
 8004b62:	d006      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b64:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b5f      	ldr	r3, [pc, #380]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b6a:	21e0      	movs	r1, #224	; 0xe0
 8004b6c:	01c9      	lsls	r1, r1, #7
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b72:	4b5d      	ldr	r3, [pc, #372]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	4a5d      	ldr	r2, [pc, #372]	; (8004cec <HAL_RCC_ClockConfig+0x1fc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d057      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b98:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d12b      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e097      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb0:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	049b      	lsls	r3, r3, #18
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d11f      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e08b      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d113      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e07f      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d106      	bne.n	8004bee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be4:	2202      	movs	r2, #2
 8004be6:	4013      	ands	r3, r2
 8004be8:	d108      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e074      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bee:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e06d      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2207      	movs	r2, #7
 8004c02:	4393      	bics	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fe ff02 	bl	8003a18 <HAL_GetTick>
 8004c14:	0003      	movs	r3, r0
 8004c16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c18:	e009      	b.n	8004c2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1a:	f7fe fefd 	bl	8003a18 <HAL_GetTick>
 8004c1e:	0002      	movs	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	4a2f      	ldr	r2, [pc, #188]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e054      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2238      	movs	r2, #56	; 0x38
 8004c34:	401a      	ands	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d1ec      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2207      	movs	r2, #7
 8004c46:	4013      	ands	r3, r2
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d21e      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b24      	ldr	r3, [pc, #144]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2207      	movs	r2, #7
 8004c54:	4393      	bics	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c60:	f7fe feda 	bl	8003a18 <HAL_GetTick>
 8004c64:	0003      	movs	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c68:	e009      	b.n	8004c7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6a:	f7fe fed5 	bl	8003a18 <HAL_GetTick>
 8004c6e:	0002      	movs	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e02c      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c7e:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2207      	movs	r2, #7
 8004c84:	4013      	ands	r3, r2
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1ee      	bne.n	8004c6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2204      	movs	r2, #4
 8004c92:	4013      	ands	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_RCC_ClockConfig+0x200>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004caa:	f000 f829 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cae:	0001      	movs	r1, r0
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	401a      	ands	r2, r3
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_RCC_ClockConfig+0x204>)
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	58d3      	ldr	r3, [r2, r3]
 8004cc0:	221f      	movs	r2, #31
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	000a      	movs	r2, r1
 8004cc6:	40da      	lsrs	r2, r3
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x208>)
 8004cca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_ClockConfig+0x20c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe fe45 	bl	8003960 <HAL_InitTick>
 8004cd6:	0003      	movs	r3, r0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b004      	add	sp, #16
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40022000 	.word	0x40022000
 8004ce4:	00001388 	.word	0x00001388
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	fffff0ff 	.word	0xfffff0ff
 8004cf0:	ffff8fff 	.word	0xffff8fff
 8004cf4:	0800b4e0 	.word	0x0800b4e0
 8004cf8:	20000400 	.word	0x20000400
 8004cfc:	20000404 	.word	0x20000404

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2238      	movs	r2, #56	; 0x38
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d10f      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d10:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0adb      	lsrs	r3, r3, #11
 8004d16:	2207      	movs	r2, #7
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	0013      	movs	r3, r2
 8004d20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	4835      	ldr	r0, [pc, #212]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d26:	f7fb fa0b 	bl	8000140 <__udivsi3>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e05d      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d30:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2238      	movs	r2, #56	; 0x38
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d3c:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e054      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d42:	4b2d      	ldr	r3, [pc, #180]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2238      	movs	r2, #56	; 0x38
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d138      	bne.n	8004dc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2203      	movs	r2, #3
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	2207      	movs	r2, #7
 8004d60:	4013      	ands	r3, r2
 8004d62:	3301      	adds	r3, #1
 8004d64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d10d      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	4824      	ldr	r0, [pc, #144]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d70:	f7fb f9e6 	bl	8000140 <__udivsi3>
 8004d74:	0003      	movs	r3, r0
 8004d76:	0019      	movs	r1, r3
 8004d78:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	227f      	movs	r2, #127	; 0x7f
 8004d80:	4013      	ands	r3, r2
 8004d82:	434b      	muls	r3, r1
 8004d84:	617b      	str	r3, [r7, #20]
        break;
 8004d86:	e00d      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	481c      	ldr	r0, [pc, #112]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d8c:	f7fb f9d8 	bl	8000140 <__udivsi3>
 8004d90:	0003      	movs	r3, r0
 8004d92:	0019      	movs	r1, r3
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	227f      	movs	r2, #127	; 0x7f
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	434b      	muls	r3, r1
 8004da0:	617b      	str	r3, [r7, #20]
        break;
 8004da2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	0f5b      	lsrs	r3, r3, #29
 8004daa:	2207      	movs	r2, #7
 8004dac:	4013      	ands	r3, r2
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	6978      	ldr	r0, [r7, #20]
 8004db6:	f7fb f9c3 	bl	8000140 <__udivsi3>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	e015      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2238      	movs	r2, #56	; 0x38
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d103      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2238      	movs	r2, #56	; 0x38
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b18      	cmp	r3, #24
 8004dde:	d103      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004de0:	23fa      	movs	r3, #250	; 0xfa
 8004de2:	01db      	lsls	r3, r3, #7
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e001      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004dec:	693b      	ldr	r3, [r7, #16]
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b006      	add	sp, #24
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	007a1200 	.word	0x007a1200

08004e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	20000400 	.word	0x20000400

08004e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e18:	b5b0      	push	{r4, r5, r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e1c:	f7ff fff2 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e20:	0004      	movs	r4, r0
 8004e22:	f7ff faf9 	bl	8004418 <LL_RCC_GetAPB1Prescaler>
 8004e26:	0003      	movs	r3, r0
 8004e28:	0b1a      	lsrs	r2, r3, #12
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	58d3      	ldr	r3, [r2, r3]
 8004e30:	221f      	movs	r2, #31
 8004e32:	4013      	ands	r3, r2
 8004e34:	40dc      	lsrs	r4, r3
 8004e36:	0023      	movs	r3, r4
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	0800b520 	.word	0x0800b520

08004e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e4c:	2313      	movs	r3, #19
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e54:	2312      	movs	r3, #18
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	4013      	ands	r3, r2
 8004e66:	d100      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e68:	e0ad      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2011      	movs	r0, #17
 8004e6c:	183b      	adds	r3, r7, r0
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	055b      	lsls	r3, r3, #21
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d110      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7e:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0549      	lsls	r1, r1, #21
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e8c:	4b40      	ldr	r3, [pc, #256]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	055b      	lsls	r3, r3, #21
 8004e94:	4013      	ands	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9a:	183b      	adds	r3, r7, r0
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea0:	4b3c      	ldr	r3, [pc, #240]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	0049      	lsls	r1, r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eae:	f7fe fdb3 	bl	8003a18 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fe fdae 	bl	8003a18 <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d904      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004ec6:	2313      	movs	r3, #19
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2203      	movs	r2, #3
 8004ecc:	701a      	strb	r2, [r3, #0]
        break;
 8004ece:	e005      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed0:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d0ed      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004edc:	2313      	movs	r3, #19
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d15e      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eea:	23c0      	movs	r3, #192	; 0xc0
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4013      	ands	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d014      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	4a24      	ldr	r2, [pc, #144]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f0c:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f10:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	0249      	lsls	r1, r1, #9
 8004f16:	430a      	orrs	r2, r1
 8004f18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f1e:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f20:	491e      	ldr	r1, [pc, #120]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004f22:	400a      	ands	r2, r1
 8004f24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4013      	ands	r3, r2
 8004f32:	d016      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fe fd70 	bl	8003a18 <HAL_GetTick>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3c:	e00c      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fe fd6b 	bl	8003a18 <HAL_GetTick>
 8004f42:	0002      	movs	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d904      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f4e:	2313      	movs	r3, #19
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	2203      	movs	r2, #3
 8004f54:	701a      	strb	r2, [r3, #0]
            break;
 8004f56:	e004      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d0ed      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f62:	2313      	movs	r3, #19
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	0019      	movs	r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f80:	e016      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f82:	2312      	movs	r3, #18
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	2213      	movs	r2, #19
 8004f88:	18ba      	adds	r2, r7, r2
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e00f      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
 8004f98:	fffffcff 	.word	0xfffffcff
 8004f9c:	fffeffff 	.word	0xfffeffff
 8004fa0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa4:	2312      	movs	r3, #18
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2213      	movs	r2, #19
 8004faa:	18ba      	adds	r2, r7, r2
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fb0:	2311      	movs	r3, #17
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4bb6      	ldr	r3, [pc, #728]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fbe:	4bb5      	ldr	r3, [pc, #724]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc0:	49b5      	ldr	r1, [pc, #724]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd0:	4bb0      	ldr	r3, [pc, #704]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4393      	bics	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4bad      	ldr	r3, [pc, #692]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fee:	4ba9      	ldr	r3, [pc, #676]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	4393      	bics	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	4ba5      	ldr	r3, [pc, #660]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ffe:	430a      	orrs	r2, r1
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2204      	movs	r2, #4
 8005008:	4013      	ands	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800500c:	4ba1      	ldr	r3, [pc, #644]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	2230      	movs	r2, #48	; 0x30
 8005012:	4393      	bics	r3, r2
 8005014:	0019      	movs	r1, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	4b9e      	ldr	r3, [pc, #632]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501c:	430a      	orrs	r2, r1
 800501e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2210      	movs	r2, #16
 8005026:	4013      	ands	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800502a:	4b9a      	ldr	r3, [pc, #616]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	4a9b      	ldr	r2, [pc, #620]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005030:	4013      	ands	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b96      	ldr	r3, [pc, #600]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503a:	430a      	orrs	r2, r1
 800503c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	015b      	lsls	r3, r3, #5
 8005046:	4013      	ands	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800504a:	4b92      	ldr	r3, [pc, #584]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	4a94      	ldr	r2, [pc, #592]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005050:	4013      	ands	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	4b8e      	ldr	r3, [pc, #568]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800505a:	430a      	orrs	r2, r1
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4013      	ands	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506a:	4b8a      	ldr	r3, [pc, #552]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	4a8d      	ldr	r2, [pc, #564]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005078:	4b86      	ldr	r3, [pc, #536]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800507a:	430a      	orrs	r2, r1
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4013      	ands	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800508a:	4b82      	ldr	r3, [pc, #520]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	4a86      	ldr	r2, [pc, #536]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005090:	4013      	ands	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4b7e      	ldr	r3, [pc, #504]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800509a:	430a      	orrs	r2, r1
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2220      	movs	r2, #32
 80050a4:	4013      	ands	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a8:	4b7a      	ldr	r3, [pc, #488]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	4a7f      	ldr	r2, [pc, #508]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	4b77      	ldr	r3, [pc, #476]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b8:	430a      	orrs	r2, r1
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2240      	movs	r2, #64	; 0x40
 80050c2:	4013      	ands	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c6:	4b73      	ldr	r3, [pc, #460]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ca:	4a79      	ldr	r2, [pc, #484]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d6:	430a      	orrs	r2, r1
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4013      	ands	r3, r2
 80050e4:	d015      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e6:	4b6b      	ldr	r3, [pc, #428]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	0899      	lsrs	r1, r3, #2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f2:	4b68      	ldr	r3, [pc, #416]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f4:	430a      	orrs	r2, r1
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	05db      	lsls	r3, r3, #23
 8005100:	429a      	cmp	r2, r3
 8005102:	d106      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005104:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b62      	ldr	r3, [pc, #392]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	0249      	lsls	r1, r1, #9
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	4013      	ands	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800511e:	4b5d      	ldr	r3, [pc, #372]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	2240      	movs	r2, #64	; 0x40
 8005124:	4393      	bics	r3, r2
 8005126:	0019      	movs	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800512e:	430a      	orrs	r2, r1
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	039b      	lsls	r3, r3, #14
 800513a:	4013      	ands	r3, r2
 800513c:	d016      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800513e:	4b55      	ldr	r3, [pc, #340]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	4a5c      	ldr	r2, [pc, #368]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005144:	4013      	ands	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514c:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800514e:	430a      	orrs	r2, r1
 8005150:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	03db      	lsls	r3, r3, #15
 800515a:	429a      	cmp	r2, r3
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800515e:	4b4d      	ldr	r3, [pc, #308]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	4b4c      	ldr	r3, [pc, #304]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	0449      	lsls	r1, r1, #17
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	03db      	lsls	r3, r3, #15
 8005174:	4013      	ands	r3, r2
 8005176:	d016      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005178:	4b46      	ldr	r3, [pc, #280]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800517a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517c:	4a4e      	ldr	r2, [pc, #312]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800517e:	4013      	ands	r3, r2
 8005180:	0019      	movs	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005186:	4b43      	ldr	r3, [pc, #268]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005188:	430a      	orrs	r2, r1
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	045b      	lsls	r3, r3, #17
 8005194:	429a      	cmp	r2, r3
 8005196:	d106      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005198:	4b3e      	ldr	r3, [pc, #248]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	0449      	lsls	r1, r1, #17
 80051a2:	430a      	orrs	r2, r1
 80051a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	4013      	ands	r3, r2
 80051b0:	d014      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	2203      	movs	r2, #3
 80051b8:	4393      	bics	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	4b34      	ldr	r3, [pc, #208]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051c2:	430a      	orrs	r2, r1
 80051c4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d106      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	0249      	lsls	r1, r1, #9
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	019b      	lsls	r3, r3, #6
 80051e4:	4013      	ands	r3, r2
 80051e6:	d014      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80051e8:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	220c      	movs	r2, #12
 80051ee:	4393      	bics	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f6:	4b27      	ldr	r3, [pc, #156]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051f8:	430a      	orrs	r2, r1
 80051fa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b04      	cmp	r3, #4
 8005202:	d106      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	0249      	lsls	r1, r1, #9
 800520e:	430a      	orrs	r2, r1
 8005210:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	045b      	lsls	r3, r3, #17
 800521a:	4013      	ands	r3, r2
 800521c:	d016      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	4a22      	ldr	r2, [pc, #136]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800522e:	430a      	orrs	r2, r1
 8005230:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	429a      	cmp	r2, r3
 800523c:	d106      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0449      	lsls	r1, r1, #17
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	049b      	lsls	r3, r3, #18
 8005254:	4013      	ands	r3, r2
 8005256:	d016      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005268:	430a      	orrs	r2, r1
 800526a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	429a      	cmp	r2, r3
 8005276:	d106      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	0449      	lsls	r1, r1, #17
 8005282:	430a      	orrs	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005286:	2312      	movs	r3, #18
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	efffffff 	.word	0xefffffff
 800529c:	fffff3ff 	.word	0xfffff3ff
 80052a0:	fffffcff 	.word	0xfffffcff
 80052a4:	fff3ffff 	.word	0xfff3ffff
 80052a8:	ffcfffff 	.word	0xffcfffff
 80052ac:	ffffcfff 	.word	0xffffcfff
 80052b0:	ffff3fff 	.word	0xffff3fff
 80052b4:	ffbfffff 	.word	0xffbfffff
 80052b8:	feffffff 	.word	0xfeffffff

080052bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e04a      	b.n	8005364 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	223d      	movs	r2, #61	; 0x3d
 80052d2:	5c9b      	ldrb	r3, [r3, r2]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	223c      	movs	r2, #60	; 0x3c
 80052de:	2100      	movs	r1, #0
 80052e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fe f965 	bl	80035b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	223d      	movs	r2, #61	; 0x3d
 80052ee:	2102      	movs	r1, #2
 80052f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	0019      	movs	r1, r3
 80052fc:	0010      	movs	r0, r2
 80052fe:	f000 faed 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2248      	movs	r2, #72	; 0x48
 8005306:	2101      	movs	r1, #1
 8005308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	223e      	movs	r2, #62	; 0x3e
 800530e:	2101      	movs	r1, #1
 8005310:	5499      	strb	r1, [r3, r2]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223f      	movs	r2, #63	; 0x3f
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2241      	movs	r2, #65	; 0x41
 8005326:	2101      	movs	r1, #1
 8005328:	5499      	strb	r1, [r3, r2]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2242      	movs	r2, #66	; 0x42
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2243      	movs	r2, #67	; 0x43
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2244      	movs	r2, #68	; 0x44
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2245      	movs	r2, #69	; 0x45
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2246      	movs	r2, #70	; 0x46
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2247      	movs	r2, #71	; 0x47
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223d      	movs	r2, #61	; 0x3d
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	223d      	movs	r2, #61	; 0x3d
 8005378:	5c9b      	ldrb	r3, [r3, r2]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e047      	b.n	8005414 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223d      	movs	r2, #61	; 0x3d
 8005388:	2102      	movs	r1, #2
 800538a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2101      	movs	r1, #1
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_TIM_Base_Start_IT+0xb0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d014      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x64>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	05db      	lsls	r3, r3, #23
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x64>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_TIM_Base_Start_IT+0xb4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x64>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a18      	ldr	r2, [pc, #96]	; (8005424 <HAL_TIM_Base_Start_IT+0xb8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x64>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIM_Base_Start_IT+0xbc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d116      	bne.n	80053fe <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIM_Base_Start_IT+0xc0>)
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d016      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xa4>
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	025b      	lsls	r3, r3, #9
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d011      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	e008      	b.n	8005410 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2101      	movs	r1, #1
 800540a:	430a      	orrs	r2, r1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e000      	b.n	8005412 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	0018      	movs	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	b004      	add	sp, #16
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40014000 	.word	0x40014000
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2101      	movs	r1, #1
 8005444:	438a      	bics	r2, r1
 8005446:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <HAL_TIM_Base_Stop_IT+0x54>)
 8005450:	4013      	ands	r3, r2
 8005452:	d10d      	bne.n	8005470 <HAL_TIM_Base_Stop_IT+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <HAL_TIM_Base_Stop_IT+0x58>)
 800545c:	4013      	ands	r3, r2
 800545e:	d107      	bne.n	8005470 <HAL_TIM_Base_Stop_IT+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2101      	movs	r1, #1
 800546c:	438a      	bics	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223d      	movs	r2, #61	; 0x3d
 8005474:	2101      	movs	r1, #1
 8005476:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b002      	add	sp, #8
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	00001111 	.word	0x00001111
 8005488:	00000444 	.word	0x00000444

0800548c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2202      	movs	r2, #2
 800549c:	4013      	ands	r3, r2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d124      	bne.n	80054ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2202      	movs	r2, #2
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d11d      	bne.n	80054ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2203      	movs	r2, #3
 80054b6:	4252      	negs	r2, r2
 80054b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2203      	movs	r2, #3
 80054c8:	4013      	ands	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f9ec 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80054d4:	e007      	b.n	80054e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f000 f9df 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f000 f9eb 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2204      	movs	r2, #4
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d125      	bne.n	8005546 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2204      	movs	r2, #4
 8005502:	4013      	ands	r3, r2
 8005504:	2b04      	cmp	r3, #4
 8005506:	d11e      	bne.n	8005546 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2205      	movs	r2, #5
 800550e:	4252      	negs	r2, r2
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	23c0      	movs	r3, #192	; 0xc0
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4013      	ands	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0018      	movs	r0, r3
 800552a:	f000 f9bf 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 800552e:	e007      	b.n	8005540 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	0018      	movs	r0, r3
 8005534:	f000 f9b2 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 f9be 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2208      	movs	r2, #8
 800554e:	4013      	ands	r3, r2
 8005550:	2b08      	cmp	r3, #8
 8005552:	d124      	bne.n	800559e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2208      	movs	r2, #8
 800555c:	4013      	ands	r3, r2
 800555e:	2b08      	cmp	r3, #8
 8005560:	d11d      	bne.n	800559e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2209      	movs	r2, #9
 8005568:	4252      	negs	r2, r2
 800556a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2203      	movs	r2, #3
 800557a:	4013      	ands	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f993 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 8005586:	e007      	b.n	8005598 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f986 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	0018      	movs	r0, r3
 8005594:	f000 f992 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2210      	movs	r2, #16
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d125      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	2210      	movs	r2, #16
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d11e      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2211      	movs	r2, #17
 80055c0:	4252      	negs	r2, r2
 80055c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2208      	movs	r2, #8
 80055c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	23c0      	movs	r3, #192	; 0xc0
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4013      	ands	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 f966 	bl	80058ac <HAL_TIM_IC_CaptureCallback>
 80055e0:	e007      	b.n	80055f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f000 f959 	bl	800589c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f965 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2201      	movs	r2, #1
 8005600:	4013      	ands	r3, r2
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10f      	bne.n	8005626 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	4013      	ands	r3, r2
 8005610:	2b01      	cmp	r3, #1
 8005612:	d108      	bne.n	8005626 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2202      	movs	r2, #2
 800561a:	4252      	negs	r2, r2
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f7fd fdfb 	bl	800321c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	4013      	ands	r3, r2
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d10f      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	4013      	ands	r3, r2
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d108      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2281      	movs	r2, #129	; 0x81
 8005648:	4252      	negs	r2, r2
 800564a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 fae8 	bl	8005c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	401a      	ands	r2, r3
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	429a      	cmp	r2, r3
 8005666:	d10e      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	4013      	ands	r3, r2
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d107      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <HAL_TIM_IRQHandler+0x260>)
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0018      	movs	r0, r3
 8005682:	f000 fad7 	bl	8005c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2240      	movs	r2, #64	; 0x40
 800568e:	4013      	ands	r3, r2
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d10f      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	4013      	ands	r3, r2
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d108      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2241      	movs	r2, #65	; 0x41
 80056a8:	4252      	negs	r2, r2
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 f90c 	bl	80058cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2220      	movs	r2, #32
 80056bc:	4013      	ands	r3, r2
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d10f      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d108      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	4252      	negs	r2, r2
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 fa99 	bl	8005c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b002      	add	sp, #8
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	fffffeff 	.word	0xfffffeff

080056f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	230f      	movs	r3, #15
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	223c      	movs	r2, #60	; 0x3c
 8005706:	5c9b      	ldrb	r3, [r3, r2]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIM_ConfigClockSource+0x20>
 800570c:	2302      	movs	r3, #2
 800570e:	e0bc      	b.n	800588a <HAL_TIM_ConfigClockSource+0x19a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223c      	movs	r2, #60	; 0x3c
 8005714:	2101      	movs	r1, #1
 8005716:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223d      	movs	r2, #61	; 0x3d
 800571c:	2102      	movs	r1, #2
 800571e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4a5a      	ldr	r2, [pc, #360]	; (8005894 <HAL_TIM_ConfigClockSource+0x1a4>)
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a59      	ldr	r2, [pc, #356]	; (8005898 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005734:	4013      	ands	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	0192      	lsls	r2, r2, #6
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xde>
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	0192      	lsls	r2, r2, #6
 8005750:	4293      	cmp	r3, r2
 8005752:	d900      	bls.n	8005756 <HAL_TIM_ConfigClockSource+0x66>
 8005754:	e088      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	0152      	lsls	r2, r2, #5
 800575a:	4293      	cmp	r3, r2
 800575c:	d100      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x70>
 800575e:	e088      	b.n	8005872 <HAL_TIM_ConfigClockSource+0x182>
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	0152      	lsls	r2, r2, #5
 8005764:	4293      	cmp	r3, r2
 8005766:	d900      	bls.n	800576a <HAL_TIM_ConfigClockSource+0x7a>
 8005768:	e07e      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 800576a:	2b70      	cmp	r3, #112	; 0x70
 800576c:	d018      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0xb0>
 800576e:	d900      	bls.n	8005772 <HAL_TIM_ConfigClockSource+0x82>
 8005770:	e07a      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 8005772:	2b60      	cmp	r3, #96	; 0x60
 8005774:	d04f      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x126>
 8005776:	d900      	bls.n	800577a <HAL_TIM_ConfigClockSource+0x8a>
 8005778:	e076      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 800577a:	2b50      	cmp	r3, #80	; 0x50
 800577c:	d03b      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0x106>
 800577e:	d900      	bls.n	8005782 <HAL_TIM_ConfigClockSource+0x92>
 8005780:	e072      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d057      	beq.n	8005836 <HAL_TIM_ConfigClockSource+0x146>
 8005786:	d900      	bls.n	800578a <HAL_TIM_ConfigClockSource+0x9a>
 8005788:	e06e      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 800578a:	2b30      	cmp	r3, #48	; 0x30
 800578c:	d063      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x166>
 800578e:	d86b      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d060      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x166>
 8005794:	d868      	bhi.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d05d      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x166>
 800579a:	2b10      	cmp	r3, #16
 800579c:	d05b      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0x166>
 800579e:	e063      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6899      	ldr	r1, [r3, #8]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f000 f99a 	bl	8005ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2277      	movs	r2, #119	; 0x77
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e052      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6899      	ldr	r1, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f000 f983 	bl	8005ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2180      	movs	r1, #128	; 0x80
 80057ee:	01c9      	lsls	r1, r1, #7
 80057f0:	430a      	orrs	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
      break;
 80057f4:	e03e      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6859      	ldr	r1, [r3, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	001a      	movs	r2, r3
 8005804:	f000 f8f4 	bl	80059f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2150      	movs	r1, #80	; 0x50
 800580e:	0018      	movs	r0, r3
 8005810:	f000 f94e 	bl	8005ab0 <TIM_ITRx_SetConfig>
      break;
 8005814:	e02e      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	001a      	movs	r2, r3
 8005824:	f000 f912 	bl	8005a4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2160      	movs	r1, #96	; 0x60
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f93e 	bl	8005ab0 <TIM_ITRx_SetConfig>
      break;
 8005834:	e01e      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	001a      	movs	r2, r3
 8005844:	f000 f8d4 	bl	80059f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	0018      	movs	r0, r3
 8005850:	f000 f92e 	bl	8005ab0 <TIM_ITRx_SetConfig>
      break;
 8005854:	e00e      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	0019      	movs	r1, r3
 8005860:	0010      	movs	r0, r2
 8005862:	f000 f925 	bl	8005ab0 <TIM_ITRx_SetConfig>
      break;
 8005866:	e005      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005868:	230f      	movs	r3, #15
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
      break;
 8005870:	e000      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005872:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	223d      	movs	r2, #61	; 0x3d
 8005878:	2101      	movs	r1, #1
 800587a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	223c      	movs	r2, #60	; 0x3c
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

  return status;
 8005884:	230f      	movs	r3, #15
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	781b      	ldrb	r3, [r3, #0]
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	ffceff88 	.word	0xffceff88
 8005898:	ffff00ff 	.word	0xffff00ff

0800589c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b002      	add	sp, #8
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b002      	add	sp, #8
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <TIM_Base_SetConfig+0xf4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00c      	beq.n	800590e <TIM_Base_SetConfig+0x32>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	05db      	lsls	r3, r3, #23
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0x32>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a34      	ldr	r2, [pc, #208]	; (80059d4 <TIM_Base_SetConfig+0xf8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0x32>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a33      	ldr	r2, [pc, #204]	; (80059d8 <TIM_Base_SetConfig+0xfc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2270      	movs	r2, #112	; 0x70
 8005912:	4393      	bics	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a2b      	ldr	r2, [pc, #172]	; (80059d0 <TIM_Base_SetConfig+0xf4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01c      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	05db      	lsls	r3, r3, #23
 800592e:	429a      	cmp	r2, r3
 8005930:	d017      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <TIM_Base_SetConfig+0xf8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <TIM_Base_SetConfig+0xfc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	; (80059dc <TIM_Base_SetConfig+0x100>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a24      	ldr	r2, [pc, #144]	; (80059e0 <TIM_Base_SetConfig+0x104>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <TIM_Base_SetConfig+0x108>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0x86>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a22      	ldr	r2, [pc, #136]	; (80059e8 <TIM_Base_SetConfig+0x10c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a21      	ldr	r2, [pc, #132]	; (80059ec <TIM_Base_SetConfig+0x110>)
 8005966:	4013      	ands	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	4393      	bics	r3, r2
 800597a:	001a      	movs	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <TIM_Base_SetConfig+0xf4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0xde>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a0e      	ldr	r2, [pc, #56]	; (80059e0 <TIM_Base_SetConfig+0x104>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0xde>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <TIM_Base_SetConfig+0x108>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0xde>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <TIM_Base_SetConfig+0x10c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d103      	bne.n	80059c2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	615a      	str	r2, [r3, #20]
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b004      	add	sp, #16
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40002000 	.word	0x40002000
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800
 80059ec:	fffffcff 	.word	0xfffffcff

080059f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	2201      	movs	r2, #1
 8005a08:	4393      	bics	r3, r2
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	22f0      	movs	r2, #240	; 0xf0
 8005a1a:	4393      	bics	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	621a      	str	r2, [r3, #32]
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b006      	add	sp, #24
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	4393      	bics	r3, r2
 8005a60:	001a      	movs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <TIM_TI2_ConfigInputStage+0x60>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	22a0      	movs	r2, #160	; 0xa0
 8005a88:	4393      	bics	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b006      	add	sp, #24
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	ffff0fff 	.word	0xffff0fff

08005ab0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <TIM_ITRx_SetConfig+0x34>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	2207      	movs	r2, #7
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	609a      	str	r2, [r3, #8]
}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b004      	add	sp, #16
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	ffcfff8f 	.word	0xffcfff8f

08005ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <TIM_ETR_SetConfig+0x3c>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	609a      	str	r2, [r3, #8]
}
 8005b1c:	46c0      	nop			; (mov r8, r8)
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b006      	add	sp, #24
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	ffff00ff 	.word	0xffff00ff

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	223c      	movs	r2, #60	; 0x3c
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e05a      	b.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	223c      	movs	r2, #60	; 0x3c
 8005b44:	2101      	movs	r1, #1
 8005b46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	223d      	movs	r2, #61	; 0x3d
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2270      	movs	r2, #112	; 0x70
 8005b80:	4393      	bics	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d014      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	05db      	lsls	r3, r3, #23
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d00e      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a12      	ldr	r2, [pc, #72]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10c      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2280      	movs	r2, #128	; 0x80
 8005bce:	4393      	bics	r3, r2
 8005bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	223d      	movs	r2, #61	; 0x3d
 8005be8:	2101      	movs	r1, #1
 8005bea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	223c      	movs	r2, #60	; 0x3c
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b004      	add	sp, #16
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	ff0fffff 	.word	0xff0fffff
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40014000 	.word	0x40014000

08005c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b002      	add	sp, #8
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e046      	b.n	8005ce4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2288      	movs	r2, #136	; 0x88
 8005c5a:	589b      	ldr	r3, [r3, r2]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d107      	bne.n	8005c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2284      	movs	r2, #132	; 0x84
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7fd fce8 	bl	8003640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2288      	movs	r2, #136	; 0x88
 8005c74:	2124      	movs	r1, #36	; 0x24
 8005c76:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2101      	movs	r1, #1
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fcec 	bl	8006668 <UART_SetConfig>
 8005c90:	0003      	movs	r3, r0
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e024      	b.n	8005ce4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f001 f835 	bl	8006d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	490d      	ldr	r1, [pc, #52]	; (8005cec <HAL_UART_Init+0xa8>)
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	212a      	movs	r1, #42	; 0x2a
 8005cc6:	438a      	bics	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f001 f8cd 	bl	8006e7c <UART_CheckIdleState>
 8005ce2:	0003      	movs	r3, r0
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b002      	add	sp, #8
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	ffffb7ff 	.word	0xffffb7ff

08005cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08a      	sub	sp, #40	; 0x28
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	1dbb      	adds	r3, r7, #6
 8005cfe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2288      	movs	r2, #136	; 0x88
 8005d04:	589b      	ldr	r3, [r3, r2]
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d000      	beq.n	8005d0c <HAL_UART_Transmit+0x1c>
 8005d0a:	e088      	b.n	8005e1e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_Transmit+0x2a>
 8005d12:	1dbb      	adds	r3, r7, #6
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e080      	b.n	8005e20 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	015b      	lsls	r3, r3, #5
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d109      	bne.n	8005d3e <HAL_UART_Transmit+0x4e>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2201      	movs	r2, #1
 8005d36:	4013      	ands	r3, r2
 8005d38:	d001      	beq.n	8005d3e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e070      	b.n	8005e20 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2290      	movs	r2, #144	; 0x90
 8005d42:	2100      	movs	r1, #0
 8005d44:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2288      	movs	r2, #136	; 0x88
 8005d4a:	2121      	movs	r1, #33	; 0x21
 8005d4c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d4e:	f7fd fe63 	bl	8003a18 <HAL_GetTick>
 8005d52:	0003      	movs	r3, r0
 8005d54:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1dba      	adds	r2, r7, #6
 8005d5a:	2154      	movs	r1, #84	; 0x54
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1dba      	adds	r2, r7, #6
 8005d64:	2156      	movs	r1, #86	; 0x56
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	015b      	lsls	r3, r3, #5
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d108      	bne.n	8005d88 <HAL_UART_Transmit+0x98>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e003      	b.n	8005d90 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d90:	e02c      	b.n	8005dec <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	0013      	movs	r3, r2
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	f001 f8ba 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005da4:	1e03      	subs	r3, r0, #0
 8005da6:	d001      	beq.n	8005dac <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e039      	b.n	8005e20 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	001a      	movs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	05d2      	lsls	r2, r2, #23
 8005dbe:	0dd2      	lsrs	r2, r2, #23
 8005dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e007      	b.n	8005dda <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2256      	movs	r2, #86	; 0x56
 8005dde:	5a9b      	ldrh	r3, [r3, r2]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b299      	uxth	r1, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2256      	movs	r2, #86	; 0x56
 8005dea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2256      	movs	r2, #86	; 0x56
 8005df0:	5a9b      	ldrh	r3, [r3, r2]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1cc      	bne.n	8005d92 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	0013      	movs	r3, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	f001 f887 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005e0a:	1e03      	subs	r3, r0, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e006      	b.n	8005e20 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2288      	movs	r2, #136	; 0x88
 8005e16:	2120      	movs	r1, #32
 8005e18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b008      	add	sp, #32
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	1dbb      	adds	r3, r7, #6
 8005e36:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	228c      	movs	r2, #140	; 0x8c
 8005e3c:	589b      	ldr	r3, [r3, r2]
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d000      	beq.n	8005e44 <HAL_UART_Receive+0x1c>
 8005e42:	e0cc      	b.n	8005fde <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_UART_Receive+0x2a>
 8005e4a:	1dbb      	adds	r3, r7, #6
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0c4      	b.n	8005fe0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	015b      	lsls	r3, r3, #5
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d109      	bne.n	8005e76 <HAL_UART_Receive+0x4e>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d001      	beq.n	8005e76 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e0b4      	b.n	8005fe0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2290      	movs	r2, #144	; 0x90
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	228c      	movs	r2, #140	; 0x8c
 8005e82:	2122      	movs	r1, #34	; 0x22
 8005e84:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fdc4 	bl	8003a18 <HAL_GetTick>
 8005e90:	0003      	movs	r3, r0
 8005e92:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1dba      	adds	r2, r7, #6
 8005e98:	215c      	movs	r1, #92	; 0x5c
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1dba      	adds	r2, r7, #6
 8005ea2:	215e      	movs	r1, #94	; 0x5e
 8005ea4:	8812      	ldrh	r2, [r2, #0]
 8005ea6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	015b      	lsls	r3, r3, #5
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d10d      	bne.n	8005ed0 <HAL_UART_Receive+0xa8>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <HAL_UART_Receive+0x9e>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2260      	movs	r2, #96	; 0x60
 8005ec0:	4949      	ldr	r1, [pc, #292]	; (8005fe8 <HAL_UART_Receive+0x1c0>)
 8005ec2:	5299      	strh	r1, [r3, r2]
 8005ec4:	e02e      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2260      	movs	r2, #96	; 0x60
 8005eca:	21ff      	movs	r1, #255	; 0xff
 8005ecc:	5299      	strh	r1, [r3, r2]
 8005ece:	e029      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <HAL_UART_Receive+0xcc>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_UART_Receive+0xc2>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2260      	movs	r2, #96	; 0x60
 8005ee4:	21ff      	movs	r1, #255	; 0xff
 8005ee6:	5299      	strh	r1, [r3, r2]
 8005ee8:	e01c      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2260      	movs	r2, #96	; 0x60
 8005eee:	217f      	movs	r1, #127	; 0x7f
 8005ef0:	5299      	strh	r1, [r3, r2]
 8005ef2:	e017      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	055b      	lsls	r3, r3, #21
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d10d      	bne.n	8005f1c <HAL_UART_Receive+0xf4>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_UART_Receive+0xea>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2260      	movs	r2, #96	; 0x60
 8005f0c:	217f      	movs	r1, #127	; 0x7f
 8005f0e:	5299      	strh	r1, [r3, r2]
 8005f10:	e008      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2260      	movs	r2, #96	; 0x60
 8005f16:	213f      	movs	r1, #63	; 0x3f
 8005f18:	5299      	strh	r1, [r3, r2]
 8005f1a:	e003      	b.n	8005f24 <HAL_UART_Receive+0xfc>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2260      	movs	r2, #96	; 0x60
 8005f20:	2100      	movs	r1, #0
 8005f22:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005f24:	2312      	movs	r3, #18
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	2160      	movs	r1, #96	; 0x60
 8005f2c:	5a52      	ldrh	r2, [r2, r1]
 8005f2e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	015b      	lsls	r3, r3, #5
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d108      	bne.n	8005f4e <HAL_UART_Receive+0x126>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e003      	b.n	8005f56 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f56:	e036      	b.n	8005fc6 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	0013      	movs	r3, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	2120      	movs	r1, #32
 8005f66:	f000 ffd7 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005f6a:	1e03      	subs	r3, r0, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e036      	b.n	8005fe0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10e      	bne.n	8005f96 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2212      	movs	r2, #18
 8005f82:	18ba      	adds	r2, r7, r2
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3302      	adds	r3, #2
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e00e      	b.n	8005fb4 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2212      	movs	r2, #18
 8005fa0:	18ba      	adds	r2, r7, r2
 8005fa2:	8812      	ldrh	r2, [r2, #0]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	225e      	movs	r2, #94	; 0x5e
 8005fb8:	5a9b      	ldrh	r3, [r3, r2]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b299      	uxth	r1, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	225e      	movs	r2, #94	; 0x5e
 8005fc4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	225e      	movs	r2, #94	; 0x5e
 8005fca:	5a9b      	ldrh	r3, [r3, r2]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1c2      	bne.n	8005f58 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	228c      	movs	r2, #140	; 0x8c
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b008      	add	sp, #32
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	000001ff 	.word	0x000001ff

08005fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fec:	b5b0      	push	{r4, r5, r7, lr}
 8005fee:	b0aa      	sub	sp, #168	; 0xa8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	22a4      	movs	r2, #164	; 0xa4
 8005ffc:	18b9      	adds	r1, r7, r2
 8005ffe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	20a0      	movs	r0, #160	; 0xa0
 8006008:	1839      	adds	r1, r7, r0
 800600a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	249c      	movs	r4, #156	; 0x9c
 8006014:	1939      	adds	r1, r7, r4
 8006016:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006018:	0011      	movs	r1, r2
 800601a:	18bb      	adds	r3, r7, r2
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4aa2      	ldr	r2, [pc, #648]	; (80062a8 <HAL_UART_IRQHandler+0x2bc>)
 8006020:	4013      	ands	r3, r2
 8006022:	2298      	movs	r2, #152	; 0x98
 8006024:	18bd      	adds	r5, r7, r2
 8006026:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006028:	18bb      	adds	r3, r7, r2
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d11a      	bne.n	8006066 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006030:	187b      	adds	r3, r7, r1
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2220      	movs	r2, #32
 8006036:	4013      	ands	r3, r2
 8006038:	d015      	beq.n	8006066 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800603a:	183b      	adds	r3, r7, r0
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2220      	movs	r2, #32
 8006040:	4013      	ands	r3, r2
 8006042:	d105      	bne.n	8006050 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006044:	193b      	adds	r3, r7, r4
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	055b      	lsls	r3, r3, #21
 800604c:	4013      	ands	r3, r2
 800604e:	d00a      	beq.n	8006066 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006054:	2b00      	cmp	r3, #0
 8006056:	d100      	bne.n	800605a <HAL_UART_IRQHandler+0x6e>
 8006058:	e2dc      	b.n	8006614 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	0010      	movs	r0, r2
 8006062:	4798      	blx	r3
      }
      return;
 8006064:	e2d6      	b.n	8006614 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006066:	2398      	movs	r3, #152	; 0x98
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d100      	bne.n	8006072 <HAL_UART_IRQHandler+0x86>
 8006070:	e122      	b.n	80062b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006072:	239c      	movs	r3, #156	; 0x9c
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a8c      	ldr	r2, [pc, #560]	; (80062ac <HAL_UART_IRQHandler+0x2c0>)
 800607a:	4013      	ands	r3, r2
 800607c:	d106      	bne.n	800608c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800607e:	23a0      	movs	r3, #160	; 0xa0
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a8a      	ldr	r2, [pc, #552]	; (80062b0 <HAL_UART_IRQHandler+0x2c4>)
 8006086:	4013      	ands	r3, r2
 8006088:	d100      	bne.n	800608c <HAL_UART_IRQHandler+0xa0>
 800608a:	e115      	b.n	80062b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800608c:	23a4      	movs	r3, #164	; 0xa4
 800608e:	18fb      	adds	r3, r7, r3
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	4013      	ands	r3, r2
 8006096:	d012      	beq.n	80060be <HAL_UART_IRQHandler+0xd2>
 8006098:	23a0      	movs	r3, #160	; 0xa0
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	2380      	movs	r3, #128	; 0x80
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	4013      	ands	r3, r2
 80060a4:	d00b      	beq.n	80060be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2201      	movs	r2, #1
 80060ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2290      	movs	r2, #144	; 0x90
 80060b2:	589b      	ldr	r3, [r3, r2]
 80060b4:	2201      	movs	r2, #1
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2190      	movs	r1, #144	; 0x90
 80060bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060be:	23a4      	movs	r3, #164	; 0xa4
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2202      	movs	r2, #2
 80060c6:	4013      	ands	r3, r2
 80060c8:	d011      	beq.n	80060ee <HAL_UART_IRQHandler+0x102>
 80060ca:	239c      	movs	r3, #156	; 0x9c
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	4013      	ands	r3, r2
 80060d4:	d00b      	beq.n	80060ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2202      	movs	r2, #2
 80060dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2290      	movs	r2, #144	; 0x90
 80060e2:	589b      	ldr	r3, [r3, r2]
 80060e4:	2204      	movs	r2, #4
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2190      	movs	r1, #144	; 0x90
 80060ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ee:	23a4      	movs	r3, #164	; 0xa4
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2204      	movs	r2, #4
 80060f6:	4013      	ands	r3, r2
 80060f8:	d011      	beq.n	800611e <HAL_UART_IRQHandler+0x132>
 80060fa:	239c      	movs	r3, #156	; 0x9c
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2201      	movs	r2, #1
 8006102:	4013      	ands	r3, r2
 8006104:	d00b      	beq.n	800611e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2204      	movs	r2, #4
 800610c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2290      	movs	r2, #144	; 0x90
 8006112:	589b      	ldr	r3, [r3, r2]
 8006114:	2202      	movs	r2, #2
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2190      	movs	r1, #144	; 0x90
 800611c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800611e:	23a4      	movs	r3, #164	; 0xa4
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2208      	movs	r2, #8
 8006126:	4013      	ands	r3, r2
 8006128:	d017      	beq.n	800615a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800612a:	23a0      	movs	r3, #160	; 0xa0
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2220      	movs	r2, #32
 8006132:	4013      	ands	r3, r2
 8006134:	d105      	bne.n	8006142 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006136:	239c      	movs	r3, #156	; 0x9c
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5b      	ldr	r2, [pc, #364]	; (80062ac <HAL_UART_IRQHandler+0x2c0>)
 800613e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2208      	movs	r2, #8
 8006148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2290      	movs	r2, #144	; 0x90
 800614e:	589b      	ldr	r3, [r3, r2]
 8006150:	2208      	movs	r2, #8
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2190      	movs	r1, #144	; 0x90
 8006158:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800615a:	23a4      	movs	r3, #164	; 0xa4
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	4013      	ands	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_UART_IRQHandler+0x1a4>
 8006168:	23a0      	movs	r3, #160	; 0xa0
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	04db      	lsls	r3, r3, #19
 8006172:	4013      	ands	r3, r2
 8006174:	d00c      	beq.n	8006190 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2280      	movs	r2, #128	; 0x80
 800617c:	0112      	lsls	r2, r2, #4
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2290      	movs	r2, #144	; 0x90
 8006184:	589b      	ldr	r3, [r3, r2]
 8006186:	2220      	movs	r2, #32
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2190      	movs	r1, #144	; 0x90
 800618e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2290      	movs	r2, #144	; 0x90
 8006194:	589b      	ldr	r3, [r3, r2]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d100      	bne.n	800619c <HAL_UART_IRQHandler+0x1b0>
 800619a:	e23d      	b.n	8006618 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800619c:	23a4      	movs	r3, #164	; 0xa4
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2220      	movs	r2, #32
 80061a4:	4013      	ands	r3, r2
 80061a6:	d015      	beq.n	80061d4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061a8:	23a0      	movs	r3, #160	; 0xa0
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2220      	movs	r2, #32
 80061b0:	4013      	ands	r3, r2
 80061b2:	d106      	bne.n	80061c2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061b4:	239c      	movs	r3, #156	; 0x9c
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	055b      	lsls	r3, r3, #21
 80061be:	4013      	ands	r3, r2
 80061c0:	d008      	beq.n	80061d4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d004      	beq.n	80061d4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	0010      	movs	r0, r2
 80061d2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2290      	movs	r2, #144	; 0x90
 80061d8:	589b      	ldr	r3, [r3, r2]
 80061da:	2194      	movs	r1, #148	; 0x94
 80061dc:	187a      	adds	r2, r7, r1
 80061de:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2240      	movs	r2, #64	; 0x40
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d004      	beq.n	80061f8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061ee:	187b      	adds	r3, r7, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2228      	movs	r2, #40	; 0x28
 80061f4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061f6:	d04c      	beq.n	8006292 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f001 f878 	bl	80072f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	4013      	ands	r3, r2
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d13c      	bne.n	8006288 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620e:	f3ef 8310 	mrs	r3, PRIMASK
 8006212:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	2090      	movs	r0, #144	; 0x90
 8006218:	183a      	adds	r2, r7, r0
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	2301      	movs	r3, #1
 800621e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006222:	f383 8810 	msr	PRIMASK, r3
}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2140      	movs	r1, #64	; 0x40
 8006234:	438a      	bics	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	183b      	adds	r3, r7, r0
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2280      	movs	r2, #128	; 0x80
 800624a:	589b      	ldr	r3, [r3, r2]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d016      	beq.n	800627e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	589b      	ldr	r3, [r3, r2]
 8006256:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <HAL_UART_IRQHandler+0x2c8>)
 8006258:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	589b      	ldr	r3, [r3, r2]
 8006260:	0018      	movs	r0, r3
 8006262:	f7fd fd5b 	bl	8003d1c <HAL_DMA_Abort_IT>
 8006266:	1e03      	subs	r3, r0, #0
 8006268:	d01c      	beq.n	80062a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2280      	movs	r2, #128	; 0x80
 800626e:	589b      	ldr	r3, [r3, r2]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	2180      	movs	r1, #128	; 0x80
 8006276:	5852      	ldr	r2, [r2, r1]
 8006278:	0010      	movs	r0, r2
 800627a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627c:	e012      	b.n	80062a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0018      	movs	r0, r3
 8006282:	f000 f9e9 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006286:	e00d      	b.n	80062a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	0018      	movs	r0, r3
 800628c:	f000 f9e4 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e008      	b.n	80062a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f9df 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2290      	movs	r2, #144	; 0x90
 800629e:	2100      	movs	r1, #0
 80062a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80062a2:	e1b9      	b.n	8006618 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a4:	46c0      	nop			; (mov r8, r8)
    return;
 80062a6:	e1b7      	b.n	8006618 <HAL_UART_IRQHandler+0x62c>
 80062a8:	0000080f 	.word	0x0000080f
 80062ac:	10000001 	.word	0x10000001
 80062b0:	04000120 	.word	0x04000120
 80062b4:	080073bd 	.word	0x080073bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d000      	beq.n	80062c2 <HAL_UART_IRQHandler+0x2d6>
 80062c0:	e13e      	b.n	8006540 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062c2:	23a4      	movs	r3, #164	; 0xa4
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2210      	movs	r2, #16
 80062ca:	4013      	ands	r3, r2
 80062cc:	d100      	bne.n	80062d0 <HAL_UART_IRQHandler+0x2e4>
 80062ce:	e137      	b.n	8006540 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062d0:	23a0      	movs	r3, #160	; 0xa0
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2210      	movs	r2, #16
 80062d8:	4013      	ands	r3, r2
 80062da:	d100      	bne.n	80062de <HAL_UART_IRQHandler+0x2f2>
 80062dc:	e130      	b.n	8006540 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2210      	movs	r2, #16
 80062e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2240      	movs	r2, #64	; 0x40
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d000      	beq.n	80062f6 <HAL_UART_IRQHandler+0x30a>
 80062f4:	e0a4      	b.n	8006440 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	589b      	ldr	r3, [r3, r2]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	217e      	movs	r1, #126	; 0x7e
 8006302:	187b      	adds	r3, r7, r1
 8006304:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006306:	187b      	adds	r3, r7, r1
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d100      	bne.n	8006310 <HAL_UART_IRQHandler+0x324>
 800630e:	e185      	b.n	800661c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	225c      	movs	r2, #92	; 0x5c
 8006314:	5a9b      	ldrh	r3, [r3, r2]
 8006316:	187a      	adds	r2, r7, r1
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d300      	bcc.n	8006320 <HAL_UART_IRQHandler+0x334>
 800631e:	e17d      	b.n	800661c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	187a      	adds	r2, r7, r1
 8006324:	215e      	movs	r1, #94	; 0x5e
 8006326:	8812      	ldrh	r2, [r2, #0]
 8006328:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	589b      	ldr	r3, [r3, r2]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2220      	movs	r2, #32
 8006336:	4013      	ands	r3, r2
 8006338:	d170      	bne.n	800641c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633a:	f3ef 8310 	mrs	r3, PRIMASK
 800633e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006342:	67bb      	str	r3, [r7, #120]	; 0x78
 8006344:	2301      	movs	r3, #1
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	49b4      	ldr	r1, [pc, #720]	; (800662c <HAL_UART_IRQHandler+0x640>)
 800635c:	400a      	ands	r2, r1
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f383 8810 	msr	PRIMASK, r3
}
 800636a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800636c:	f3ef 8310 	mrs	r3, PRIMASK
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	677b      	str	r3, [r7, #116]	; 0x74
 8006376:	2301      	movs	r3, #1
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	f383 8810 	msr	PRIMASK, r3
}
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2101      	movs	r1, #1
 800638e:	438a      	bics	r2, r1
 8006390:	609a      	str	r2, [r3, #8]
 8006392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006398:	f383 8810 	msr	PRIMASK, r3
}
 800639c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639e:	f3ef 8310 	mrs	r3, PRIMASK
 80063a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80063a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	673b      	str	r3, [r7, #112]	; 0x70
 80063a8:	2301      	movs	r3, #1
 80063aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ae:	f383 8810 	msr	PRIMASK, r3
}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2140      	movs	r1, #64	; 0x40
 80063c0:	438a      	bics	r2, r1
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ca:	f383 8810 	msr	PRIMASK, r3
}
 80063ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	228c      	movs	r2, #140	; 0x8c
 80063d4:	2120      	movs	r1, #32
 80063d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063de:	f3ef 8310 	mrs	r3, PRIMASK
 80063e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80063e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e8:	2301      	movs	r3, #1
 80063ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ee:	f383 8810 	msr	PRIMASK, r3
}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2110      	movs	r1, #16
 8006400:	438a      	bics	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006406:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640a:	f383 8810 	msr	PRIMASK, r3
}
 800640e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2280      	movs	r2, #128	; 0x80
 8006414:	589b      	ldr	r3, [r3, r2]
 8006416:	0018      	movs	r0, r3
 8006418:	f7fd fc20 	bl	8003c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	225c      	movs	r2, #92	; 0x5c
 8006426:	5a9a      	ldrh	r2, [r3, r2]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	215e      	movs	r1, #94	; 0x5e
 800642c:	5a5b      	ldrh	r3, [r3, r1]
 800642e:	b29b      	uxth	r3, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0011      	movs	r1, r2
 8006438:	0018      	movs	r0, r3
 800643a:	f7fc f815 	bl	8002468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800643e:	e0ed      	b.n	800661c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	225c      	movs	r2, #92	; 0x5c
 8006444:	5a99      	ldrh	r1, [r3, r2]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	225e      	movs	r2, #94	; 0x5e
 800644a:	5a9b      	ldrh	r3, [r3, r2]
 800644c:	b29a      	uxth	r2, r3
 800644e:	208e      	movs	r0, #142	; 0x8e
 8006450:	183b      	adds	r3, r7, r0
 8006452:	1a8a      	subs	r2, r1, r2
 8006454:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	225e      	movs	r2, #94	; 0x5e
 800645a:	5a9b      	ldrh	r3, [r3, r2]
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d100      	bne.n	8006464 <HAL_UART_IRQHandler+0x478>
 8006462:	e0dd      	b.n	8006620 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006464:	183b      	adds	r3, r7, r0
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d100      	bne.n	800646e <HAL_UART_IRQHandler+0x482>
 800646c:	e0d8      	b.n	8006620 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646e:	f3ef 8310 	mrs	r3, PRIMASK
 8006472:	60fb      	str	r3, [r7, #12]
  return(result);
 8006474:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006476:	2488      	movs	r4, #136	; 0x88
 8006478:	193a      	adds	r2, r7, r4
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	2301      	movs	r3, #1
 800647e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f383 8810 	msr	PRIMASK, r3
}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4967      	ldr	r1, [pc, #412]	; (8006630 <HAL_UART_IRQHandler+0x644>)
 8006494:	400a      	ands	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	193b      	adds	r3, r7, r4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f383 8810 	msr	PRIMASK, r3
}
 80064a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a6:	f3ef 8310 	mrs	r3, PRIMASK
 80064aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ae:	2484      	movs	r4, #132	; 0x84
 80064b0:	193a      	adds	r2, r7, r4
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f383 8810 	msr	PRIMASK, r3
}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	495a      	ldr	r1, [pc, #360]	; (8006634 <HAL_UART_IRQHandler+0x648>)
 80064cc:	400a      	ands	r2, r1
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	193b      	adds	r3, r7, r4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	f383 8810 	msr	PRIMASK, r3
}
 80064dc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	228c      	movs	r2, #140	; 0x8c
 80064e2:	2120      	movs	r1, #32
 80064e4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f2:	f3ef 8310 	mrs	r3, PRIMASK
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	2480      	movs	r4, #128	; 0x80
 80064fc:	193a      	adds	r2, r7, r4
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	2301      	movs	r3, #1
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f383 8810 	msr	PRIMASK, r3
}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2110      	movs	r1, #16
 8006518:	438a      	bics	r2, r1
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	193b      	adds	r3, r7, r4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	f383 8810 	msr	PRIMASK, r3
}
 8006528:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006530:	183b      	adds	r3, r7, r0
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	0011      	movs	r1, r2
 8006538:	0018      	movs	r0, r3
 800653a:	f7fb ff95 	bl	8002468 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800653e:	e06f      	b.n	8006620 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006540:	23a4      	movs	r3, #164	; 0xa4
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	035b      	lsls	r3, r3, #13
 800654a:	4013      	ands	r3, r2
 800654c:	d010      	beq.n	8006570 <HAL_UART_IRQHandler+0x584>
 800654e:	239c      	movs	r3, #156	; 0x9c
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	03db      	lsls	r3, r3, #15
 8006558:	4013      	ands	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	0352      	lsls	r2, r2, #13
 8006564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f001 fbcb 	bl	8007d04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800656e:	e05a      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006570:	23a4      	movs	r3, #164	; 0xa4
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	4013      	ands	r3, r2
 800657a:	d016      	beq.n	80065aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800657c:	23a0      	movs	r3, #160	; 0xa0
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2280      	movs	r2, #128	; 0x80
 8006584:	4013      	ands	r3, r2
 8006586:	d106      	bne.n	8006596 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006588:	239c      	movs	r3, #156	; 0x9c
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	4013      	ands	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659a:	2b00      	cmp	r3, #0
 800659c:	d042      	beq.n	8006624 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	0010      	movs	r0, r2
 80065a6:	4798      	blx	r3
    }
    return;
 80065a8:	e03c      	b.n	8006624 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065aa:	23a4      	movs	r3, #164	; 0xa4
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2240      	movs	r2, #64	; 0x40
 80065b2:	4013      	ands	r3, r2
 80065b4:	d00a      	beq.n	80065cc <HAL_UART_IRQHandler+0x5e0>
 80065b6:	23a0      	movs	r3, #160	; 0xa0
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	4013      	ands	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 ff10 	bl	80073ea <UART_EndTransmit_IT>
    return;
 80065ca:	e02c      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80065cc:	23a4      	movs	r3, #164	; 0xa4
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	4013      	ands	r3, r2
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0x606>
 80065da:	23a0      	movs	r3, #160	; 0xa0
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	05db      	lsls	r3, r3, #23
 80065e4:	4013      	ands	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	0018      	movs	r0, r3
 80065ec:	f001 fb9a 	bl	8007d24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065f0:	e019      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80065f2:	23a4      	movs	r3, #164	; 0xa4
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	045b      	lsls	r3, r3, #17
 80065fc:	4013      	ands	r3, r2
 80065fe:	d012      	beq.n	8006626 <HAL_UART_IRQHandler+0x63a>
 8006600:	23a0      	movs	r3, #160	; 0xa0
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	da0d      	bge.n	8006626 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f001 fb81 	bl	8007d14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006612:	e008      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
      return;
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	e006      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
    return;
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	e004      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
      return;
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	e002      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
      return;
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	e000      	b.n	8006626 <HAL_UART_IRQHandler+0x63a>
    return;
 8006624:	46c0      	nop			; (mov r8, r8)
  }
}
 8006626:	46bd      	mov	sp, r7
 8006628:	b02a      	add	sp, #168	; 0xa8
 800662a:	bdb0      	pop	{r4, r5, r7, pc}
 800662c:	fffffeff 	.word	0xfffffeff
 8006630:	fffffedf 	.word	0xfffffedf
 8006634:	effffffe 	.word	0xeffffffe

08006638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006640:	46c0      	nop			; (mov r8, r8)
 8006642:	46bd      	mov	sp, r7
 8006644:	b002      	add	sp, #8
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006668:	b5b0      	push	{r4, r5, r7, lr}
 800666a:	b090      	sub	sp, #64	; 0x40
 800666c:	af00      	add	r7, sp, #0
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006670:	231a      	movs	r3, #26
 8006672:	2220      	movs	r2, #32
 8006674:	189b      	adds	r3, r3, r2
 8006676:	19db      	adds	r3, r3, r7
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	431a      	orrs	r2, r3
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	431a      	orrs	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	4313      	orrs	r3, r2
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4ac1      	ldr	r2, [pc, #772]	; (80069a0 <UART_SetConfig+0x338>)
 800669c:	4013      	ands	r3, r2
 800669e:	0019      	movs	r1, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	430b      	orrs	r3, r1
 80066a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4abc      	ldr	r2, [pc, #752]	; (80069a4 <UART_SetConfig+0x33c>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	68d9      	ldr	r1, [r3, #12]
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	0003      	movs	r3, r0
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4ab6      	ldr	r2, [pc, #728]	; (80069a8 <UART_SetConfig+0x340>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <UART_SetConfig+0x80>
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4ab4      	ldr	r2, [pc, #720]	; (80069ac <UART_SetConfig+0x344>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e4:	4313      	orrs	r3, r2
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	4ab0      	ldr	r2, [pc, #704]	; (80069b0 <UART_SetConfig+0x348>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fa:	430b      	orrs	r3, r1
 80066fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	220f      	movs	r2, #15
 8006706:	4393      	bics	r3, r2
 8006708:	0018      	movs	r0, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	0003      	movs	r3, r0
 8006714:	430b      	orrs	r3, r1
 8006716:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4aa5      	ldr	r2, [pc, #660]	; (80069b4 <UART_SetConfig+0x34c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d131      	bne.n	8006786 <UART_SetConfig+0x11e>
 8006722:	4ba5      	ldr	r3, [pc, #660]	; (80069b8 <UART_SetConfig+0x350>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	2203      	movs	r2, #3
 8006728:	4013      	ands	r3, r2
 800672a:	2b03      	cmp	r3, #3
 800672c:	d01d      	beq.n	800676a <UART_SetConfig+0x102>
 800672e:	d823      	bhi.n	8006778 <UART_SetConfig+0x110>
 8006730:	2b02      	cmp	r3, #2
 8006732:	d00c      	beq.n	800674e <UART_SetConfig+0xe6>
 8006734:	d820      	bhi.n	8006778 <UART_SetConfig+0x110>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <UART_SetConfig+0xd8>
 800673a:	2b01      	cmp	r3, #1
 800673c:	d00e      	beq.n	800675c <UART_SetConfig+0xf4>
 800673e:	e01b      	b.n	8006778 <UART_SetConfig+0x110>
 8006740:	231b      	movs	r3, #27
 8006742:	2220      	movs	r2, #32
 8006744:	189b      	adds	r3, r3, r2
 8006746:	19db      	adds	r3, r3, r7
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e154      	b.n	80069f8 <UART_SetConfig+0x390>
 800674e:	231b      	movs	r3, #27
 8006750:	2220      	movs	r2, #32
 8006752:	189b      	adds	r3, r3, r2
 8006754:	19db      	adds	r3, r3, r7
 8006756:	2202      	movs	r2, #2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e14d      	b.n	80069f8 <UART_SetConfig+0x390>
 800675c:	231b      	movs	r3, #27
 800675e:	2220      	movs	r2, #32
 8006760:	189b      	adds	r3, r3, r2
 8006762:	19db      	adds	r3, r3, r7
 8006764:	2204      	movs	r2, #4
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e146      	b.n	80069f8 <UART_SetConfig+0x390>
 800676a:	231b      	movs	r3, #27
 800676c:	2220      	movs	r2, #32
 800676e:	189b      	adds	r3, r3, r2
 8006770:	19db      	adds	r3, r3, r7
 8006772:	2208      	movs	r2, #8
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e13f      	b.n	80069f8 <UART_SetConfig+0x390>
 8006778:	231b      	movs	r3, #27
 800677a:	2220      	movs	r2, #32
 800677c:	189b      	adds	r3, r3, r2
 800677e:	19db      	adds	r3, r3, r7
 8006780:	2210      	movs	r2, #16
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e138      	b.n	80069f8 <UART_SetConfig+0x390>
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a8c      	ldr	r2, [pc, #560]	; (80069bc <UART_SetConfig+0x354>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d131      	bne.n	80067f4 <UART_SetConfig+0x18c>
 8006790:	4b89      	ldr	r3, [pc, #548]	; (80069b8 <UART_SetConfig+0x350>)
 8006792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006794:	220c      	movs	r2, #12
 8006796:	4013      	ands	r3, r2
 8006798:	2b0c      	cmp	r3, #12
 800679a:	d01d      	beq.n	80067d8 <UART_SetConfig+0x170>
 800679c:	d823      	bhi.n	80067e6 <UART_SetConfig+0x17e>
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d00c      	beq.n	80067bc <UART_SetConfig+0x154>
 80067a2:	d820      	bhi.n	80067e6 <UART_SetConfig+0x17e>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <UART_SetConfig+0x146>
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d00e      	beq.n	80067ca <UART_SetConfig+0x162>
 80067ac:	e01b      	b.n	80067e6 <UART_SetConfig+0x17e>
 80067ae:	231b      	movs	r3, #27
 80067b0:	2220      	movs	r2, #32
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	19db      	adds	r3, r3, r7
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e11d      	b.n	80069f8 <UART_SetConfig+0x390>
 80067bc:	231b      	movs	r3, #27
 80067be:	2220      	movs	r2, #32
 80067c0:	189b      	adds	r3, r3, r2
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	2202      	movs	r2, #2
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e116      	b.n	80069f8 <UART_SetConfig+0x390>
 80067ca:	231b      	movs	r3, #27
 80067cc:	2220      	movs	r2, #32
 80067ce:	189b      	adds	r3, r3, r2
 80067d0:	19db      	adds	r3, r3, r7
 80067d2:	2204      	movs	r2, #4
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e10f      	b.n	80069f8 <UART_SetConfig+0x390>
 80067d8:	231b      	movs	r3, #27
 80067da:	2220      	movs	r2, #32
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	19db      	adds	r3, r3, r7
 80067e0:	2208      	movs	r2, #8
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e108      	b.n	80069f8 <UART_SetConfig+0x390>
 80067e6:	231b      	movs	r3, #27
 80067e8:	2220      	movs	r2, #32
 80067ea:	189b      	adds	r3, r3, r2
 80067ec:	19db      	adds	r3, r3, r7
 80067ee:	2210      	movs	r2, #16
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	e101      	b.n	80069f8 <UART_SetConfig+0x390>
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a71      	ldr	r2, [pc, #452]	; (80069c0 <UART_SetConfig+0x358>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d131      	bne.n	8006862 <UART_SetConfig+0x1fa>
 80067fe:	4b6e      	ldr	r3, [pc, #440]	; (80069b8 <UART_SetConfig+0x350>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	2230      	movs	r2, #48	; 0x30
 8006804:	4013      	ands	r3, r2
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d01d      	beq.n	8006846 <UART_SetConfig+0x1de>
 800680a:	d823      	bhi.n	8006854 <UART_SetConfig+0x1ec>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d00c      	beq.n	800682a <UART_SetConfig+0x1c2>
 8006810:	d820      	bhi.n	8006854 <UART_SetConfig+0x1ec>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <UART_SetConfig+0x1b4>
 8006816:	2b10      	cmp	r3, #16
 8006818:	d00e      	beq.n	8006838 <UART_SetConfig+0x1d0>
 800681a:	e01b      	b.n	8006854 <UART_SetConfig+0x1ec>
 800681c:	231b      	movs	r3, #27
 800681e:	2220      	movs	r2, #32
 8006820:	189b      	adds	r3, r3, r2
 8006822:	19db      	adds	r3, r3, r7
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	e0e6      	b.n	80069f8 <UART_SetConfig+0x390>
 800682a:	231b      	movs	r3, #27
 800682c:	2220      	movs	r2, #32
 800682e:	189b      	adds	r3, r3, r2
 8006830:	19db      	adds	r3, r3, r7
 8006832:	2202      	movs	r2, #2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e0df      	b.n	80069f8 <UART_SetConfig+0x390>
 8006838:	231b      	movs	r3, #27
 800683a:	2220      	movs	r2, #32
 800683c:	189b      	adds	r3, r3, r2
 800683e:	19db      	adds	r3, r3, r7
 8006840:	2204      	movs	r2, #4
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e0d8      	b.n	80069f8 <UART_SetConfig+0x390>
 8006846:	231b      	movs	r3, #27
 8006848:	2220      	movs	r2, #32
 800684a:	189b      	adds	r3, r3, r2
 800684c:	19db      	adds	r3, r3, r7
 800684e:	2208      	movs	r2, #8
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e0d1      	b.n	80069f8 <UART_SetConfig+0x390>
 8006854:	231b      	movs	r3, #27
 8006856:	2220      	movs	r2, #32
 8006858:	189b      	adds	r3, r3, r2
 800685a:	19db      	adds	r3, r3, r7
 800685c:	2210      	movs	r2, #16
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e0ca      	b.n	80069f8 <UART_SetConfig+0x390>
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a57      	ldr	r2, [pc, #348]	; (80069c4 <UART_SetConfig+0x35c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d106      	bne.n	800687a <UART_SetConfig+0x212>
 800686c:	231b      	movs	r3, #27
 800686e:	2220      	movs	r2, #32
 8006870:	189b      	adds	r3, r3, r2
 8006872:	19db      	adds	r3, r3, r7
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e0be      	b.n	80069f8 <UART_SetConfig+0x390>
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a52      	ldr	r2, [pc, #328]	; (80069c8 <UART_SetConfig+0x360>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d106      	bne.n	8006892 <UART_SetConfig+0x22a>
 8006884:	231b      	movs	r3, #27
 8006886:	2220      	movs	r2, #32
 8006888:	189b      	adds	r3, r3, r2
 800688a:	19db      	adds	r3, r3, r7
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e0b2      	b.n	80069f8 <UART_SetConfig+0x390>
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a4d      	ldr	r2, [pc, #308]	; (80069cc <UART_SetConfig+0x364>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d106      	bne.n	80068aa <UART_SetConfig+0x242>
 800689c:	231b      	movs	r3, #27
 800689e:	2220      	movs	r2, #32
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	19db      	adds	r3, r3, r7
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e0a6      	b.n	80069f8 <UART_SetConfig+0x390>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a3e      	ldr	r2, [pc, #248]	; (80069a8 <UART_SetConfig+0x340>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d13e      	bne.n	8006932 <UART_SetConfig+0x2ca>
 80068b4:	4b40      	ldr	r3, [pc, #256]	; (80069b8 <UART_SetConfig+0x350>)
 80068b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b8:	23c0      	movs	r3, #192	; 0xc0
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4013      	ands	r3, r2
 80068be:	22c0      	movs	r2, #192	; 0xc0
 80068c0:	0112      	lsls	r2, r2, #4
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d027      	beq.n	8006916 <UART_SetConfig+0x2ae>
 80068c6:	22c0      	movs	r2, #192	; 0xc0
 80068c8:	0112      	lsls	r2, r2, #4
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d82a      	bhi.n	8006924 <UART_SetConfig+0x2bc>
 80068ce:	2280      	movs	r2, #128	; 0x80
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d011      	beq.n	80068fa <UART_SetConfig+0x292>
 80068d6:	2280      	movs	r2, #128	; 0x80
 80068d8:	0112      	lsls	r2, r2, #4
 80068da:	4293      	cmp	r3, r2
 80068dc:	d822      	bhi.n	8006924 <UART_SetConfig+0x2bc>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <UART_SetConfig+0x284>
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	00d2      	lsls	r2, r2, #3
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00e      	beq.n	8006908 <UART_SetConfig+0x2a0>
 80068ea:	e01b      	b.n	8006924 <UART_SetConfig+0x2bc>
 80068ec:	231b      	movs	r3, #27
 80068ee:	2220      	movs	r2, #32
 80068f0:	189b      	adds	r3, r3, r2
 80068f2:	19db      	adds	r3, r3, r7
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e07e      	b.n	80069f8 <UART_SetConfig+0x390>
 80068fa:	231b      	movs	r3, #27
 80068fc:	2220      	movs	r2, #32
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	19db      	adds	r3, r3, r7
 8006902:	2202      	movs	r2, #2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e077      	b.n	80069f8 <UART_SetConfig+0x390>
 8006908:	231b      	movs	r3, #27
 800690a:	2220      	movs	r2, #32
 800690c:	189b      	adds	r3, r3, r2
 800690e:	19db      	adds	r3, r3, r7
 8006910:	2204      	movs	r2, #4
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	e070      	b.n	80069f8 <UART_SetConfig+0x390>
 8006916:	231b      	movs	r3, #27
 8006918:	2220      	movs	r2, #32
 800691a:	189b      	adds	r3, r3, r2
 800691c:	19db      	adds	r3, r3, r7
 800691e:	2208      	movs	r2, #8
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e069      	b.n	80069f8 <UART_SetConfig+0x390>
 8006924:	231b      	movs	r3, #27
 8006926:	2220      	movs	r2, #32
 8006928:	189b      	adds	r3, r3, r2
 800692a:	19db      	adds	r3, r3, r7
 800692c:	2210      	movs	r2, #16
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e062      	b.n	80069f8 <UART_SetConfig+0x390>
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <UART_SetConfig+0x344>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d157      	bne.n	80069ec <UART_SetConfig+0x384>
 800693c:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <UART_SetConfig+0x350>)
 800693e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006940:	23c0      	movs	r3, #192	; 0xc0
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4013      	ands	r3, r2
 8006946:	22c0      	movs	r2, #192	; 0xc0
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	4293      	cmp	r3, r2
 800694c:	d040      	beq.n	80069d0 <UART_SetConfig+0x368>
 800694e:	22c0      	movs	r2, #192	; 0xc0
 8006950:	0092      	lsls	r2, r2, #2
 8006952:	4293      	cmp	r3, r2
 8006954:	d843      	bhi.n	80069de <UART_SetConfig+0x376>
 8006956:	2280      	movs	r2, #128	; 0x80
 8006958:	0092      	lsls	r2, r2, #2
 800695a:	4293      	cmp	r3, r2
 800695c:	d011      	beq.n	8006982 <UART_SetConfig+0x31a>
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	4293      	cmp	r3, r2
 8006964:	d83b      	bhi.n	80069de <UART_SetConfig+0x376>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <UART_SetConfig+0x30c>
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	0052      	lsls	r2, r2, #1
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <UART_SetConfig+0x328>
 8006972:	e034      	b.n	80069de <UART_SetConfig+0x376>
 8006974:	231b      	movs	r3, #27
 8006976:	2220      	movs	r2, #32
 8006978:	189b      	adds	r3, r3, r2
 800697a:	19db      	adds	r3, r3, r7
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	e03a      	b.n	80069f8 <UART_SetConfig+0x390>
 8006982:	231b      	movs	r3, #27
 8006984:	2220      	movs	r2, #32
 8006986:	189b      	adds	r3, r3, r2
 8006988:	19db      	adds	r3, r3, r7
 800698a:	2202      	movs	r2, #2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e033      	b.n	80069f8 <UART_SetConfig+0x390>
 8006990:	231b      	movs	r3, #27
 8006992:	2220      	movs	r2, #32
 8006994:	189b      	adds	r3, r3, r2
 8006996:	19db      	adds	r3, r3, r7
 8006998:	2204      	movs	r2, #4
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e02c      	b.n	80069f8 <UART_SetConfig+0x390>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	cfff69f3 	.word	0xcfff69f3
 80069a4:	ffffcfff 	.word	0xffffcfff
 80069a8:	40008000 	.word	0x40008000
 80069ac:	40008400 	.word	0x40008400
 80069b0:	11fff4ff 	.word	0x11fff4ff
 80069b4:	40013800 	.word	0x40013800
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40004400 	.word	0x40004400
 80069c0:	40004800 	.word	0x40004800
 80069c4:	40004c00 	.word	0x40004c00
 80069c8:	40005000 	.word	0x40005000
 80069cc:	40013c00 	.word	0x40013c00
 80069d0:	231b      	movs	r3, #27
 80069d2:	2220      	movs	r2, #32
 80069d4:	189b      	adds	r3, r3, r2
 80069d6:	19db      	adds	r3, r3, r7
 80069d8:	2208      	movs	r2, #8
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	e00c      	b.n	80069f8 <UART_SetConfig+0x390>
 80069de:	231b      	movs	r3, #27
 80069e0:	2220      	movs	r2, #32
 80069e2:	189b      	adds	r3, r3, r2
 80069e4:	19db      	adds	r3, r3, r7
 80069e6:	2210      	movs	r2, #16
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e005      	b.n	80069f8 <UART_SetConfig+0x390>
 80069ec:	231b      	movs	r3, #27
 80069ee:	2220      	movs	r2, #32
 80069f0:	189b      	adds	r3, r3, r2
 80069f2:	19db      	adds	r3, r3, r7
 80069f4:	2210      	movs	r2, #16
 80069f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4ac1      	ldr	r2, [pc, #772]	; (8006d04 <UART_SetConfig+0x69c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d005      	beq.n	8006a0e <UART_SetConfig+0x3a6>
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4ac0      	ldr	r2, [pc, #768]	; (8006d08 <UART_SetConfig+0x6a0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d000      	beq.n	8006a0e <UART_SetConfig+0x3a6>
 8006a0c:	e093      	b.n	8006b36 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a0e:	231b      	movs	r3, #27
 8006a10:	2220      	movs	r2, #32
 8006a12:	189b      	adds	r3, r3, r2
 8006a14:	19db      	adds	r3, r3, r7
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d015      	beq.n	8006a48 <UART_SetConfig+0x3e0>
 8006a1c:	dc18      	bgt.n	8006a50 <UART_SetConfig+0x3e8>
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d00d      	beq.n	8006a3e <UART_SetConfig+0x3d6>
 8006a22:	dc15      	bgt.n	8006a50 <UART_SetConfig+0x3e8>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x3c6>
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d005      	beq.n	8006a38 <UART_SetConfig+0x3d0>
 8006a2c:	e010      	b.n	8006a50 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2e:	f7fe f9f3 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8006a32:	0003      	movs	r3, r0
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a36:	e014      	b.n	8006a62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a38:	4bb4      	ldr	r3, [pc, #720]	; (8006d0c <UART_SetConfig+0x6a4>)
 8006a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a3c:	e011      	b.n	8006a62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3e:	f7fe f95f 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8006a42:	0003      	movs	r3, r0
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a46:	e00c      	b.n	8006a62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a4e:	e008      	b.n	8006a62 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006a54:	231a      	movs	r3, #26
 8006a56:	2220      	movs	r2, #32
 8006a58:	189b      	adds	r3, r3, r2
 8006a5a:	19db      	adds	r3, r3, r7
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
        break;
 8006a60:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d100      	bne.n	8006a6a <UART_SetConfig+0x402>
 8006a68:	e135      	b.n	8006cd6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6e:	4ba8      	ldr	r3, [pc, #672]	; (8006d10 <UART_SetConfig+0x6a8>)
 8006a70:	0052      	lsls	r2, r2, #1
 8006a72:	5ad3      	ldrh	r3, [r2, r3]
 8006a74:	0019      	movs	r1, r3
 8006a76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a78:	f7f9 fb62 	bl	8000140 <__udivsi3>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	0013      	movs	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	189b      	adds	r3, r3, r2
 8006a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d305      	bcc.n	8006a9c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d906      	bls.n	8006aaa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006a9c:	231a      	movs	r3, #26
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	19db      	adds	r3, r3, r7
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e044      	b.n	8006b34 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab6:	4b96      	ldr	r3, [pc, #600]	; (8006d10 <UART_SetConfig+0x6a8>)
 8006ab8:	0052      	lsls	r2, r2, #1
 8006aba:	5ad3      	ldrh	r3, [r2, r3]
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	69b8      	ldr	r0, [r7, #24]
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	f7f9 fced 	bl	80004a8 <__aeabi_uldivmod>
 8006ace:	0002      	movs	r2, r0
 8006ad0:	000b      	movs	r3, r1
 8006ad2:	0e11      	lsrs	r1, r2, #24
 8006ad4:	021d      	lsls	r5, r3, #8
 8006ad6:	430d      	orrs	r5, r1
 8006ad8:	0214      	lsls	r4, r2, #8
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	1900      	adds	r0, r0, r4
 8006aec:	4169      	adcs	r1, r5
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f7f9 fcd4 	bl	80004a8 <__aeabi_uldivmod>
 8006b00:	0002      	movs	r2, r0
 8006b02:	000b      	movs	r3, r1
 8006b04:	0013      	movs	r3, r2
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	23c0      	movs	r3, #192	; 0xc0
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d309      	bcc.n	8006b26 <UART_SetConfig+0x4be>
 8006b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	035b      	lsls	r3, r3, #13
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d204      	bcs.n	8006b26 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	e006      	b.n	8006b34 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006b26:	231a      	movs	r3, #26
 8006b28:	2220      	movs	r2, #32
 8006b2a:	189b      	adds	r3, r3, r2
 8006b2c:	19db      	adds	r3, r3, r7
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006b32:	e0d0      	b.n	8006cd6 <UART_SetConfig+0x66e>
 8006b34:	e0cf      	b.n	8006cd6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	69da      	ldr	r2, [r3, #28]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d000      	beq.n	8006b44 <UART_SetConfig+0x4dc>
 8006b42:	e070      	b.n	8006c26 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006b44:	231b      	movs	r3, #27
 8006b46:	2220      	movs	r2, #32
 8006b48:	189b      	adds	r3, r3, r2
 8006b4a:	19db      	adds	r3, r3, r7
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d015      	beq.n	8006b7e <UART_SetConfig+0x516>
 8006b52:	dc18      	bgt.n	8006b86 <UART_SetConfig+0x51e>
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d00d      	beq.n	8006b74 <UART_SetConfig+0x50c>
 8006b58:	dc15      	bgt.n	8006b86 <UART_SetConfig+0x51e>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <UART_SetConfig+0x4fc>
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d005      	beq.n	8006b6e <UART_SetConfig+0x506>
 8006b62:	e010      	b.n	8006b86 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fe f958 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8006b68:	0003      	movs	r3, r0
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b6c:	e014      	b.n	8006b98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6e:	4b67      	ldr	r3, [pc, #412]	; (8006d0c <UART_SetConfig+0x6a4>)
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b72:	e011      	b.n	8006b98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b74:	f7fe f8c4 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b7c:	e00c      	b.n	8006b98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b84:	e008      	b.n	8006b98 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006b8a:	231a      	movs	r3, #26
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	19db      	adds	r3, r3, r7
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
        break;
 8006b96:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d100      	bne.n	8006ba0 <UART_SetConfig+0x538>
 8006b9e:	e09a      	b.n	8006cd6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba4:	4b5a      	ldr	r3, [pc, #360]	; (8006d10 <UART_SetConfig+0x6a8>)
 8006ba6:	0052      	lsls	r2, r2, #1
 8006ba8:	5ad3      	ldrh	r3, [r2, r3]
 8006baa:	0019      	movs	r1, r3
 8006bac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bae:	f7f9 fac7 	bl	8000140 <__udivsi3>
 8006bb2:	0003      	movs	r3, r0
 8006bb4:	005a      	lsls	r2, r3, #1
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	18d2      	adds	r2, r2, r3
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	0019      	movs	r1, r3
 8006bc4:	0010      	movs	r0, r2
 8006bc6:	f7f9 fabb 	bl	8000140 <__udivsi3>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d921      	bls.n	8006c18 <UART_SetConfig+0x5b0>
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	025b      	lsls	r3, r3, #9
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d21c      	bcs.n	8006c18 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	200e      	movs	r0, #14
 8006be4:	2420      	movs	r4, #32
 8006be6:	1903      	adds	r3, r0, r4
 8006be8:	19db      	adds	r3, r3, r7
 8006bea:	210f      	movs	r1, #15
 8006bec:	438a      	bics	r2, r1
 8006bee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2207      	movs	r2, #7
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	b299      	uxth	r1, r3
 8006bfc:	1903      	adds	r3, r0, r4
 8006bfe:	19db      	adds	r3, r3, r7
 8006c00:	1902      	adds	r2, r0, r4
 8006c02:	19d2      	adds	r2, r2, r7
 8006c04:	8812      	ldrh	r2, [r2, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	1902      	adds	r2, r0, r4
 8006c10:	19d2      	adds	r2, r2, r7
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	e05e      	b.n	8006cd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006c18:	231a      	movs	r3, #26
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	189b      	adds	r3, r3, r2
 8006c1e:	19db      	adds	r3, r3, r7
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e057      	b.n	8006cd6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c26:	231b      	movs	r3, #27
 8006c28:	2220      	movs	r2, #32
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	19db      	adds	r3, r3, r7
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d015      	beq.n	8006c60 <UART_SetConfig+0x5f8>
 8006c34:	dc18      	bgt.n	8006c68 <UART_SetConfig+0x600>
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d00d      	beq.n	8006c56 <UART_SetConfig+0x5ee>
 8006c3a:	dc15      	bgt.n	8006c68 <UART_SetConfig+0x600>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <UART_SetConfig+0x5de>
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d005      	beq.n	8006c50 <UART_SetConfig+0x5e8>
 8006c44:	e010      	b.n	8006c68 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c46:	f7fe f8e7 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c4e:	e014      	b.n	8006c7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c50:	4b2e      	ldr	r3, [pc, #184]	; (8006d0c <UART_SetConfig+0x6a4>)
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c54:	e011      	b.n	8006c7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c56:	f7fe f853 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c5e:	e00c      	b.n	8006c7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c66:	e008      	b.n	8006c7a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006c6c:	231a      	movs	r3, #26
 8006c6e:	2220      	movs	r2, #32
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	19db      	adds	r3, r3, r7
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
        break;
 8006c78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02a      	beq.n	8006cd6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <UART_SetConfig+0x6a8>)
 8006c86:	0052      	lsls	r2, r2, #1
 8006c88:	5ad3      	ldrh	r3, [r2, r3]
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c8e:	f7f9 fa57 	bl	8000140 <__udivsi3>
 8006c92:	0003      	movs	r3, r0
 8006c94:	001a      	movs	r2, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	18d2      	adds	r2, r2, r3
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	0019      	movs	r1, r3
 8006ca4:	0010      	movs	r0, r2
 8006ca6:	f7f9 fa4b 	bl	8000140 <__udivsi3>
 8006caa:	0003      	movs	r3, r0
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b0f      	cmp	r3, #15
 8006cb2:	d90a      	bls.n	8006cca <UART_SetConfig+0x662>
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	2380      	movs	r3, #128	; 0x80
 8006cb8:	025b      	lsls	r3, r3, #9
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d205      	bcs.n	8006cca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	e005      	b.n	8006cd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006cca:	231a      	movs	r3, #26
 8006ccc:	2220      	movs	r2, #32
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	19db      	adds	r3, r3, r7
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	226a      	movs	r2, #106	; 0x6a
 8006cda:	2101      	movs	r1, #1
 8006cdc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	2268      	movs	r2, #104	; 0x68
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	2200      	movs	r2, #0
 8006cea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	2200      	movs	r2, #0
 8006cf0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cf2:	231a      	movs	r3, #26
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	19db      	adds	r3, r3, r7
 8006cfa:	781b      	ldrb	r3, [r3, #0]
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b010      	add	sp, #64	; 0x40
 8006d02:	bdb0      	pop	{r4, r5, r7, pc}
 8006d04:	40008000 	.word	0x40008000
 8006d08:	40008400 	.word	0x40008400
 8006d0c:	00f42400 	.word	0x00f42400
 8006d10:	0800b540 	.word	0x0800b540

08006d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	2201      	movs	r2, #1
 8006d22:	4013      	ands	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a4a      	ldr	r2, [pc, #296]	; (8006e58 <UART_AdvFeatureConfig+0x144>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	0019      	movs	r1, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	2202      	movs	r2, #2
 8006d44:	4013      	ands	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4a43      	ldr	r2, [pc, #268]	; (8006e5c <UART_AdvFeatureConfig+0x148>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	2204      	movs	r2, #4
 8006d66:	4013      	ands	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a3b      	ldr	r2, [pc, #236]	; (8006e60 <UART_AdvFeatureConfig+0x14c>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	0019      	movs	r1, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	2208      	movs	r2, #8
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d00b      	beq.n	8006da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <UART_AdvFeatureConfig+0x150>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	0019      	movs	r1, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	2210      	movs	r2, #16
 8006daa:	4013      	ands	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4a2c      	ldr	r2, [pc, #176]	; (8006e68 <UART_AdvFeatureConfig+0x154>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	0019      	movs	r1, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	2220      	movs	r2, #32
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <UART_AdvFeatureConfig+0x158>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	0019      	movs	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	2240      	movs	r2, #64	; 0x40
 8006dee:	4013      	ands	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <UART_AdvFeatureConfig+0x15c>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	0019      	movs	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	2380      	movs	r3, #128	; 0x80
 8006e10:	035b      	lsls	r3, r3, #13
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d10b      	bne.n	8006e2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <UART_AdvFeatureConfig+0x160>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	0019      	movs	r1, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	4013      	ands	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	4a0e      	ldr	r2, [pc, #56]	; (8006e78 <UART_AdvFeatureConfig+0x164>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	0019      	movs	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }
}
 8006e50:	46c0      	nop			; (mov r8, r8)
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b002      	add	sp, #8
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	fffdffff 	.word	0xfffdffff
 8006e5c:	fffeffff 	.word	0xfffeffff
 8006e60:	fffbffff 	.word	0xfffbffff
 8006e64:	ffff7fff 	.word	0xffff7fff
 8006e68:	ffffefff 	.word	0xffffefff
 8006e6c:	ffffdfff 	.word	0xffffdfff
 8006e70:	ffefffff 	.word	0xffefffff
 8006e74:	ff9fffff 	.word	0xff9fffff
 8006e78:	fff7ffff 	.word	0xfff7ffff

08006e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2290      	movs	r2, #144	; 0x90
 8006e88:	2100      	movs	r1, #0
 8006e8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e8c:	f7fc fdc4 	bl	8003a18 <HAL_GetTick>
 8006e90:	0003      	movs	r3, r0
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d10c      	bne.n	8006ebc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2280      	movs	r2, #128	; 0x80
 8006ea6:	0391      	lsls	r1, r2, #14
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <UART_CheckIdleState+0x98>)
 8006eac:	9200      	str	r2, [sp, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f000 f832 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006eb4:	1e03      	subs	r3, r0, #0
 8006eb6:	d001      	beq.n	8006ebc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e026      	b.n	8006f0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d10c      	bne.n	8006ee4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2280      	movs	r2, #128	; 0x80
 8006ece:	03d1      	lsls	r1, r2, #15
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4a10      	ldr	r2, [pc, #64]	; (8006f14 <UART_CheckIdleState+0x98>)
 8006ed4:	9200      	str	r2, [sp, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f000 f81e 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006edc:	1e03      	subs	r3, r0, #0
 8006ede:	d001      	beq.n	8006ee4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e012      	b.n	8006f0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2288      	movs	r2, #136	; 0x88
 8006ee8:	2120      	movs	r1, #32
 8006eea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	228c      	movs	r2, #140	; 0x8c
 8006ef0:	2120      	movs	r1, #32
 8006ef2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2284      	movs	r2, #132	; 0x84
 8006f04:	2100      	movs	r1, #0
 8006f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b004      	add	sp, #16
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	46c0      	nop			; (mov r8, r8)
 8006f14:	01ffffff 	.word	0x01ffffff

08006f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b094      	sub	sp, #80	; 0x50
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	1dfb      	adds	r3, r7, #7
 8006f26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f28:	e0a7      	b.n	800707a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	d100      	bne.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006f30:	e0a3      	b.n	800707a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fc fd71 	bl	8003a18 <HAL_GetTick>
 8006f36:	0002      	movs	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d13f      	bne.n	8006fc8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
 8006f52:	2301      	movs	r3, #1
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	494e      	ldr	r1, [pc, #312]	; (80070a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f70:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	643b      	str	r3, [r7, #64]	; 0x40
 8006f84:	2301      	movs	r3, #1
 8006f86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	f383 8810 	msr	PRIMASK, r3
}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2288      	movs	r2, #136	; 0x88
 8006fb0:	2120      	movs	r1, #32
 8006fb2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	228c      	movs	r2, #140	; 0x8c
 8006fb8:	2120      	movs	r1, #32
 8006fba:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2284      	movs	r2, #132	; 0x84
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e069      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d052      	beq.n	800707a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69da      	ldr	r2, [r3, #28]
 8006fda:	2380      	movs	r3, #128	; 0x80
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	401a      	ands	r2, r3
 8006fe0:	2380      	movs	r3, #128	; 0x80
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d148      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	0112      	lsls	r2, r2, #4
 8006ff0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ff8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4924      	ldr	r1, [pc, #144]	; (80070a4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007024:	f3ef 8310 	mrs	r3, PRIMASK
 8007028:	61fb      	str	r3, [r7, #28]
  return(result);
 800702a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702c:	64bb      	str	r3, [r7, #72]	; 0x48
 800702e:	2301      	movs	r3, #1
 8007030:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2101      	movs	r1, #1
 8007046:	438a      	bics	r2, r1
 8007048:	609a      	str	r2, [r3, #8]
 800704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	f383 8810 	msr	PRIMASK, r3
}
 8007054:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2288      	movs	r2, #136	; 0x88
 800705a:	2120      	movs	r1, #32
 800705c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	228c      	movs	r2, #140	; 0x8c
 8007062:	2120      	movs	r1, #32
 8007064:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2290      	movs	r2, #144	; 0x90
 800706a:	2120      	movs	r1, #32
 800706c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2284      	movs	r2, #132	; 0x84
 8007072:	2100      	movs	r1, #0
 8007074:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e010      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4013      	ands	r3, r2
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	425a      	negs	r2, r3
 800708a:	4153      	adcs	r3, r2
 800708c:	b2db      	uxtb	r3, r3
 800708e:	001a      	movs	r2, r3
 8007090:	1dfb      	adds	r3, r7, #7
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d100      	bne.n	800709a <UART_WaitOnFlagUntilTimeout+0x182>
 8007098:	e747      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	0018      	movs	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	b014      	add	sp, #80	; 0x50
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	fffffe5f 	.word	0xfffffe5f

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b098      	sub	sp, #96	; 0x60
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	1dbb      	adds	r3, r7, #6
 80070b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1dba      	adds	r2, r7, #6
 80070c0:	215c      	movs	r1, #92	; 0x5c
 80070c2:	8812      	ldrh	r2, [r2, #0]
 80070c4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1dba      	adds	r2, r7, #6
 80070ca:	215e      	movs	r1, #94	; 0x5e
 80070cc:	8812      	ldrh	r2, [r2, #0]
 80070ce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	015b      	lsls	r3, r3, #5
 80070de:	429a      	cmp	r2, r3
 80070e0:	d10d      	bne.n	80070fe <UART_Start_Receive_IT+0x56>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <UART_Start_Receive_IT+0x4c>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2260      	movs	r2, #96	; 0x60
 80070ee:	497b      	ldr	r1, [pc, #492]	; (80072dc <UART_Start_Receive_IT+0x234>)
 80070f0:	5299      	strh	r1, [r3, r2]
 80070f2:	e02e      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2260      	movs	r2, #96	; 0x60
 80070f8:	21ff      	movs	r1, #255	; 0xff
 80070fa:	5299      	strh	r1, [r3, r2]
 80070fc:	e029      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <UART_Start_Receive_IT+0x7a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <UART_Start_Receive_IT+0x70>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2260      	movs	r2, #96	; 0x60
 8007112:	21ff      	movs	r1, #255	; 0xff
 8007114:	5299      	strh	r1, [r3, r2]
 8007116:	e01c      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2260      	movs	r2, #96	; 0x60
 800711c:	217f      	movs	r1, #127	; 0x7f
 800711e:	5299      	strh	r1, [r3, r2]
 8007120:	e017      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	055b      	lsls	r3, r3, #21
 800712a:	429a      	cmp	r2, r3
 800712c:	d10d      	bne.n	800714a <UART_Start_Receive_IT+0xa2>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <UART_Start_Receive_IT+0x98>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2260      	movs	r2, #96	; 0x60
 800713a:	217f      	movs	r1, #127	; 0x7f
 800713c:	5299      	strh	r1, [r3, r2]
 800713e:	e008      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2260      	movs	r2, #96	; 0x60
 8007144:	213f      	movs	r1, #63	; 0x3f
 8007146:	5299      	strh	r1, [r3, r2]
 8007148:	e003      	b.n	8007152 <UART_Start_Receive_IT+0xaa>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2260      	movs	r2, #96	; 0x60
 800714e:	2100      	movs	r1, #0
 8007150:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2290      	movs	r2, #144	; 0x90
 8007156:	2100      	movs	r1, #0
 8007158:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	228c      	movs	r2, #140	; 0x8c
 800715e:	2122      	movs	r1, #34	; 0x22
 8007160:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007162:	f3ef 8310 	mrs	r3, PRIMASK
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007168:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716c:	2301      	movs	r3, #1
 800716e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2101      	movs	r1, #1
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800718a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	059b      	lsls	r3, r3, #22
 800719c:	429a      	cmp	r2, r3
 800719e:	d150      	bne.n	8007242 <UART_Start_Receive_IT+0x19a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2268      	movs	r2, #104	; 0x68
 80071a4:	5a9b      	ldrh	r3, [r3, r2]
 80071a6:	1dba      	adds	r2, r7, #6
 80071a8:	8812      	ldrh	r2, [r2, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d349      	bcc.n	8007242 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	2380      	movs	r3, #128	; 0x80
 80071b4:	015b      	lsls	r3, r3, #5
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d107      	bne.n	80071ca <UART_Start_Receive_IT+0x122>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a46      	ldr	r2, [pc, #280]	; (80072e0 <UART_Start_Receive_IT+0x238>)
 80071c6:	675a      	str	r2, [r3, #116]	; 0x74
 80071c8:	e002      	b.n	80071d0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a45      	ldr	r2, [pc, #276]	; (80072e4 <UART_Start_Receive_IT+0x23c>)
 80071ce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d019      	beq.n	800720c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d8:	f3ef 8310 	mrs	r3, PRIMASK
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071e2:	2301      	movs	r3, #1
 80071e4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	0049      	lsls	r1, r1, #1
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	f383 8810 	msr	PRIMASK, r3
}
 800720a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720c:	f3ef 8310 	mrs	r3, PRIMASK
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007214:	657b      	str	r3, [r7, #84]	; 0x54
 8007216:	2301      	movs	r3, #1
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	f383 8810 	msr	PRIMASK, r3
}
 8007220:	46c0      	nop			; (mov r8, r8)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	0549      	lsls	r1, r1, #21
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
 8007234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007236:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f383 8810 	msr	PRIMASK, r3
}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	e047      	b.n	80072d2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	015b      	lsls	r3, r3, #5
 800724a:	429a      	cmp	r2, r3
 800724c:	d107      	bne.n	800725e <UART_Start_Receive_IT+0x1b6>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a23      	ldr	r2, [pc, #140]	; (80072e8 <UART_Start_Receive_IT+0x240>)
 800725a:	675a      	str	r2, [r3, #116]	; 0x74
 800725c:	e002      	b.n	8007264 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a22      	ldr	r2, [pc, #136]	; (80072ec <UART_Start_Receive_IT+0x244>)
 8007262:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d019      	beq.n	80072a0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800726c:	f3ef 8310 	mrs	r3, PRIMASK
 8007270:	61fb      	str	r3, [r7, #28]
  return(result);
 8007272:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007276:	2301      	movs	r3, #1
 8007278:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f383 8810 	msr	PRIMASK, r3
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2190      	movs	r1, #144	; 0x90
 800728e:	0049      	lsls	r1, r1, #1
 8007290:	430a      	orrs	r2, r1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	e018      	b.n	80072d2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a0:	f3ef 8310 	mrs	r3, PRIMASK
 80072a4:	613b      	str	r3, [r7, #16]
  return(result);
 80072a6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072a8:	653b      	str	r3, [r7, #80]	; 0x50
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f383 8810 	msr	PRIMASK, r3
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2120      	movs	r1, #32
 80072c2:	430a      	orrs	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f383 8810 	msr	PRIMASK, r3
}
 80072d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	0018      	movs	r0, r3
 80072d6:	46bd      	mov	sp, r7
 80072d8:	b018      	add	sp, #96	; 0x60
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	000001ff 	.word	0x000001ff
 80072e0:	08007a19 	.word	0x08007a19
 80072e4:	0800772d 	.word	0x0800772d
 80072e8:	080075b9 	.word	0x080075b9
 80072ec:	08007445 	.word	0x08007445

080072f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08e      	sub	sp, #56	; 0x38
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f8:	f3ef 8310 	mrs	r3, PRIMASK
 80072fc:	617b      	str	r3, [r7, #20]
  return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
 8007302:	2301      	movs	r3, #1
 8007304:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f383 8810 	msr	PRIMASK, r3
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4926      	ldr	r1, [pc, #152]	; (80073b4 <UART_EndRxTransfer+0xc4>)
 800731a:	400a      	ands	r2, r1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f383 8810 	msr	PRIMASK, r3
}
 8007328:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732a:	f3ef 8310 	mrs	r3, PRIMASK
 800732e:	623b      	str	r3, [r7, #32]
  return(result);
 8007330:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007332:	633b      	str	r3, [r7, #48]	; 0x30
 8007334:	2301      	movs	r3, #1
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	f383 8810 	msr	PRIMASK, r3
}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	491b      	ldr	r1, [pc, #108]	; (80073b8 <UART_EndRxTransfer+0xc8>)
 800734c:	400a      	ands	r2, r1
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f383 8810 	msr	PRIMASK, r3
}
 800735a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007360:	2b01      	cmp	r3, #1
 8007362:	d118      	bne.n	8007396 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007364:	f3ef 8310 	mrs	r3, PRIMASK
 8007368:	60bb      	str	r3, [r7, #8]
  return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736e:	2301      	movs	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f383 8810 	msr	PRIMASK, r3
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2110      	movs	r1, #16
 8007386:	438a      	bics	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	228c      	movs	r2, #140	; 0x8c
 800739a:	2120      	movs	r1, #32
 800739c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	46bd      	mov	sp, r7
 80073ae:	b00e      	add	sp, #56	; 0x38
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	fffffedf 	.word	0xfffffedf
 80073b8:	effffffe 	.word	0xeffffffe

080073bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	225e      	movs	r2, #94	; 0x5e
 80073ce:	2100      	movs	r1, #0
 80073d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2256      	movs	r2, #86	; 0x56
 80073d6:	2100      	movs	r1, #0
 80073d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	0018      	movs	r0, r3
 80073de:	f7ff f93b 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b004      	add	sp, #16
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f2:	f3ef 8310 	mrs	r3, PRIMASK
 80073f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	2301      	movs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f383 8810 	msr	PRIMASK, r3
}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2140      	movs	r1, #64	; 0x40
 8007414:	438a      	bics	r2, r1
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f383 8810 	msr	PRIMASK, r3
}
 8007422:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2288      	movs	r2, #136	; 0x88
 8007428:	2120      	movs	r1, #32
 800742a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f7ff f8ff 	bl	8006638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b006      	add	sp, #24
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b090      	sub	sp, #64	; 0x40
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800744c:	203e      	movs	r0, #62	; 0x3e
 800744e:	183b      	adds	r3, r7, r0
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	2160      	movs	r1, #96	; 0x60
 8007454:	5a52      	ldrh	r2, [r2, r1]
 8007456:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	228c      	movs	r2, #140	; 0x8c
 800745c:	589b      	ldr	r3, [r3, r2]
 800745e:	2b22      	cmp	r3, #34	; 0x22
 8007460:	d000      	beq.n	8007464 <UART_RxISR_8BIT+0x20>
 8007462:	e09a      	b.n	800759a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800746a:	213c      	movs	r1, #60	; 0x3c
 800746c:	187b      	adds	r3, r7, r1
 800746e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007470:	187b      	adds	r3, r7, r1
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b2da      	uxtb	r2, r3
 8007476:	183b      	adds	r3, r7, r0
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b2d9      	uxtb	r1, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007480:	400a      	ands	r2, r1
 8007482:	b2d2      	uxtb	r2, r2
 8007484:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	225e      	movs	r2, #94	; 0x5e
 8007494:	5a9b      	ldrh	r3, [r3, r2]
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b299      	uxth	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	225e      	movs	r2, #94	; 0x5e
 80074a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	225e      	movs	r2, #94	; 0x5e
 80074a6:	5a9b      	ldrh	r3, [r3, r2]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d000      	beq.n	80074b0 <UART_RxISR_8BIT+0x6c>
 80074ae:	e07c      	b.n	80075aa <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b0:	f3ef 8310 	mrs	r3, PRIMASK
 80074b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80074b6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ba:	2301      	movs	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4938      	ldr	r1, [pc, #224]	; (80075b4 <UART_RxISR_8BIT+0x170>)
 80074d2:	400a      	ands	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e2:	f3ef 8310 	mrs	r3, PRIMASK
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	2301      	movs	r3, #1
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2101      	movs	r1, #1
 8007504:	438a      	bics	r2, r1
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	f383 8810 	msr	PRIMASK, r3
}
 8007512:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	228c      	movs	r2, #140	; 0x8c
 8007518:	2120      	movs	r1, #32
 800751a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d12f      	bne.n	8007590 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007536:	f3ef 8310 	mrs	r3, PRIMASK
 800753a:	60fb      	str	r3, [r7, #12]
  return(result);
 800753c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
 8007540:	2301      	movs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2110      	movs	r1, #16
 8007558:	438a      	bics	r2, r1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f383 8810 	msr	PRIMASK, r3
}
 8007566:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	2210      	movs	r2, #16
 8007570:	4013      	ands	r3, r2
 8007572:	2b10      	cmp	r3, #16
 8007574:	d103      	bne.n	800757e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	225c      	movs	r2, #92	; 0x5c
 8007582:	5a9a      	ldrh	r2, [r3, r2]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	0011      	movs	r1, r2
 8007588:	0018      	movs	r0, r3
 800758a:	f7fa ff6d 	bl	8002468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800758e:	e00c      	b.n	80075aa <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	0018      	movs	r0, r3
 8007594:	f7ff f858 	bl	8006648 <HAL_UART_RxCpltCallback>
}
 8007598:	e007      	b.n	80075aa <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2108      	movs	r1, #8
 80075a6:	430a      	orrs	r2, r1
 80075a8:	619a      	str	r2, [r3, #24]
}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b010      	add	sp, #64	; 0x40
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	fffffedf 	.word	0xfffffedf

080075b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b090      	sub	sp, #64	; 0x40
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075c0:	203e      	movs	r0, #62	; 0x3e
 80075c2:	183b      	adds	r3, r7, r0
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	2160      	movs	r1, #96	; 0x60
 80075c8:	5a52      	ldrh	r2, [r2, r1]
 80075ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	228c      	movs	r2, #140	; 0x8c
 80075d0:	589b      	ldr	r3, [r3, r2]
 80075d2:	2b22      	cmp	r3, #34	; 0x22
 80075d4:	d000      	beq.n	80075d8 <UART_RxISR_16BIT+0x20>
 80075d6:	e09a      	b.n	800770e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075de:	213c      	movs	r1, #60	; 0x3c
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	183a      	adds	r2, r7, r0
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	8812      	ldrh	r2, [r2, #0]
 80075f2:	4013      	ands	r3, r2
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	225e      	movs	r2, #94	; 0x5e
 8007608:	5a9b      	ldrh	r3, [r3, r2]
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b299      	uxth	r1, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	225e      	movs	r2, #94	; 0x5e
 8007614:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	225e      	movs	r2, #94	; 0x5e
 800761a:	5a9b      	ldrh	r3, [r3, r2]
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d000      	beq.n	8007624 <UART_RxISR_16BIT+0x6c>
 8007622:	e07c      	b.n	800771e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007624:	f3ef 8310 	mrs	r3, PRIMASK
 8007628:	617b      	str	r3, [r7, #20]
  return(result);
 800762a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	2301      	movs	r3, #1
 8007630:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	f383 8810 	msr	PRIMASK, r3
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4938      	ldr	r1, [pc, #224]	; (8007728 <UART_RxISR_16BIT+0x170>)
 8007646:	400a      	ands	r2, r1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f383 8810 	msr	PRIMASK, r3
}
 8007654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007656:	f3ef 8310 	mrs	r3, PRIMASK
 800765a:	623b      	str	r3, [r7, #32]
  return(result);
 800765c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765e:	633b      	str	r3, [r7, #48]	; 0x30
 8007660:	2301      	movs	r3, #1
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	f383 8810 	msr	PRIMASK, r3
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2101      	movs	r1, #1
 8007678:	438a      	bics	r2, r1
 800767a:	609a      	str	r2, [r3, #8]
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	f383 8810 	msr	PRIMASK, r3
}
 8007686:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	228c      	movs	r2, #140	; 0x8c
 800768c:	2120      	movs	r1, #32
 800768e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d12f      	bne.n	8007704 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076aa:	f3ef 8310 	mrs	r3, PRIMASK
 80076ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80076b0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2110      	movs	r1, #16
 80076cc:	438a      	bics	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f383 8810 	msr	PRIMASK, r3
}
 80076da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	2210      	movs	r2, #16
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d103      	bne.n	80076f2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2210      	movs	r2, #16
 80076f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	225c      	movs	r2, #92	; 0x5c
 80076f6:	5a9a      	ldrh	r2, [r3, r2]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	0011      	movs	r1, r2
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7fa feb3 	bl	8002468 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007702:	e00c      	b.n	800771e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	0018      	movs	r0, r3
 8007708:	f7fe ff9e 	bl	8006648 <HAL_UART_RxCpltCallback>
}
 800770c:	e007      	b.n	800771e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699a      	ldr	r2, [r3, #24]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2108      	movs	r1, #8
 800771a:	430a      	orrs	r2, r1
 800771c:	619a      	str	r2, [r3, #24]
}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	46bd      	mov	sp, r7
 8007722:	b010      	add	sp, #64	; 0x40
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	fffffedf 	.word	0xfffffedf

0800772c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b09c      	sub	sp, #112	; 0x70
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007734:	236a      	movs	r3, #106	; 0x6a
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	2160      	movs	r1, #96	; 0x60
 800773c:	5a52      	ldrh	r2, [r2, r1]
 800773e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	228c      	movs	r2, #140	; 0x8c
 800775c:	589b      	ldr	r3, [r3, r2]
 800775e:	2b22      	cmp	r3, #34	; 0x22
 8007760:	d000      	beq.n	8007764 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007762:	e144      	b.n	80079ee <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007764:	235e      	movs	r3, #94	; 0x5e
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	2168      	movs	r1, #104	; 0x68
 800776c:	5a52      	ldrh	r2, [r2, r1]
 800776e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007770:	e0eb      	b.n	800794a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007778:	215c      	movs	r1, #92	; 0x5c
 800777a:	187b      	adds	r3, r7, r1
 800777c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800777e:	187b      	adds	r3, r7, r1
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	236a      	movs	r3, #106	; 0x6a
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b2d9      	uxtb	r1, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007790:	400a      	ands	r2, r1
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	225e      	movs	r2, #94	; 0x5e
 80077a4:	5a9b      	ldrh	r3, [r3, r2]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b299      	uxth	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	225e      	movs	r2, #94	; 0x5e
 80077b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077bc:	2207      	movs	r2, #7
 80077be:	4013      	ands	r3, r2
 80077c0:	d049      	beq.n	8007856 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	2201      	movs	r2, #1
 80077c6:	4013      	ands	r3, r2
 80077c8:	d010      	beq.n	80077ec <UART_RxISR_8BIT_FIFOEN+0xc0>
 80077ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4013      	ands	r3, r2
 80077d2:	d00b      	beq.n	80077ec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2201      	movs	r2, #1
 80077da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2290      	movs	r2, #144	; 0x90
 80077e0:	589b      	ldr	r3, [r3, r2]
 80077e2:	2201      	movs	r2, #1
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2190      	movs	r1, #144	; 0x90
 80077ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ee:	2202      	movs	r2, #2
 80077f0:	4013      	ands	r3, r2
 80077f2:	d00f      	beq.n	8007814 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80077f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f6:	2201      	movs	r2, #1
 80077f8:	4013      	ands	r3, r2
 80077fa:	d00b      	beq.n	8007814 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2202      	movs	r2, #2
 8007802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2290      	movs	r2, #144	; 0x90
 8007808:	589b      	ldr	r3, [r3, r2]
 800780a:	2204      	movs	r2, #4
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2190      	movs	r1, #144	; 0x90
 8007812:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007816:	2204      	movs	r2, #4
 8007818:	4013      	ands	r3, r2
 800781a:	d00f      	beq.n	800783c <UART_RxISR_8BIT_FIFOEN+0x110>
 800781c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781e:	2201      	movs	r2, #1
 8007820:	4013      	ands	r3, r2
 8007822:	d00b      	beq.n	800783c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2204      	movs	r2, #4
 800782a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2290      	movs	r2, #144	; 0x90
 8007830:	589b      	ldr	r3, [r3, r2]
 8007832:	2202      	movs	r2, #2
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2190      	movs	r1, #144	; 0x90
 800783a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2290      	movs	r2, #144	; 0x90
 8007840:	589b      	ldr	r3, [r3, r2]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	0018      	movs	r0, r3
 800784a:	f7fe ff05 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2290      	movs	r2, #144	; 0x90
 8007852:	2100      	movs	r1, #0
 8007854:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	225e      	movs	r2, #94	; 0x5e
 800785a:	5a9b      	ldrh	r3, [r3, r2]
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d173      	bne.n	800794a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007862:	f3ef 8310 	mrs	r3, PRIMASK
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786a:	65bb      	str	r3, [r7, #88]	; 0x58
 800786c:	2301      	movs	r3, #1
 800786e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f383 8810 	msr	PRIMASK, r3
}
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4961      	ldr	r1, [pc, #388]	; (8007a08 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007884:	400a      	ands	r2, r1
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	f383 8810 	msr	PRIMASK, r3
}
 8007892:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007894:	f3ef 8310 	mrs	r3, PRIMASK
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789c:	657b      	str	r3, [r7, #84]	; 0x54
 800789e:	2301      	movs	r3, #1
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a4:	f383 8810 	msr	PRIMASK, r3
}
 80078a8:	46c0      	nop			; (mov r8, r8)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4955      	ldr	r1, [pc, #340]	; (8007a0c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80078b6:	400a      	ands	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]
 80078ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	f383 8810 	msr	PRIMASK, r3
}
 80078c4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	228c      	movs	r2, #140	; 0x8c
 80078ca:	2120      	movs	r1, #32
 80078cc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d12f      	bne.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ec:	623b      	str	r3, [r7, #32]
  return(result);
 80078ee:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
 80078f2:	2301      	movs	r3, #1
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	f383 8810 	msr	PRIMASK, r3
}
 80078fc:	46c0      	nop			; (mov r8, r8)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2110      	movs	r1, #16
 800790a:	438a      	bics	r2, r1
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	f383 8810 	msr	PRIMASK, r3
}
 8007918:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2210      	movs	r2, #16
 8007922:	4013      	ands	r3, r2
 8007924:	2b10      	cmp	r3, #16
 8007926:	d103      	bne.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2210      	movs	r2, #16
 800792e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	225c      	movs	r2, #92	; 0x5c
 8007934:	5a9a      	ldrh	r2, [r3, r2]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0011      	movs	r1, r2
 800793a:	0018      	movs	r0, r3
 800793c:	f7fa fd94 	bl	8002468 <HAL_UARTEx_RxEventCallback>
 8007940:	e003      	b.n	800794a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0018      	movs	r0, r3
 8007946:	f7fe fe7f 	bl	8006648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800794a:	235e      	movs	r3, #94	; 0x5e
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <UART_RxISR_8BIT_FIFOEN+0x232>
 8007954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007956:	2220      	movs	r2, #32
 8007958:	4013      	ands	r3, r2
 800795a:	d000      	beq.n	800795e <UART_RxISR_8BIT_FIFOEN+0x232>
 800795c:	e709      	b.n	8007772 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800795e:	204e      	movs	r0, #78	; 0x4e
 8007960:	183b      	adds	r3, r7, r0
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	215e      	movs	r1, #94	; 0x5e
 8007966:	5a52      	ldrh	r2, [r2, r1]
 8007968:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800796a:	0001      	movs	r1, r0
 800796c:	187b      	adds	r3, r7, r1
 800796e:	881b      	ldrh	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d044      	beq.n	80079fe <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2268      	movs	r2, #104	; 0x68
 8007978:	5a9b      	ldrh	r3, [r3, r2]
 800797a:	187a      	adds	r2, r7, r1
 800797c:	8812      	ldrh	r2, [r2, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d23d      	bcs.n	80079fe <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007982:	f3ef 8310 	mrs	r3, PRIMASK
 8007986:	60bb      	str	r3, [r7, #8]
  return(result);
 8007988:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800798a:	64bb      	str	r3, [r7, #72]	; 0x48
 800798c:	2301      	movs	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f383 8810 	msr	PRIMASK, r3
}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	491b      	ldr	r1, [pc, #108]	; (8007a10 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80079a4:	400a      	ands	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f383 8810 	msr	PRIMASK, r3
}
 80079b2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a17      	ldr	r2, [pc, #92]	; (8007a14 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80079b8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ba:	f3ef 8310 	mrs	r3, PRIMASK
 80079be:	617b      	str	r3, [r7, #20]
  return(result);
 80079c0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079c2:	647b      	str	r3, [r7, #68]	; 0x44
 80079c4:	2301      	movs	r3, #1
 80079c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f383 8810 	msr	PRIMASK, r3
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2120      	movs	r1, #32
 80079dc:	430a      	orrs	r2, r1
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f383 8810 	msr	PRIMASK, r3
}
 80079ea:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ec:	e007      	b.n	80079fe <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	699a      	ldr	r2, [r3, #24]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2108      	movs	r1, #8
 80079fa:	430a      	orrs	r2, r1
 80079fc:	619a      	str	r2, [r3, #24]
}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b01c      	add	sp, #112	; 0x70
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	fffffeff 	.word	0xfffffeff
 8007a0c:	effffffe 	.word	0xeffffffe
 8007a10:	efffffff 	.word	0xefffffff
 8007a14:	08007445 	.word	0x08007445

08007a18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b09e      	sub	sp, #120	; 0x78
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a20:	2372      	movs	r3, #114	; 0x72
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	2160      	movs	r1, #96	; 0x60
 8007a28:	5a52      	ldrh	r2, [r2, r1]
 8007a2a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	228c      	movs	r2, #140	; 0x8c
 8007a48:	589b      	ldr	r3, [r3, r2]
 8007a4a:	2b22      	cmp	r3, #34	; 0x22
 8007a4c:	d000      	beq.n	8007a50 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007a4e:	e144      	b.n	8007cda <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a50:	2366      	movs	r3, #102	; 0x66
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	2168      	movs	r1, #104	; 0x68
 8007a58:	5a52      	ldrh	r2, [r2, r1]
 8007a5a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a5c:	e0eb      	b.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a64:	2164      	movs	r1, #100	; 0x64
 8007a66:	187b      	adds	r3, r7, r1
 8007a68:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	2272      	movs	r2, #114	; 0x72
 8007a74:	18ba      	adds	r2, r7, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	8812      	ldrh	r2, [r2, #0]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	1c9a      	adds	r2, r3, #2
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	225e      	movs	r2, #94	; 0x5e
 8007a90:	5a9b      	ldrh	r3, [r3, r2]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b299      	uxth	r1, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	225e      	movs	r2, #94	; 0x5e
 8007a9c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa8:	2207      	movs	r2, #7
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d049      	beq.n	8007b42 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	d010      	beq.n	8007ad8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007ab6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ab8:	2380      	movs	r3, #128	; 0x80
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4013      	ands	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2290      	movs	r2, #144	; 0x90
 8007acc:	589b      	ldr	r3, [r3, r2]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2190      	movs	r1, #144	; 0x90
 8007ad6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ada:	2202      	movs	r2, #2
 8007adc:	4013      	ands	r3, r2
 8007ade:	d00f      	beq.n	8007b00 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2202      	movs	r2, #2
 8007aee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2290      	movs	r2, #144	; 0x90
 8007af4:	589b      	ldr	r3, [r3, r2]
 8007af6:	2204      	movs	r2, #4
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2190      	movs	r1, #144	; 0x90
 8007afe:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b02:	2204      	movs	r2, #4
 8007b04:	4013      	ands	r3, r2
 8007b06:	d00f      	beq.n	8007b28 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d00b      	beq.n	8007b28 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2204      	movs	r2, #4
 8007b16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2290      	movs	r2, #144	; 0x90
 8007b1c:	589b      	ldr	r3, [r3, r2]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2190      	movs	r1, #144	; 0x90
 8007b26:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2290      	movs	r2, #144	; 0x90
 8007b2c:	589b      	ldr	r3, [r3, r2]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f7fe fd8f 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2290      	movs	r2, #144	; 0x90
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	225e      	movs	r2, #94	; 0x5e
 8007b46:	5a9b      	ldrh	r3, [r3, r2]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d173      	bne.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b58:	2301      	movs	r3, #1
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	f383 8810 	msr	PRIMASK, r3
}
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4961      	ldr	r1, [pc, #388]	; (8007cf4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007b70:	400a      	ands	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	f383 8810 	msr	PRIMASK, r3
}
 8007b7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b80:	f3ef 8310 	mrs	r3, PRIMASK
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b90:	f383 8810 	msr	PRIMASK, r3
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4955      	ldr	r1, [pc, #340]	; (8007cf8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8007ba2:	400a      	ands	r2, r1
 8007ba4:	609a      	str	r2, [r3, #8]
 8007ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bac:	f383 8810 	msr	PRIMASK, r3
}
 8007bb0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	228c      	movs	r2, #140	; 0x8c
 8007bb6:	2120      	movs	r1, #32
 8007bb8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d12f      	bne.n	8007c2e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bde:	2301      	movs	r3, #1
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	f383 8810 	msr	PRIMASK, r3
}
 8007be8:	46c0      	nop			; (mov r8, r8)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2110      	movs	r1, #16
 8007bf6:	438a      	bics	r2, r1
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	f383 8810 	msr	PRIMASK, r3
}
 8007c04:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	4013      	ands	r3, r2
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d103      	bne.n	8007c1c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2210      	movs	r2, #16
 8007c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	225c      	movs	r2, #92	; 0x5c
 8007c20:	5a9a      	ldrh	r2, [r3, r2]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	0011      	movs	r1, r2
 8007c26:	0018      	movs	r0, r3
 8007c28:	f7fa fc1e 	bl	8002468 <HAL_UARTEx_RxEventCallback>
 8007c2c:	e003      	b.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	0018      	movs	r0, r3
 8007c32:	f7fe fd09 	bl	8006648 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c36:	2366      	movs	r3, #102	; 0x66
 8007c38:	18fb      	adds	r3, r7, r3
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d004      	beq.n	8007c4a <UART_RxISR_16BIT_FIFOEN+0x232>
 8007c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c42:	2220      	movs	r2, #32
 8007c44:	4013      	ands	r3, r2
 8007c46:	d000      	beq.n	8007c4a <UART_RxISR_16BIT_FIFOEN+0x232>
 8007c48:	e709      	b.n	8007a5e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c4a:	2052      	movs	r0, #82	; 0x52
 8007c4c:	183b      	adds	r3, r7, r0
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	215e      	movs	r1, #94	; 0x5e
 8007c52:	5a52      	ldrh	r2, [r2, r1]
 8007c54:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c56:	0001      	movs	r1, r0
 8007c58:	187b      	adds	r3, r7, r1
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d044      	beq.n	8007cea <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2268      	movs	r2, #104	; 0x68
 8007c64:	5a9b      	ldrh	r3, [r3, r2]
 8007c66:	187a      	adds	r2, r7, r1
 8007c68:	8812      	ldrh	r2, [r2, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d23d      	bcs.n	8007cea <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c74:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c78:	2301      	movs	r3, #1
 8007c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f383 8810 	msr	PRIMASK, r3
}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	491b      	ldr	r1, [pc, #108]	; (8007cfc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8007c90:	400a      	ands	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f383 8810 	msr	PRIMASK, r3
}
 8007c9e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8007ca4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cac:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f383 8810 	msr	PRIMASK, r3
}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2120      	movs	r1, #32
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	f383 8810 	msr	PRIMASK, r3
}
 8007cd6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cd8:	e007      	b.n	8007cea <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2108      	movs	r1, #8
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	619a      	str	r2, [r3, #24]
}
 8007cea:	46c0      	nop			; (mov r8, r8)
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b01e      	add	sp, #120	; 0x78
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	fffffeff 	.word	0xfffffeff
 8007cf8:	effffffe 	.word	0xeffffffe
 8007cfc:	efffffff 	.word	0xefffffff
 8007d00:	080075b9 	.word	0x080075b9

08007d04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b002      	add	sp, #8
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b002      	add	sp, #8
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2284      	movs	r2, #132	; 0x84
 8007d40:	5c9b      	ldrb	r3, [r3, r2]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e027      	b.n	8007d9a <HAL_UARTEx_DisableFifoMode+0x66>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2284      	movs	r2, #132	; 0x84
 8007d4e:	2101      	movs	r1, #1
 8007d50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2288      	movs	r2, #136	; 0x88
 8007d56:	2124      	movs	r1, #36	; 0x24
 8007d58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	438a      	bics	r2, r1
 8007d70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2288      	movs	r2, #136	; 0x88
 8007d8c:	2120      	movs	r1, #32
 8007d8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2284      	movs	r2, #132	; 0x84
 8007d94:	2100      	movs	r1, #0
 8007d96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	b004      	add	sp, #16
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	dfffffff 	.word	0xdfffffff

08007da8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2284      	movs	r2, #132	; 0x84
 8007db6:	5c9b      	ldrb	r3, [r3, r2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e02e      	b.n	8007e1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2284      	movs	r2, #132	; 0x84
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2288      	movs	r2, #136	; 0x88
 8007dcc:	2124      	movs	r1, #36	; 0x24
 8007dce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2101      	movs	r1, #1
 8007de4:	438a      	bics	r2, r1
 8007de6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	08d9      	lsrs	r1, r3, #3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 f8bc 	bl	8007f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2288      	movs	r2, #136	; 0x88
 8007e10:	2120      	movs	r1, #32
 8007e12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2284      	movs	r2, #132	; 0x84
 8007e18:	2100      	movs	r1, #0
 8007e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	0018      	movs	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b004      	add	sp, #16
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2284      	movs	r2, #132	; 0x84
 8007e36:	5c9b      	ldrb	r3, [r3, r2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e02f      	b.n	8007ea0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2284      	movs	r2, #132	; 0x84
 8007e44:	2101      	movs	r1, #1
 8007e46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2288      	movs	r2, #136	; 0x88
 8007e4c:	2124      	movs	r1, #36	; 0x24
 8007e4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2101      	movs	r1, #1
 8007e64:	438a      	bics	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	0019      	movs	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f87b 	bl	8007f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2288      	movs	r2, #136	; 0x88
 8007e92:	2120      	movs	r1, #32
 8007e94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2284      	movs	r2, #132	; 0x84
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	f1ffffff 	.word	0xf1ffffff

08007eac <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eac:	b5b0      	push	{r4, r5, r7, lr}
 8007eae:	b08a      	sub	sp, #40	; 0x28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	1dbb      	adds	r3, r7, #6
 8007eb8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	228c      	movs	r2, #140	; 0x8c
 8007ebe:	589b      	ldr	r3, [r3, r2]
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d156      	bne.n	8007f72 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8007eca:	1dbb      	adds	r3, r7, #6
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e04e      	b.n	8007f74 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	2380      	movs	r3, #128	; 0x80
 8007edc:	015b      	lsls	r3, r3, #5
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d109      	bne.n	8007ef6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d105      	bne.n	8007ef6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2201      	movs	r2, #1
 8007eee:	4013      	ands	r3, r2
 8007ef0:	d001      	beq.n	8007ef6 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e03e      	b.n	8007f74 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007f02:	2527      	movs	r5, #39	; 0x27
 8007f04:	197c      	adds	r4, r7, r5
 8007f06:	1dbb      	adds	r3, r7, #6
 8007f08:	881a      	ldrh	r2, [r3, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f7ff f8ca 	bl	80070a8 <UART_Start_Receive_IT>
 8007f14:	0003      	movs	r3, r0
 8007f16:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007f18:	197b      	adds	r3, r7, r5
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d124      	bne.n	8007f6a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11c      	bne.n	8007f62 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f30:	f3ef 8310 	mrs	r3, PRIMASK
 8007f34:	617b      	str	r3, [r7, #20]
  return(result);
 8007f36:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f383 8810 	msr	PRIMASK, r3
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2110      	movs	r1, #16
 8007f52:	430a      	orrs	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f383 8810 	msr	PRIMASK, r3
}
 8007f60:	e003      	b.n	8007f6a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007f62:	2327      	movs	r3, #39	; 0x27
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	2201      	movs	r2, #1
 8007f68:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8007f6a:	2327      	movs	r3, #39	; 0x27
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	e000      	b.n	8007f74 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
  }
}
 8007f74:	0018      	movs	r0, r3
 8007f76:	46bd      	mov	sp, r7
 8007f78:	b00a      	add	sp, #40	; 0x28
 8007f7a:	bdb0      	pop	{r4, r5, r7, pc}

08007f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d108      	bne.n	8007f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	226a      	movs	r2, #106	; 0x6a
 8007f90:	2101      	movs	r1, #1
 8007f92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2268      	movs	r2, #104	; 0x68
 8007f98:	2101      	movs	r1, #1
 8007f9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f9c:	e043      	b.n	8008026 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f9e:	260f      	movs	r6, #15
 8007fa0:	19bb      	adds	r3, r7, r6
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fa6:	200e      	movs	r0, #14
 8007fa8:	183b      	adds	r3, r7, r0
 8007faa:	2208      	movs	r2, #8
 8007fac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	0e5b      	lsrs	r3, r3, #25
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	240d      	movs	r4, #13
 8007fba:	193b      	adds	r3, r7, r4
 8007fbc:	2107      	movs	r1, #7
 8007fbe:	400a      	ands	r2, r1
 8007fc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	0f5b      	lsrs	r3, r3, #29
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	250c      	movs	r5, #12
 8007fce:	197b      	adds	r3, r7, r5
 8007fd0:	2107      	movs	r1, #7
 8007fd2:	400a      	ands	r2, r1
 8007fd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd6:	183b      	adds	r3, r7, r0
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	197a      	adds	r2, r7, r5
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	4914      	ldr	r1, [pc, #80]	; (8008030 <UARTEx_SetNbDataToProcess+0xb4>)
 8007fe0:	5c8a      	ldrb	r2, [r1, r2]
 8007fe2:	435a      	muls	r2, r3
 8007fe4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fe6:	197b      	adds	r3, r7, r5
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	4a12      	ldr	r2, [pc, #72]	; (8008034 <UARTEx_SetNbDataToProcess+0xb8>)
 8007fec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fee:	0019      	movs	r1, r3
 8007ff0:	f7f8 f930 	bl	8000254 <__divsi3>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	b299      	uxth	r1, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	226a      	movs	r2, #106	; 0x6a
 8007ffc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ffe:	19bb      	adds	r3, r7, r6
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	193a      	adds	r2, r7, r4
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	490a      	ldr	r1, [pc, #40]	; (8008030 <UARTEx_SetNbDataToProcess+0xb4>)
 8008008:	5c8a      	ldrb	r2, [r1, r2]
 800800a:	435a      	muls	r2, r3
 800800c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800800e:	193b      	adds	r3, r7, r4
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	4a08      	ldr	r2, [pc, #32]	; (8008034 <UARTEx_SetNbDataToProcess+0xb8>)
 8008014:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008016:	0019      	movs	r1, r3
 8008018:	f7f8 f91c 	bl	8000254 <__divsi3>
 800801c:	0003      	movs	r3, r0
 800801e:	b299      	uxth	r1, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2268      	movs	r2, #104	; 0x68
 8008024:	5299      	strh	r1, [r3, r2]
}
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	46bd      	mov	sp, r7
 800802a:	b005      	add	sp, #20
 800802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	0800b558 	.word	0x0800b558
 8008034:	0800b560 	.word	0x0800b560

08008038 <__errno>:
 8008038:	4b01      	ldr	r3, [pc, #4]	; (8008040 <__errno+0x8>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	2000040c 	.word	0x2000040c

08008044 <__libc_init_array>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	2600      	movs	r6, #0
 8008048:	4d0c      	ldr	r5, [pc, #48]	; (800807c <__libc_init_array+0x38>)
 800804a:	4c0d      	ldr	r4, [pc, #52]	; (8008080 <__libc_init_array+0x3c>)
 800804c:	1b64      	subs	r4, r4, r5
 800804e:	10a4      	asrs	r4, r4, #2
 8008050:	42a6      	cmp	r6, r4
 8008052:	d109      	bne.n	8008068 <__libc_init_array+0x24>
 8008054:	2600      	movs	r6, #0
 8008056:	f002 ff5f 	bl	800af18 <_init>
 800805a:	4d0a      	ldr	r5, [pc, #40]	; (8008084 <__libc_init_array+0x40>)
 800805c:	4c0a      	ldr	r4, [pc, #40]	; (8008088 <__libc_init_array+0x44>)
 800805e:	1b64      	subs	r4, r4, r5
 8008060:	10a4      	asrs	r4, r4, #2
 8008062:	42a6      	cmp	r6, r4
 8008064:	d105      	bne.n	8008072 <__libc_init_array+0x2e>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	00b3      	lsls	r3, r6, #2
 800806a:	58eb      	ldr	r3, [r5, r3]
 800806c:	4798      	blx	r3
 800806e:	3601      	adds	r6, #1
 8008070:	e7ee      	b.n	8008050 <__libc_init_array+0xc>
 8008072:	00b3      	lsls	r3, r6, #2
 8008074:	58eb      	ldr	r3, [r5, r3]
 8008076:	4798      	blx	r3
 8008078:	3601      	adds	r6, #1
 800807a:	e7f2      	b.n	8008062 <__libc_init_array+0x1e>
 800807c:	0800b94c 	.word	0x0800b94c
 8008080:	0800b94c 	.word	0x0800b94c
 8008084:	0800b94c 	.word	0x0800b94c
 8008088:	0800b950 	.word	0x0800b950

0800808c <memcpy>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	429a      	cmp	r2, r3
 8008092:	d100      	bne.n	8008096 <memcpy+0xa>
 8008094:	bd10      	pop	{r4, pc}
 8008096:	5ccc      	ldrb	r4, [r1, r3]
 8008098:	54c4      	strb	r4, [r0, r3]
 800809a:	3301      	adds	r3, #1
 800809c:	e7f8      	b.n	8008090 <memcpy+0x4>

0800809e <memset>:
 800809e:	0003      	movs	r3, r0
 80080a0:	1882      	adds	r2, r0, r2
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d100      	bne.n	80080a8 <memset+0xa>
 80080a6:	4770      	bx	lr
 80080a8:	7019      	strb	r1, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	e7f9      	b.n	80080a2 <memset+0x4>

080080ae <__cvt>:
 80080ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b0:	001e      	movs	r6, r3
 80080b2:	2300      	movs	r3, #0
 80080b4:	0014      	movs	r4, r2
 80080b6:	b08b      	sub	sp, #44	; 0x2c
 80080b8:	429e      	cmp	r6, r3
 80080ba:	da04      	bge.n	80080c6 <__cvt+0x18>
 80080bc:	2180      	movs	r1, #128	; 0x80
 80080be:	0609      	lsls	r1, r1, #24
 80080c0:	1873      	adds	r3, r6, r1
 80080c2:	001e      	movs	r6, r3
 80080c4:	232d      	movs	r3, #45	; 0x2d
 80080c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080c8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080ca:	7013      	strb	r3, [r2, #0]
 80080cc:	2320      	movs	r3, #32
 80080ce:	2203      	movs	r2, #3
 80080d0:	439f      	bics	r7, r3
 80080d2:	2f46      	cmp	r7, #70	; 0x46
 80080d4:	d007      	beq.n	80080e6 <__cvt+0x38>
 80080d6:	003b      	movs	r3, r7
 80080d8:	3b45      	subs	r3, #69	; 0x45
 80080da:	4259      	negs	r1, r3
 80080dc:	414b      	adcs	r3, r1
 80080de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80080e0:	3a01      	subs	r2, #1
 80080e2:	18cb      	adds	r3, r1, r3
 80080e4:	9310      	str	r3, [sp, #64]	; 0x40
 80080e6:	ab09      	add	r3, sp, #36	; 0x24
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	ab08      	add	r3, sp, #32
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080f0:	9200      	str	r2, [sp, #0]
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080f6:	0022      	movs	r2, r4
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	0033      	movs	r3, r6
 80080fc:	f000 fefe 	bl	8008efc <_dtoa_r>
 8008100:	0005      	movs	r5, r0
 8008102:	2f47      	cmp	r7, #71	; 0x47
 8008104:	d102      	bne.n	800810c <__cvt+0x5e>
 8008106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008108:	07db      	lsls	r3, r3, #31
 800810a:	d528      	bpl.n	800815e <__cvt+0xb0>
 800810c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800810e:	18eb      	adds	r3, r5, r3
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	2f46      	cmp	r7, #70	; 0x46
 8008114:	d114      	bne.n	8008140 <__cvt+0x92>
 8008116:	782b      	ldrb	r3, [r5, #0]
 8008118:	2b30      	cmp	r3, #48	; 0x30
 800811a:	d10c      	bne.n	8008136 <__cvt+0x88>
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	0020      	movs	r0, r4
 8008122:	0031      	movs	r1, r6
 8008124:	f7f8 f992 	bl	800044c <__aeabi_dcmpeq>
 8008128:	2800      	cmp	r0, #0
 800812a:	d104      	bne.n	8008136 <__cvt+0x88>
 800812c:	2301      	movs	r3, #1
 800812e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008138:	9a07      	ldr	r2, [sp, #28]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	18d3      	adds	r3, r2, r3
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	0020      	movs	r0, r4
 8008146:	0031      	movs	r1, r6
 8008148:	f7f8 f980 	bl	800044c <__aeabi_dcmpeq>
 800814c:	2800      	cmp	r0, #0
 800814e:	d001      	beq.n	8008154 <__cvt+0xa6>
 8008150:	9b07      	ldr	r3, [sp, #28]
 8008152:	9309      	str	r3, [sp, #36]	; 0x24
 8008154:	2230      	movs	r2, #48	; 0x30
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	9907      	ldr	r1, [sp, #28]
 800815a:	428b      	cmp	r3, r1
 800815c:	d306      	bcc.n	800816c <__cvt+0xbe>
 800815e:	0028      	movs	r0, r5
 8008160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008162:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008164:	1b5b      	subs	r3, r3, r5
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	b00b      	add	sp, #44	; 0x2c
 800816a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816c:	1c59      	adds	r1, r3, #1
 800816e:	9109      	str	r1, [sp, #36]	; 0x24
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e7f0      	b.n	8008156 <__cvt+0xa8>

08008174 <__exponent>:
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008176:	1c83      	adds	r3, r0, #2
 8008178:	b087      	sub	sp, #28
 800817a:	9303      	str	r3, [sp, #12]
 800817c:	0005      	movs	r5, r0
 800817e:	000c      	movs	r4, r1
 8008180:	232b      	movs	r3, #43	; 0x2b
 8008182:	7002      	strb	r2, [r0, #0]
 8008184:	2900      	cmp	r1, #0
 8008186:	da01      	bge.n	800818c <__exponent+0x18>
 8008188:	424c      	negs	r4, r1
 800818a:	3302      	adds	r3, #2
 800818c:	706b      	strb	r3, [r5, #1]
 800818e:	2c09      	cmp	r4, #9
 8008190:	dd31      	ble.n	80081f6 <__exponent+0x82>
 8008192:	270a      	movs	r7, #10
 8008194:	ab04      	add	r3, sp, #16
 8008196:	1dde      	adds	r6, r3, #7
 8008198:	0020      	movs	r0, r4
 800819a:	0039      	movs	r1, r7
 800819c:	9601      	str	r6, [sp, #4]
 800819e:	f7f8 f93f 	bl	8000420 <__aeabi_idivmod>
 80081a2:	3e01      	subs	r6, #1
 80081a4:	3130      	adds	r1, #48	; 0x30
 80081a6:	0020      	movs	r0, r4
 80081a8:	7031      	strb	r1, [r6, #0]
 80081aa:	0039      	movs	r1, r7
 80081ac:	9402      	str	r4, [sp, #8]
 80081ae:	f7f8 f851 	bl	8000254 <__divsi3>
 80081b2:	9b02      	ldr	r3, [sp, #8]
 80081b4:	0004      	movs	r4, r0
 80081b6:	2b63      	cmp	r3, #99	; 0x63
 80081b8:	dcee      	bgt.n	8008198 <__exponent+0x24>
 80081ba:	9b01      	ldr	r3, [sp, #4]
 80081bc:	3430      	adds	r4, #48	; 0x30
 80081be:	1e9a      	subs	r2, r3, #2
 80081c0:	0013      	movs	r3, r2
 80081c2:	9903      	ldr	r1, [sp, #12]
 80081c4:	7014      	strb	r4, [r2, #0]
 80081c6:	a804      	add	r0, sp, #16
 80081c8:	3007      	adds	r0, #7
 80081ca:	4298      	cmp	r0, r3
 80081cc:	d80e      	bhi.n	80081ec <__exponent+0x78>
 80081ce:	ab04      	add	r3, sp, #16
 80081d0:	3307      	adds	r3, #7
 80081d2:	2000      	movs	r0, #0
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d804      	bhi.n	80081e2 <__exponent+0x6e>
 80081d8:	ab04      	add	r3, sp, #16
 80081da:	3009      	adds	r0, #9
 80081dc:	18c0      	adds	r0, r0, r3
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	1818      	adds	r0, r3, r0
 80081e6:	1b40      	subs	r0, r0, r5
 80081e8:	b007      	add	sp, #28
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ec:	7818      	ldrb	r0, [r3, #0]
 80081ee:	3301      	adds	r3, #1
 80081f0:	7008      	strb	r0, [r1, #0]
 80081f2:	3101      	adds	r1, #1
 80081f4:	e7e7      	b.n	80081c6 <__exponent+0x52>
 80081f6:	2330      	movs	r3, #48	; 0x30
 80081f8:	18e4      	adds	r4, r4, r3
 80081fa:	70ab      	strb	r3, [r5, #2]
 80081fc:	1d28      	adds	r0, r5, #4
 80081fe:	70ec      	strb	r4, [r5, #3]
 8008200:	e7f1      	b.n	80081e6 <__exponent+0x72>
	...

08008204 <_printf_float>:
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008206:	b095      	sub	sp, #84	; 0x54
 8008208:	000c      	movs	r4, r1
 800820a:	9209      	str	r2, [sp, #36]	; 0x24
 800820c:	001e      	movs	r6, r3
 800820e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008210:	0007      	movs	r7, r0
 8008212:	f001 fe5b 	bl	8009ecc <_localeconv_r>
 8008216:	6803      	ldr	r3, [r0, #0]
 8008218:	0018      	movs	r0, r3
 800821a:	930c      	str	r3, [sp, #48]	; 0x30
 800821c:	f7f7 ff74 	bl	8000108 <strlen>
 8008220:	2300      	movs	r3, #0
 8008222:	9312      	str	r3, [sp, #72]	; 0x48
 8008224:	7e23      	ldrb	r3, [r4, #24]
 8008226:	2207      	movs	r2, #7
 8008228:	930a      	str	r3, [sp, #40]	; 0x28
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	900e      	str	r0, [sp, #56]	; 0x38
 800822e:	930d      	str	r3, [sp, #52]	; 0x34
 8008230:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	05c9      	lsls	r1, r1, #23
 8008236:	d547      	bpl.n	80082c8 <_printf_float+0xc4>
 8008238:	189b      	adds	r3, r3, r2
 800823a:	4393      	bics	r3, r2
 800823c:	001a      	movs	r2, r3
 800823e:	3208      	adds	r2, #8
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	64a2      	str	r2, [r4, #72]	; 0x48
 8008248:	64e3      	str	r3, [r4, #76]	; 0x4c
 800824a:	2201      	movs	r2, #1
 800824c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800824e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008250:	930b      	str	r3, [sp, #44]	; 0x2c
 8008252:	006b      	lsls	r3, r5, #1
 8008254:	085b      	lsrs	r3, r3, #1
 8008256:	930f      	str	r3, [sp, #60]	; 0x3c
 8008258:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800825a:	4ba7      	ldr	r3, [pc, #668]	; (80084f8 <_printf_float+0x2f4>)
 800825c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800825e:	4252      	negs	r2, r2
 8008260:	f7f9 ff4a 	bl	80020f8 <__aeabi_dcmpun>
 8008264:	2800      	cmp	r0, #0
 8008266:	d131      	bne.n	80082cc <_printf_float+0xc8>
 8008268:	2201      	movs	r2, #1
 800826a:	4ba3      	ldr	r3, [pc, #652]	; (80084f8 <_printf_float+0x2f4>)
 800826c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800826e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008270:	4252      	negs	r2, r2
 8008272:	f7f8 f8fb 	bl	800046c <__aeabi_dcmple>
 8008276:	2800      	cmp	r0, #0
 8008278:	d128      	bne.n	80082cc <_printf_float+0xc8>
 800827a:	2200      	movs	r2, #0
 800827c:	2300      	movs	r3, #0
 800827e:	0029      	movs	r1, r5
 8008280:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008282:	f7f8 f8e9 	bl	8000458 <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d003      	beq.n	8008292 <_printf_float+0x8e>
 800828a:	0023      	movs	r3, r4
 800828c:	222d      	movs	r2, #45	; 0x2d
 800828e:	3343      	adds	r3, #67	; 0x43
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008294:	4d99      	ldr	r5, [pc, #612]	; (80084fc <_printf_float+0x2f8>)
 8008296:	2b47      	cmp	r3, #71	; 0x47
 8008298:	d900      	bls.n	800829c <_printf_float+0x98>
 800829a:	4d99      	ldr	r5, [pc, #612]	; (8008500 <_printf_float+0x2fc>)
 800829c:	2303      	movs	r3, #3
 800829e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	3301      	adds	r3, #1
 80082a4:	439a      	bics	r2, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	0021      	movs	r1, r4
 80082b0:	0038      	movs	r0, r7
 80082b2:	9600      	str	r6, [sp, #0]
 80082b4:	aa13      	add	r2, sp, #76	; 0x4c
 80082b6:	f000 f9e7 	bl	8008688 <_printf_common>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d000      	beq.n	80082c0 <_printf_float+0xbc>
 80082be:	e0a2      	b.n	8008406 <_printf_float+0x202>
 80082c0:	2001      	movs	r0, #1
 80082c2:	4240      	negs	r0, r0
 80082c4:	b015      	add	sp, #84	; 0x54
 80082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c8:	3307      	adds	r3, #7
 80082ca:	e7b6      	b.n	800823a <_printf_float+0x36>
 80082cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ce:	002b      	movs	r3, r5
 80082d0:	0010      	movs	r0, r2
 80082d2:	0029      	movs	r1, r5
 80082d4:	f7f9 ff10 	bl	80020f8 <__aeabi_dcmpun>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d00b      	beq.n	80082f4 <_printf_float+0xf0>
 80082dc:	2d00      	cmp	r5, #0
 80082de:	da03      	bge.n	80082e8 <_printf_float+0xe4>
 80082e0:	0023      	movs	r3, r4
 80082e2:	222d      	movs	r2, #45	; 0x2d
 80082e4:	3343      	adds	r3, #67	; 0x43
 80082e6:	701a      	strb	r2, [r3, #0]
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	4d86      	ldr	r5, [pc, #536]	; (8008504 <_printf_float+0x300>)
 80082ec:	2b47      	cmp	r3, #71	; 0x47
 80082ee:	d9d5      	bls.n	800829c <_printf_float+0x98>
 80082f0:	4d85      	ldr	r5, [pc, #532]	; (8008508 <_printf_float+0x304>)
 80082f2:	e7d3      	b.n	800829c <_printf_float+0x98>
 80082f4:	2220      	movs	r2, #32
 80082f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082f8:	6863      	ldr	r3, [r4, #4]
 80082fa:	4391      	bics	r1, r2
 80082fc:	910f      	str	r1, [sp, #60]	; 0x3c
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	d149      	bne.n	8008396 <_printf_float+0x192>
 8008302:	3307      	adds	r3, #7
 8008304:	6063      	str	r3, [r4, #4]
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4313      	orrs	r3, r2
 800830e:	2200      	movs	r2, #0
 8008310:	9206      	str	r2, [sp, #24]
 8008312:	aa12      	add	r2, sp, #72	; 0x48
 8008314:	9205      	str	r2, [sp, #20]
 8008316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008318:	a908      	add	r1, sp, #32
 800831a:	9204      	str	r2, [sp, #16]
 800831c:	aa11      	add	r2, sp, #68	; 0x44
 800831e:	9203      	str	r2, [sp, #12]
 8008320:	2223      	movs	r2, #35	; 0x23
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	6863      	ldr	r3, [r4, #4]
 8008328:	1852      	adds	r2, r2, r1
 800832a:	9202      	str	r2, [sp, #8]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	0038      	movs	r0, r7
 8008330:	002b      	movs	r3, r5
 8008332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008334:	f7ff febb 	bl	80080ae <__cvt>
 8008338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800833a:	0005      	movs	r5, r0
 800833c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800833e:	2b47      	cmp	r3, #71	; 0x47
 8008340:	d108      	bne.n	8008354 <_printf_float+0x150>
 8008342:	1ccb      	adds	r3, r1, #3
 8008344:	db02      	blt.n	800834c <_printf_float+0x148>
 8008346:	6863      	ldr	r3, [r4, #4]
 8008348:	4299      	cmp	r1, r3
 800834a:	dd48      	ble.n	80083de <_printf_float+0x1da>
 800834c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834e:	3b02      	subs	r3, #2
 8008350:	b2db      	uxtb	r3, r3
 8008352:	930a      	str	r3, [sp, #40]	; 0x28
 8008354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008356:	2b65      	cmp	r3, #101	; 0x65
 8008358:	d824      	bhi.n	80083a4 <_printf_float+0x1a0>
 800835a:	0020      	movs	r0, r4
 800835c:	001a      	movs	r2, r3
 800835e:	3901      	subs	r1, #1
 8008360:	3050      	adds	r0, #80	; 0x50
 8008362:	9111      	str	r1, [sp, #68]	; 0x44
 8008364:	f7ff ff06 	bl	8008174 <__exponent>
 8008368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800836a:	900b      	str	r0, [sp, #44]	; 0x2c
 800836c:	1813      	adds	r3, r2, r0
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	2a01      	cmp	r2, #1
 8008372:	dc02      	bgt.n	800837a <_printf_float+0x176>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	07d2      	lsls	r2, r2, #31
 8008378:	d501      	bpl.n	800837e <_printf_float+0x17a>
 800837a:	3301      	adds	r3, #1
 800837c:	6123      	str	r3, [r4, #16]
 800837e:	2323      	movs	r3, #35	; 0x23
 8008380:	aa08      	add	r2, sp, #32
 8008382:	189b      	adds	r3, r3, r2
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d100      	bne.n	800838c <_printf_float+0x188>
 800838a:	e78f      	b.n	80082ac <_printf_float+0xa8>
 800838c:	0023      	movs	r3, r4
 800838e:	222d      	movs	r2, #45	; 0x2d
 8008390:	3343      	adds	r3, #67	; 0x43
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e78a      	b.n	80082ac <_printf_float+0xa8>
 8008396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008398:	2a47      	cmp	r2, #71	; 0x47
 800839a:	d1b4      	bne.n	8008306 <_printf_float+0x102>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1b2      	bne.n	8008306 <_printf_float+0x102>
 80083a0:	3301      	adds	r3, #1
 80083a2:	e7af      	b.n	8008304 <_printf_float+0x100>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	2b66      	cmp	r3, #102	; 0x66
 80083a8:	d11b      	bne.n	80083e2 <_printf_float+0x1de>
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	2900      	cmp	r1, #0
 80083ae:	dd0d      	ble.n	80083cc <_printf_float+0x1c8>
 80083b0:	6121      	str	r1, [r4, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <_printf_float+0x1b8>
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	07d2      	lsls	r2, r2, #31
 80083ba:	d502      	bpl.n	80083c2 <_printf_float+0x1be>
 80083bc:	3301      	adds	r3, #1
 80083be:	1859      	adds	r1, r3, r1
 80083c0:	6121      	str	r1, [r4, #16]
 80083c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80083c6:	2300      	movs	r3, #0
 80083c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ca:	e7d8      	b.n	800837e <_printf_float+0x17a>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <_printf_float+0x1d4>
 80083d0:	2201      	movs	r2, #1
 80083d2:	6821      	ldr	r1, [r4, #0]
 80083d4:	4211      	tst	r1, r2
 80083d6:	d000      	beq.n	80083da <_printf_float+0x1d6>
 80083d8:	1c9a      	adds	r2, r3, #2
 80083da:	6122      	str	r2, [r4, #16]
 80083dc:	e7f1      	b.n	80083c2 <_printf_float+0x1be>
 80083de:	2367      	movs	r3, #103	; 0x67
 80083e0:	930a      	str	r3, [sp, #40]	; 0x28
 80083e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083e6:	4293      	cmp	r3, r2
 80083e8:	db06      	blt.n	80083f8 <_printf_float+0x1f4>
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	6123      	str	r3, [r4, #16]
 80083ee:	07d2      	lsls	r2, r2, #31
 80083f0:	d5e7      	bpl.n	80083c2 <_printf_float+0x1be>
 80083f2:	3301      	adds	r3, #1
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	e7e4      	b.n	80083c2 <_printf_float+0x1be>
 80083f8:	2101      	movs	r1, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dc01      	bgt.n	8008402 <_printf_float+0x1fe>
 80083fe:	1849      	adds	r1, r1, r1
 8008400:	1ac9      	subs	r1, r1, r3
 8008402:	1852      	adds	r2, r2, r1
 8008404:	e7e9      	b.n	80083da <_printf_float+0x1d6>
 8008406:	6822      	ldr	r2, [r4, #0]
 8008408:	0553      	lsls	r3, r2, #21
 800840a:	d407      	bmi.n	800841c <_printf_float+0x218>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	002a      	movs	r2, r5
 8008410:	0038      	movs	r0, r7
 8008412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008414:	47b0      	blx	r6
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d128      	bne.n	800846c <_printf_float+0x268>
 800841a:	e751      	b.n	80082c0 <_printf_float+0xbc>
 800841c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841e:	2b65      	cmp	r3, #101	; 0x65
 8008420:	d800      	bhi.n	8008424 <_printf_float+0x220>
 8008422:	e0e1      	b.n	80085e8 <_printf_float+0x3e4>
 8008424:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008426:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 f80e 	bl	800044c <__aeabi_dcmpeq>
 8008430:	2800      	cmp	r0, #0
 8008432:	d031      	beq.n	8008498 <_printf_float+0x294>
 8008434:	2301      	movs	r3, #1
 8008436:	0038      	movs	r0, r7
 8008438:	4a34      	ldr	r2, [pc, #208]	; (800850c <_printf_float+0x308>)
 800843a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800843c:	47b0      	blx	r6
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	d100      	bne.n	8008444 <_printf_float+0x240>
 8008442:	e73d      	b.n	80082c0 <_printf_float+0xbc>
 8008444:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008446:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008448:	4293      	cmp	r3, r2
 800844a:	db02      	blt.n	8008452 <_printf_float+0x24e>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d50c      	bpl.n	800846c <_printf_float+0x268>
 8008452:	0038      	movs	r0, r7
 8008454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800845a:	47b0      	blx	r6
 800845c:	2500      	movs	r5, #0
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d100      	bne.n	8008464 <_printf_float+0x260>
 8008462:	e72d      	b.n	80082c0 <_printf_float+0xbc>
 8008464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008466:	3b01      	subs	r3, #1
 8008468:	42ab      	cmp	r3, r5
 800846a:	dc0a      	bgt.n	8008482 <_printf_float+0x27e>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	079b      	lsls	r3, r3, #30
 8008470:	d500      	bpl.n	8008474 <_printf_float+0x270>
 8008472:	e106      	b.n	8008682 <_printf_float+0x47e>
 8008474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008476:	68e0      	ldr	r0, [r4, #12]
 8008478:	4298      	cmp	r0, r3
 800847a:	db00      	blt.n	800847e <_printf_float+0x27a>
 800847c:	e722      	b.n	80082c4 <_printf_float+0xc0>
 800847e:	0018      	movs	r0, r3
 8008480:	e720      	b.n	80082c4 <_printf_float+0xc0>
 8008482:	0022      	movs	r2, r4
 8008484:	2301      	movs	r3, #1
 8008486:	0038      	movs	r0, r7
 8008488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800848a:	321a      	adds	r2, #26
 800848c:	47b0      	blx	r6
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d100      	bne.n	8008494 <_printf_float+0x290>
 8008492:	e715      	b.n	80082c0 <_printf_float+0xbc>
 8008494:	3501      	adds	r5, #1
 8008496:	e7e5      	b.n	8008464 <_printf_float+0x260>
 8008498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800849a:	2b00      	cmp	r3, #0
 800849c:	dc38      	bgt.n	8008510 <_printf_float+0x30c>
 800849e:	2301      	movs	r3, #1
 80084a0:	0038      	movs	r0, r7
 80084a2:	4a1a      	ldr	r2, [pc, #104]	; (800850c <_printf_float+0x308>)
 80084a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084a6:	47b0      	blx	r6
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d100      	bne.n	80084ae <_printf_float+0x2aa>
 80084ac:	e708      	b.n	80082c0 <_printf_float+0xbc>
 80084ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084b2:	4313      	orrs	r3, r2
 80084b4:	d102      	bne.n	80084bc <_printf_float+0x2b8>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	07db      	lsls	r3, r3, #31
 80084ba:	d5d7      	bpl.n	800846c <_printf_float+0x268>
 80084bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084be:	0038      	movs	r0, r7
 80084c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c4:	47b0      	blx	r6
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d100      	bne.n	80084cc <_printf_float+0x2c8>
 80084ca:	e6f9      	b.n	80082c0 <_printf_float+0xbc>
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	; 0x28
 80084d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d4:	425b      	negs	r3, r3
 80084d6:	4293      	cmp	r3, r2
 80084d8:	dc01      	bgt.n	80084de <_printf_float+0x2da>
 80084da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084dc:	e797      	b.n	800840e <_printf_float+0x20a>
 80084de:	0022      	movs	r2, r4
 80084e0:	2301      	movs	r3, #1
 80084e2:	0038      	movs	r0, r7
 80084e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e6:	321a      	adds	r2, #26
 80084e8:	47b0      	blx	r6
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d100      	bne.n	80084f0 <_printf_float+0x2ec>
 80084ee:	e6e7      	b.n	80082c0 <_printf_float+0xbc>
 80084f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f2:	3301      	adds	r3, #1
 80084f4:	e7eb      	b.n	80084ce <_printf_float+0x2ca>
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	7fefffff 	.word	0x7fefffff
 80084fc:	0800b56c 	.word	0x0800b56c
 8008500:	0800b570 	.word	0x0800b570
 8008504:	0800b574 	.word	0x0800b574
 8008508:	0800b578 	.word	0x0800b578
 800850c:	0800b57c 	.word	0x0800b57c
 8008510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008514:	920a      	str	r2, [sp, #40]	; 0x28
 8008516:	429a      	cmp	r2, r3
 8008518:	dd00      	ble.n	800851c <_printf_float+0x318>
 800851a:	930a      	str	r3, [sp, #40]	; 0x28
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	dc3c      	bgt.n	800859c <_printf_float+0x398>
 8008522:	2300      	movs	r3, #0
 8008524:	930d      	str	r3, [sp, #52]	; 0x34
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	43db      	mvns	r3, r3
 800852a:	17db      	asrs	r3, r3, #31
 800852c:	930f      	str	r3, [sp, #60]	; 0x3c
 800852e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008532:	930b      	str	r3, [sp, #44]	; 0x2c
 8008534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008536:	4013      	ands	r3, r2
 8008538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800853e:	4293      	cmp	r3, r2
 8008540:	dc34      	bgt.n	80085ac <_printf_float+0x3a8>
 8008542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008546:	4293      	cmp	r3, r2
 8008548:	db3d      	blt.n	80085c6 <_printf_float+0x3c2>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	07db      	lsls	r3, r3, #31
 800854e:	d43a      	bmi.n	80085c6 <_printf_float+0x3c2>
 8008550:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008554:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	1a52      	subs	r2, r2, r1
 800855a:	920a      	str	r2, [sp, #40]	; 0x28
 800855c:	429a      	cmp	r2, r3
 800855e:	dd00      	ble.n	8008562 <_printf_float+0x35e>
 8008560:	930a      	str	r3, [sp, #40]	; 0x28
 8008562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc36      	bgt.n	80085d6 <_printf_float+0x3d2>
 8008568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856a:	2500      	movs	r5, #0
 800856c:	43db      	mvns	r3, r3
 800856e:	17db      	asrs	r3, r3, #31
 8008570:	930b      	str	r3, [sp, #44]	; 0x2c
 8008572:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800857c:	400a      	ands	r2, r1
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc00      	bgt.n	8008586 <_printf_float+0x382>
 8008584:	e772      	b.n	800846c <_printf_float+0x268>
 8008586:	0022      	movs	r2, r4
 8008588:	2301      	movs	r3, #1
 800858a:	0038      	movs	r0, r7
 800858c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800858e:	321a      	adds	r2, #26
 8008590:	47b0      	blx	r6
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d100      	bne.n	8008598 <_printf_float+0x394>
 8008596:	e693      	b.n	80082c0 <_printf_float+0xbc>
 8008598:	3501      	adds	r5, #1
 800859a:	e7ea      	b.n	8008572 <_printf_float+0x36e>
 800859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859e:	002a      	movs	r2, r5
 80085a0:	0038      	movs	r0, r7
 80085a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a4:	47b0      	blx	r6
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d1bb      	bne.n	8008522 <_printf_float+0x31e>
 80085aa:	e689      	b.n	80082c0 <_printf_float+0xbc>
 80085ac:	0022      	movs	r2, r4
 80085ae:	2301      	movs	r3, #1
 80085b0:	0038      	movs	r0, r7
 80085b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b4:	321a      	adds	r2, #26
 80085b6:	47b0      	blx	r6
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d100      	bne.n	80085be <_printf_float+0x3ba>
 80085bc:	e680      	b.n	80082c0 <_printf_float+0xbc>
 80085be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c0:	3301      	adds	r3, #1
 80085c2:	930d      	str	r3, [sp, #52]	; 0x34
 80085c4:	e7b3      	b.n	800852e <_printf_float+0x32a>
 80085c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c8:	0038      	movs	r0, r7
 80085ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ce:	47b0      	blx	r6
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d1bd      	bne.n	8008550 <_printf_float+0x34c>
 80085d4:	e674      	b.n	80082c0 <_printf_float+0xbc>
 80085d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085d8:	0038      	movs	r0, r7
 80085da:	18ea      	adds	r2, r5, r3
 80085dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e0:	47b0      	blx	r6
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d1c0      	bne.n	8008568 <_printf_float+0x364>
 80085e6:	e66b      	b.n	80082c0 <_printf_float+0xbc>
 80085e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	dc02      	bgt.n	80085f4 <_printf_float+0x3f0>
 80085ee:	2301      	movs	r3, #1
 80085f0:	421a      	tst	r2, r3
 80085f2:	d034      	beq.n	800865e <_printf_float+0x45a>
 80085f4:	2301      	movs	r3, #1
 80085f6:	002a      	movs	r2, r5
 80085f8:	0038      	movs	r0, r7
 80085fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085fc:	47b0      	blx	r6
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d100      	bne.n	8008604 <_printf_float+0x400>
 8008602:	e65d      	b.n	80082c0 <_printf_float+0xbc>
 8008604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008606:	0038      	movs	r0, r7
 8008608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800860a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800860c:	47b0      	blx	r6
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d100      	bne.n	8008614 <_printf_float+0x410>
 8008612:	e655      	b.n	80082c0 <_printf_float+0xbc>
 8008614:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008616:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	f7f7 ff16 	bl	800044c <__aeabi_dcmpeq>
 8008620:	2800      	cmp	r0, #0
 8008622:	d11a      	bne.n	800865a <_printf_float+0x456>
 8008624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008626:	1c6a      	adds	r2, r5, #1
 8008628:	3b01      	subs	r3, #1
 800862a:	0038      	movs	r0, r7
 800862c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800862e:	47b0      	blx	r6
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d10e      	bne.n	8008652 <_printf_float+0x44e>
 8008634:	e644      	b.n	80082c0 <_printf_float+0xbc>
 8008636:	0022      	movs	r2, r4
 8008638:	2301      	movs	r3, #1
 800863a:	0038      	movs	r0, r7
 800863c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800863e:	321a      	adds	r2, #26
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d100      	bne.n	8008648 <_printf_float+0x444>
 8008646:	e63b      	b.n	80082c0 <_printf_float+0xbc>
 8008648:	3501      	adds	r5, #1
 800864a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800864c:	3b01      	subs	r3, #1
 800864e:	42ab      	cmp	r3, r5
 8008650:	dcf1      	bgt.n	8008636 <_printf_float+0x432>
 8008652:	0022      	movs	r2, r4
 8008654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008656:	3250      	adds	r2, #80	; 0x50
 8008658:	e6da      	b.n	8008410 <_printf_float+0x20c>
 800865a:	2500      	movs	r5, #0
 800865c:	e7f5      	b.n	800864a <_printf_float+0x446>
 800865e:	002a      	movs	r2, r5
 8008660:	e7e3      	b.n	800862a <_printf_float+0x426>
 8008662:	0022      	movs	r2, r4
 8008664:	2301      	movs	r3, #1
 8008666:	0038      	movs	r0, r7
 8008668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866a:	3219      	adds	r2, #25
 800866c:	47b0      	blx	r6
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	d100      	bne.n	8008674 <_printf_float+0x470>
 8008672:	e625      	b.n	80082c0 <_printf_float+0xbc>
 8008674:	3501      	adds	r5, #1
 8008676:	68e3      	ldr	r3, [r4, #12]
 8008678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	42ab      	cmp	r3, r5
 800867e:	dcf0      	bgt.n	8008662 <_printf_float+0x45e>
 8008680:	e6f8      	b.n	8008474 <_printf_float+0x270>
 8008682:	2500      	movs	r5, #0
 8008684:	e7f7      	b.n	8008676 <_printf_float+0x472>
 8008686:	46c0      	nop			; (mov r8, r8)

08008688 <_printf_common>:
 8008688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868a:	0015      	movs	r5, r2
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	688a      	ldr	r2, [r1, #8]
 8008690:	690b      	ldr	r3, [r1, #16]
 8008692:	000c      	movs	r4, r1
 8008694:	9000      	str	r0, [sp, #0]
 8008696:	4293      	cmp	r3, r2
 8008698:	da00      	bge.n	800869c <_printf_common+0x14>
 800869a:	0013      	movs	r3, r2
 800869c:	0022      	movs	r2, r4
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	3243      	adds	r2, #67	; 0x43
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	d001      	beq.n	80086ac <_printf_common+0x24>
 80086a8:	3301      	adds	r3, #1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	069b      	lsls	r3, r3, #26
 80086b0:	d502      	bpl.n	80086b8 <_printf_common+0x30>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	3302      	adds	r3, #2
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	2306      	movs	r3, #6
 80086bc:	0017      	movs	r7, r2
 80086be:	401f      	ands	r7, r3
 80086c0:	421a      	tst	r2, r3
 80086c2:	d027      	beq.n	8008714 <_printf_common+0x8c>
 80086c4:	0023      	movs	r3, r4
 80086c6:	3343      	adds	r3, #67	; 0x43
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	1e5a      	subs	r2, r3, #1
 80086cc:	4193      	sbcs	r3, r2
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	0692      	lsls	r2, r2, #26
 80086d2:	d430      	bmi.n	8008736 <_printf_common+0xae>
 80086d4:	0022      	movs	r2, r4
 80086d6:	9901      	ldr	r1, [sp, #4]
 80086d8:	9800      	ldr	r0, [sp, #0]
 80086da:	9e08      	ldr	r6, [sp, #32]
 80086dc:	3243      	adds	r2, #67	; 0x43
 80086de:	47b0      	blx	r6
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d025      	beq.n	8008730 <_printf_common+0xa8>
 80086e4:	2306      	movs	r3, #6
 80086e6:	6820      	ldr	r0, [r4, #0]
 80086e8:	682a      	ldr	r2, [r5, #0]
 80086ea:	68e1      	ldr	r1, [r4, #12]
 80086ec:	2500      	movs	r5, #0
 80086ee:	4003      	ands	r3, r0
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d103      	bne.n	80086fc <_printf_common+0x74>
 80086f4:	1a8d      	subs	r5, r1, r2
 80086f6:	43eb      	mvns	r3, r5
 80086f8:	17db      	asrs	r3, r3, #31
 80086fa:	401d      	ands	r5, r3
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	6922      	ldr	r2, [r4, #16]
 8008700:	4293      	cmp	r3, r2
 8008702:	dd01      	ble.n	8008708 <_printf_common+0x80>
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	18ed      	adds	r5, r5, r3
 8008708:	2700      	movs	r7, #0
 800870a:	42bd      	cmp	r5, r7
 800870c:	d120      	bne.n	8008750 <_printf_common+0xc8>
 800870e:	2000      	movs	r0, #0
 8008710:	e010      	b.n	8008734 <_printf_common+0xac>
 8008712:	3701      	adds	r7, #1
 8008714:	68e3      	ldr	r3, [r4, #12]
 8008716:	682a      	ldr	r2, [r5, #0]
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	42bb      	cmp	r3, r7
 800871c:	ddd2      	ble.n	80086c4 <_printf_common+0x3c>
 800871e:	0022      	movs	r2, r4
 8008720:	2301      	movs	r3, #1
 8008722:	9901      	ldr	r1, [sp, #4]
 8008724:	9800      	ldr	r0, [sp, #0]
 8008726:	9e08      	ldr	r6, [sp, #32]
 8008728:	3219      	adds	r2, #25
 800872a:	47b0      	blx	r6
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d1f0      	bne.n	8008712 <_printf_common+0x8a>
 8008730:	2001      	movs	r0, #1
 8008732:	4240      	negs	r0, r0
 8008734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008736:	2030      	movs	r0, #48	; 0x30
 8008738:	18e1      	adds	r1, r4, r3
 800873a:	3143      	adds	r1, #67	; 0x43
 800873c:	7008      	strb	r0, [r1, #0]
 800873e:	0021      	movs	r1, r4
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	3145      	adds	r1, #69	; 0x45
 8008744:	7809      	ldrb	r1, [r1, #0]
 8008746:	18a2      	adds	r2, r4, r2
 8008748:	3243      	adds	r2, #67	; 0x43
 800874a:	3302      	adds	r3, #2
 800874c:	7011      	strb	r1, [r2, #0]
 800874e:	e7c1      	b.n	80086d4 <_printf_common+0x4c>
 8008750:	0022      	movs	r2, r4
 8008752:	2301      	movs	r3, #1
 8008754:	9901      	ldr	r1, [sp, #4]
 8008756:	9800      	ldr	r0, [sp, #0]
 8008758:	9e08      	ldr	r6, [sp, #32]
 800875a:	321a      	adds	r2, #26
 800875c:	47b0      	blx	r6
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d0e6      	beq.n	8008730 <_printf_common+0xa8>
 8008762:	3701      	adds	r7, #1
 8008764:	e7d1      	b.n	800870a <_printf_common+0x82>
	...

08008768 <_printf_i>:
 8008768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876a:	b08b      	sub	sp, #44	; 0x2c
 800876c:	9206      	str	r2, [sp, #24]
 800876e:	000a      	movs	r2, r1
 8008770:	3243      	adds	r2, #67	; 0x43
 8008772:	9307      	str	r3, [sp, #28]
 8008774:	9005      	str	r0, [sp, #20]
 8008776:	9204      	str	r2, [sp, #16]
 8008778:	7e0a      	ldrb	r2, [r1, #24]
 800877a:	000c      	movs	r4, r1
 800877c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800877e:	2a78      	cmp	r2, #120	; 0x78
 8008780:	d807      	bhi.n	8008792 <_printf_i+0x2a>
 8008782:	2a62      	cmp	r2, #98	; 0x62
 8008784:	d809      	bhi.n	800879a <_printf_i+0x32>
 8008786:	2a00      	cmp	r2, #0
 8008788:	d100      	bne.n	800878c <_printf_i+0x24>
 800878a:	e0c1      	b.n	8008910 <_printf_i+0x1a8>
 800878c:	2a58      	cmp	r2, #88	; 0x58
 800878e:	d100      	bne.n	8008792 <_printf_i+0x2a>
 8008790:	e08c      	b.n	80088ac <_printf_i+0x144>
 8008792:	0026      	movs	r6, r4
 8008794:	3642      	adds	r6, #66	; 0x42
 8008796:	7032      	strb	r2, [r6, #0]
 8008798:	e022      	b.n	80087e0 <_printf_i+0x78>
 800879a:	0010      	movs	r0, r2
 800879c:	3863      	subs	r0, #99	; 0x63
 800879e:	2815      	cmp	r0, #21
 80087a0:	d8f7      	bhi.n	8008792 <_printf_i+0x2a>
 80087a2:	f7f7 fcc3 	bl	800012c <__gnu_thumb1_case_shi>
 80087a6:	0016      	.short	0x0016
 80087a8:	fff6001f 	.word	0xfff6001f
 80087ac:	fff6fff6 	.word	0xfff6fff6
 80087b0:	001ffff6 	.word	0x001ffff6
 80087b4:	fff6fff6 	.word	0xfff6fff6
 80087b8:	fff6fff6 	.word	0xfff6fff6
 80087bc:	003600a8 	.word	0x003600a8
 80087c0:	fff6009a 	.word	0xfff6009a
 80087c4:	00b9fff6 	.word	0x00b9fff6
 80087c8:	0036fff6 	.word	0x0036fff6
 80087cc:	fff6fff6 	.word	0xfff6fff6
 80087d0:	009e      	.short	0x009e
 80087d2:	0026      	movs	r6, r4
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	3642      	adds	r6, #66	; 0x42
 80087d8:	1d11      	adds	r1, r2, #4
 80087da:	6019      	str	r1, [r3, #0]
 80087dc:	6813      	ldr	r3, [r2, #0]
 80087de:	7033      	strb	r3, [r6, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0a7      	b.n	8008934 <_printf_i+0x1cc>
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	1d0a      	adds	r2, r1, #4
 80087ea:	0605      	lsls	r5, r0, #24
 80087ec:	d50b      	bpl.n	8008806 <_printf_i+0x9e>
 80087ee:	680d      	ldr	r5, [r1, #0]
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	da03      	bge.n	80087fe <_printf_i+0x96>
 80087f6:	232d      	movs	r3, #45	; 0x2d
 80087f8:	9a04      	ldr	r2, [sp, #16]
 80087fa:	426d      	negs	r5, r5
 80087fc:	7013      	strb	r3, [r2, #0]
 80087fe:	4b61      	ldr	r3, [pc, #388]	; (8008984 <_printf_i+0x21c>)
 8008800:	270a      	movs	r7, #10
 8008802:	9303      	str	r3, [sp, #12]
 8008804:	e01b      	b.n	800883e <_printf_i+0xd6>
 8008806:	680d      	ldr	r5, [r1, #0]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	0641      	lsls	r1, r0, #25
 800880c:	d5f1      	bpl.n	80087f2 <_printf_i+0x8a>
 800880e:	b22d      	sxth	r5, r5
 8008810:	e7ef      	b.n	80087f2 <_printf_i+0x8a>
 8008812:	680d      	ldr	r5, [r1, #0]
 8008814:	6819      	ldr	r1, [r3, #0]
 8008816:	1d08      	adds	r0, r1, #4
 8008818:	6018      	str	r0, [r3, #0]
 800881a:	062e      	lsls	r6, r5, #24
 800881c:	d501      	bpl.n	8008822 <_printf_i+0xba>
 800881e:	680d      	ldr	r5, [r1, #0]
 8008820:	e003      	b.n	800882a <_printf_i+0xc2>
 8008822:	066d      	lsls	r5, r5, #25
 8008824:	d5fb      	bpl.n	800881e <_printf_i+0xb6>
 8008826:	680d      	ldr	r5, [r1, #0]
 8008828:	b2ad      	uxth	r5, r5
 800882a:	4b56      	ldr	r3, [pc, #344]	; (8008984 <_printf_i+0x21c>)
 800882c:	2708      	movs	r7, #8
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	2a6f      	cmp	r2, #111	; 0x6f
 8008832:	d000      	beq.n	8008836 <_printf_i+0xce>
 8008834:	3702      	adds	r7, #2
 8008836:	0023      	movs	r3, r4
 8008838:	2200      	movs	r2, #0
 800883a:	3343      	adds	r3, #67	; 0x43
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	6863      	ldr	r3, [r4, #4]
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	db03      	blt.n	800884e <_printf_i+0xe6>
 8008846:	2204      	movs	r2, #4
 8008848:	6821      	ldr	r1, [r4, #0]
 800884a:	4391      	bics	r1, r2
 800884c:	6021      	str	r1, [r4, #0]
 800884e:	2d00      	cmp	r5, #0
 8008850:	d102      	bne.n	8008858 <_printf_i+0xf0>
 8008852:	9e04      	ldr	r6, [sp, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00c      	beq.n	8008872 <_printf_i+0x10a>
 8008858:	9e04      	ldr	r6, [sp, #16]
 800885a:	0028      	movs	r0, r5
 800885c:	0039      	movs	r1, r7
 800885e:	f7f7 fcf5 	bl	800024c <__aeabi_uidivmod>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3e01      	subs	r6, #1
 8008866:	5c5b      	ldrb	r3, [r3, r1]
 8008868:	7033      	strb	r3, [r6, #0]
 800886a:	002b      	movs	r3, r5
 800886c:	0005      	movs	r5, r0
 800886e:	429f      	cmp	r7, r3
 8008870:	d9f3      	bls.n	800885a <_printf_i+0xf2>
 8008872:	2f08      	cmp	r7, #8
 8008874:	d109      	bne.n	800888a <_printf_i+0x122>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	07db      	lsls	r3, r3, #31
 800887a:	d506      	bpl.n	800888a <_printf_i+0x122>
 800887c:	6863      	ldr	r3, [r4, #4]
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	4293      	cmp	r3, r2
 8008882:	dc02      	bgt.n	800888a <_printf_i+0x122>
 8008884:	2330      	movs	r3, #48	; 0x30
 8008886:	3e01      	subs	r6, #1
 8008888:	7033      	strb	r3, [r6, #0]
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	1b9b      	subs	r3, r3, r6
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	0021      	movs	r1, r4
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	9805      	ldr	r0, [sp, #20]
 8008898:	9b06      	ldr	r3, [sp, #24]
 800889a:	aa09      	add	r2, sp, #36	; 0x24
 800889c:	f7ff fef4 	bl	8008688 <_printf_common>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d14c      	bne.n	800893e <_printf_i+0x1d6>
 80088a4:	2001      	movs	r0, #1
 80088a6:	4240      	negs	r0, r0
 80088a8:	b00b      	add	sp, #44	; 0x2c
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ac:	3145      	adds	r1, #69	; 0x45
 80088ae:	700a      	strb	r2, [r1, #0]
 80088b0:	4a34      	ldr	r2, [pc, #208]	; (8008984 <_printf_i+0x21c>)
 80088b2:	9203      	str	r2, [sp, #12]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	6821      	ldr	r1, [r4, #0]
 80088b8:	ca20      	ldmia	r2!, {r5}
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	0608      	lsls	r0, r1, #24
 80088be:	d516      	bpl.n	80088ee <_printf_i+0x186>
 80088c0:	07cb      	lsls	r3, r1, #31
 80088c2:	d502      	bpl.n	80088ca <_printf_i+0x162>
 80088c4:	2320      	movs	r3, #32
 80088c6:	4319      	orrs	r1, r3
 80088c8:	6021      	str	r1, [r4, #0]
 80088ca:	2710      	movs	r7, #16
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	d1b2      	bne.n	8008836 <_printf_i+0xce>
 80088d0:	2320      	movs	r3, #32
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	439a      	bics	r2, r3
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	e7ad      	b.n	8008836 <_printf_i+0xce>
 80088da:	2220      	movs	r2, #32
 80088dc:	6809      	ldr	r1, [r1, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	6022      	str	r2, [r4, #0]
 80088e2:	0022      	movs	r2, r4
 80088e4:	2178      	movs	r1, #120	; 0x78
 80088e6:	3245      	adds	r2, #69	; 0x45
 80088e8:	7011      	strb	r1, [r2, #0]
 80088ea:	4a27      	ldr	r2, [pc, #156]	; (8008988 <_printf_i+0x220>)
 80088ec:	e7e1      	b.n	80088b2 <_printf_i+0x14a>
 80088ee:	0648      	lsls	r0, r1, #25
 80088f0:	d5e6      	bpl.n	80088c0 <_printf_i+0x158>
 80088f2:	b2ad      	uxth	r5, r5
 80088f4:	e7e4      	b.n	80088c0 <_printf_i+0x158>
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	680d      	ldr	r5, [r1, #0]
 80088fa:	1d10      	adds	r0, r2, #4
 80088fc:	6949      	ldr	r1, [r1, #20]
 80088fe:	6018      	str	r0, [r3, #0]
 8008900:	6813      	ldr	r3, [r2, #0]
 8008902:	062e      	lsls	r6, r5, #24
 8008904:	d501      	bpl.n	800890a <_printf_i+0x1a2>
 8008906:	6019      	str	r1, [r3, #0]
 8008908:	e002      	b.n	8008910 <_printf_i+0x1a8>
 800890a:	066d      	lsls	r5, r5, #25
 800890c:	d5fb      	bpl.n	8008906 <_printf_i+0x19e>
 800890e:	8019      	strh	r1, [r3, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	9e04      	ldr	r6, [sp, #16]
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	e7bb      	b.n	8008890 <_printf_i+0x128>
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	1d11      	adds	r1, r2, #4
 800891c:	6019      	str	r1, [r3, #0]
 800891e:	6816      	ldr	r6, [r2, #0]
 8008920:	2100      	movs	r1, #0
 8008922:	0030      	movs	r0, r6
 8008924:	6862      	ldr	r2, [r4, #4]
 8008926:	f001 fb4f 	bl	8009fc8 <memchr>
 800892a:	2800      	cmp	r0, #0
 800892c:	d001      	beq.n	8008932 <_printf_i+0x1ca>
 800892e:	1b80      	subs	r0, r0, r6
 8008930:	6060      	str	r0, [r4, #4]
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	2300      	movs	r3, #0
 8008938:	9a04      	ldr	r2, [sp, #16]
 800893a:	7013      	strb	r3, [r2, #0]
 800893c:	e7a8      	b.n	8008890 <_printf_i+0x128>
 800893e:	6923      	ldr	r3, [r4, #16]
 8008940:	0032      	movs	r2, r6
 8008942:	9906      	ldr	r1, [sp, #24]
 8008944:	9805      	ldr	r0, [sp, #20]
 8008946:	9d07      	ldr	r5, [sp, #28]
 8008948:	47a8      	blx	r5
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d0aa      	beq.n	80088a4 <_printf_i+0x13c>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	079b      	lsls	r3, r3, #30
 8008952:	d415      	bmi.n	8008980 <_printf_i+0x218>
 8008954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008956:	68e0      	ldr	r0, [r4, #12]
 8008958:	4298      	cmp	r0, r3
 800895a:	daa5      	bge.n	80088a8 <_printf_i+0x140>
 800895c:	0018      	movs	r0, r3
 800895e:	e7a3      	b.n	80088a8 <_printf_i+0x140>
 8008960:	0022      	movs	r2, r4
 8008962:	2301      	movs	r3, #1
 8008964:	9906      	ldr	r1, [sp, #24]
 8008966:	9805      	ldr	r0, [sp, #20]
 8008968:	9e07      	ldr	r6, [sp, #28]
 800896a:	3219      	adds	r2, #25
 800896c:	47b0      	blx	r6
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d098      	beq.n	80088a4 <_printf_i+0x13c>
 8008972:	3501      	adds	r5, #1
 8008974:	68e3      	ldr	r3, [r4, #12]
 8008976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	42ab      	cmp	r3, r5
 800897c:	dcf0      	bgt.n	8008960 <_printf_i+0x1f8>
 800897e:	e7e9      	b.n	8008954 <_printf_i+0x1ec>
 8008980:	2500      	movs	r5, #0
 8008982:	e7f7      	b.n	8008974 <_printf_i+0x20c>
 8008984:	0800b57e 	.word	0x0800b57e
 8008988:	0800b58f 	.word	0x0800b58f

0800898c <iprintf>:
 800898c:	b40f      	push	{r0, r1, r2, r3}
 800898e:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <iprintf+0x30>)
 8008990:	b513      	push	{r0, r1, r4, lr}
 8008992:	681c      	ldr	r4, [r3, #0]
 8008994:	2c00      	cmp	r4, #0
 8008996:	d005      	beq.n	80089a4 <iprintf+0x18>
 8008998:	69a3      	ldr	r3, [r4, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <iprintf+0x18>
 800899e:	0020      	movs	r0, r4
 80089a0:	f001 f9f4 	bl	8009d8c <__sinit>
 80089a4:	ab05      	add	r3, sp, #20
 80089a6:	0020      	movs	r0, r4
 80089a8:	9a04      	ldr	r2, [sp, #16]
 80089aa:	68a1      	ldr	r1, [r4, #8]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	f001 ffe9 	bl	800a984 <_vfiprintf_r>
 80089b2:	bc16      	pop	{r1, r2, r4}
 80089b4:	bc08      	pop	{r3}
 80089b6:	b004      	add	sp, #16
 80089b8:	4718      	bx	r3
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	2000040c 	.word	0x2000040c

080089c0 <_puts_r>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	0005      	movs	r5, r0
 80089c4:	000e      	movs	r6, r1
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d004      	beq.n	80089d4 <_puts_r+0x14>
 80089ca:	6983      	ldr	r3, [r0, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <_puts_r+0x14>
 80089d0:	f001 f9dc 	bl	8009d8c <__sinit>
 80089d4:	69ab      	ldr	r3, [r5, #24]
 80089d6:	68ac      	ldr	r4, [r5, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <_puts_r+0x22>
 80089dc:	0028      	movs	r0, r5
 80089de:	f001 f9d5 	bl	8009d8c <__sinit>
 80089e2:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <_puts_r+0xd8>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	d122      	bne.n	8008a2e <_puts_r+0x6e>
 80089e8:	686c      	ldr	r4, [r5, #4]
 80089ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ec:	07db      	lsls	r3, r3, #31
 80089ee:	d405      	bmi.n	80089fc <_puts_r+0x3c>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	059b      	lsls	r3, r3, #22
 80089f4:	d402      	bmi.n	80089fc <_puts_r+0x3c>
 80089f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f8:	f001 fa6d 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	071b      	lsls	r3, r3, #28
 8008a00:	d502      	bpl.n	8008a08 <_puts_r+0x48>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d129      	bne.n	8008a5c <_puts_r+0x9c>
 8008a08:	0021      	movs	r1, r4
 8008a0a:	0028      	movs	r0, r5
 8008a0c:	f000 f972 	bl	8008cf4 <__swsetup_r>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d023      	beq.n	8008a5c <_puts_r+0x9c>
 8008a14:	2501      	movs	r5, #1
 8008a16:	426d      	negs	r5, r5
 8008a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a1a:	07db      	lsls	r3, r3, #31
 8008a1c:	d405      	bmi.n	8008a2a <_puts_r+0x6a>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	059b      	lsls	r3, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_puts_r+0x6a>
 8008a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a26:	f001 fa57 	bl	8009ed8 <__retarget_lock_release_recursive>
 8008a2a:	0028      	movs	r0, r5
 8008a2c:	bd70      	pop	{r4, r5, r6, pc}
 8008a2e:	4b1b      	ldr	r3, [pc, #108]	; (8008a9c <_puts_r+0xdc>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	d101      	bne.n	8008a38 <_puts_r+0x78>
 8008a34:	68ac      	ldr	r4, [r5, #8]
 8008a36:	e7d8      	b.n	80089ea <_puts_r+0x2a>
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <_puts_r+0xe0>)
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d1d5      	bne.n	80089ea <_puts_r+0x2a>
 8008a3e:	68ec      	ldr	r4, [r5, #12]
 8008a40:	e7d3      	b.n	80089ea <_puts_r+0x2a>
 8008a42:	3601      	adds	r6, #1
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	da04      	bge.n	8008a54 <_puts_r+0x94>
 8008a4a:	69a2      	ldr	r2, [r4, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	dc16      	bgt.n	8008a7e <_puts_r+0xbe>
 8008a50:	290a      	cmp	r1, #10
 8008a52:	d014      	beq.n	8008a7e <_puts_r+0xbe>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	6022      	str	r2, [r4, #0]
 8008a5a:	7019      	strb	r1, [r3, #0]
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	7831      	ldrb	r1, [r6, #0]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	2900      	cmp	r1, #0
 8008a64:	d1ed      	bne.n	8008a42 <_puts_r+0x82>
 8008a66:	60a3      	str	r3, [r4, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da0f      	bge.n	8008a8c <_puts_r+0xcc>
 8008a6c:	0028      	movs	r0, r5
 8008a6e:	0022      	movs	r2, r4
 8008a70:	310a      	adds	r1, #10
 8008a72:	f000 f8e9 	bl	8008c48 <__swbuf_r>
 8008a76:	250a      	movs	r5, #10
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d1cd      	bne.n	8008a18 <_puts_r+0x58>
 8008a7c:	e7ca      	b.n	8008a14 <_puts_r+0x54>
 8008a7e:	0022      	movs	r2, r4
 8008a80:	0028      	movs	r0, r5
 8008a82:	f000 f8e1 	bl	8008c48 <__swbuf_r>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d1e8      	bne.n	8008a5c <_puts_r+0x9c>
 8008a8a:	e7c3      	b.n	8008a14 <_puts_r+0x54>
 8008a8c:	250a      	movs	r5, #10
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	6022      	str	r2, [r4, #0]
 8008a94:	701d      	strb	r5, [r3, #0]
 8008a96:	e7bf      	b.n	8008a18 <_puts_r+0x58>
 8008a98:	0800b650 	.word	0x0800b650
 8008a9c:	0800b670 	.word	0x0800b670
 8008aa0:	0800b630 	.word	0x0800b630

08008aa4 <puts>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <puts+0x10>)
 8008aa8:	0001      	movs	r1, r0
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	f7ff ff88 	bl	80089c0 <_puts_r>
 8008ab0:	bd10      	pop	{r4, pc}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	2000040c 	.word	0x2000040c

08008ab8 <setvbuf>:
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aba:	001d      	movs	r5, r3
 8008abc:	4b5d      	ldr	r3, [pc, #372]	; (8008c34 <setvbuf+0x17c>)
 8008abe:	b085      	sub	sp, #20
 8008ac0:	681e      	ldr	r6, [r3, #0]
 8008ac2:	0004      	movs	r4, r0
 8008ac4:	000f      	movs	r7, r1
 8008ac6:	9200      	str	r2, [sp, #0]
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	d005      	beq.n	8008ad8 <setvbuf+0x20>
 8008acc:	69b3      	ldr	r3, [r6, #24]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <setvbuf+0x20>
 8008ad2:	0030      	movs	r0, r6
 8008ad4:	f001 f95a 	bl	8009d8c <__sinit>
 8008ad8:	4b57      	ldr	r3, [pc, #348]	; (8008c38 <setvbuf+0x180>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d161      	bne.n	8008ba2 <setvbuf+0xea>
 8008ade:	6874      	ldr	r4, [r6, #4]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d005      	beq.n	8008af2 <setvbuf+0x3a>
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d900      	bls.n	8008aec <setvbuf+0x34>
 8008aea:	e09d      	b.n	8008c28 <setvbuf+0x170>
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	da00      	bge.n	8008af2 <setvbuf+0x3a>
 8008af0:	e09a      	b.n	8008c28 <setvbuf+0x170>
 8008af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af4:	07db      	lsls	r3, r3, #31
 8008af6:	d405      	bmi.n	8008b04 <setvbuf+0x4c>
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	059b      	lsls	r3, r3, #22
 8008afc:	d402      	bmi.n	8008b04 <setvbuf+0x4c>
 8008afe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b00:	f001 f9e9 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 8008b04:	0021      	movs	r1, r4
 8008b06:	0030      	movs	r0, r6
 8008b08:	f001 f89e 	bl	8009c48 <_fflush_r>
 8008b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d008      	beq.n	8008b24 <setvbuf+0x6c>
 8008b12:	0023      	movs	r3, r4
 8008b14:	3344      	adds	r3, #68	; 0x44
 8008b16:	4299      	cmp	r1, r3
 8008b18:	d002      	beq.n	8008b20 <setvbuf+0x68>
 8008b1a:	0030      	movs	r0, r6
 8008b1c:	f001 fe28 	bl	800a770 <_free_r>
 8008b20:	2300      	movs	r3, #0
 8008b22:	6363      	str	r3, [r4, #52]	; 0x34
 8008b24:	2300      	movs	r3, #0
 8008b26:	61a3      	str	r3, [r4, #24]
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	061b      	lsls	r3, r3, #24
 8008b2e:	d503      	bpl.n	8008b38 <setvbuf+0x80>
 8008b30:	0030      	movs	r0, r6
 8008b32:	6921      	ldr	r1, [r4, #16]
 8008b34:	f001 fe1c 	bl	800a770 <_free_r>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	4a40      	ldr	r2, [pc, #256]	; (8008c3c <setvbuf+0x184>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	9b00      	ldr	r3, [sp, #0]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d100      	bne.n	8008b48 <setvbuf+0x90>
 8008b46:	e069      	b.n	8008c1c <setvbuf+0x164>
 8008b48:	ab03      	add	r3, sp, #12
 8008b4a:	0021      	movs	r1, r4
 8008b4c:	0030      	movs	r0, r6
 8008b4e:	aa02      	add	r2, sp, #8
 8008b50:	f001 f9c4 	bl	8009edc <__swhatbuf_r>
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	4303      	orrs	r3, r0
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	d12b      	bne.n	8008bb6 <setvbuf+0xfe>
 8008b5e:	9d02      	ldr	r5, [sp, #8]
 8008b60:	0028      	movs	r0, r5
 8008b62:	f001 fa27 	bl	8009fb4 <malloc>
 8008b66:	1e07      	subs	r7, r0, #0
 8008b68:	d153      	bne.n	8008c12 <setvbuf+0x15a>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	d149      	bne.n	8008c06 <setvbuf+0x14e>
 8008b72:	2501      	movs	r5, #1
 8008b74:	426d      	negs	r5, r5
 8008b76:	2302      	movs	r3, #2
 8008b78:	89a2      	ldrh	r2, [r4, #12]
 8008b7a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	60a2      	str	r2, [r4, #8]
 8008b82:	0022      	movs	r2, r4
 8008b84:	3247      	adds	r2, #71	; 0x47
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	6122      	str	r2, [r4, #16]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	b21b      	sxth	r3, r3
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	6162      	str	r2, [r4, #20]
 8008b92:	4211      	tst	r1, r2
 8008b94:	d134      	bne.n	8008c00 <setvbuf+0x148>
 8008b96:	059b      	lsls	r3, r3, #22
 8008b98:	d432      	bmi.n	8008c00 <setvbuf+0x148>
 8008b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b9c:	f001 f99c 	bl	8009ed8 <__retarget_lock_release_recursive>
 8008ba0:	e02e      	b.n	8008c00 <setvbuf+0x148>
 8008ba2:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <setvbuf+0x188>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d101      	bne.n	8008bac <setvbuf+0xf4>
 8008ba8:	68b4      	ldr	r4, [r6, #8]
 8008baa:	e799      	b.n	8008ae0 <setvbuf+0x28>
 8008bac:	4b25      	ldr	r3, [pc, #148]	; (8008c44 <setvbuf+0x18c>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d196      	bne.n	8008ae0 <setvbuf+0x28>
 8008bb2:	68f4      	ldr	r4, [r6, #12]
 8008bb4:	e794      	b.n	8008ae0 <setvbuf+0x28>
 8008bb6:	2f00      	cmp	r7, #0
 8008bb8:	d0d2      	beq.n	8008b60 <setvbuf+0xa8>
 8008bba:	69b3      	ldr	r3, [r6, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d102      	bne.n	8008bc6 <setvbuf+0x10e>
 8008bc0:	0030      	movs	r0, r6
 8008bc2:	f001 f8e3 	bl	8009d8c <__sinit>
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d102      	bne.n	8008bd2 <setvbuf+0x11a>
 8008bcc:	89a2      	ldrh	r2, [r4, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	89a2      	ldrh	r2, [r4, #12]
 8008bd4:	2308      	movs	r3, #8
 8008bd6:	0011      	movs	r1, r2
 8008bd8:	6027      	str	r7, [r4, #0]
 8008bda:	6127      	str	r7, [r4, #16]
 8008bdc:	6165      	str	r5, [r4, #20]
 8008bde:	4019      	ands	r1, r3
 8008be0:	421a      	tst	r2, r3
 8008be2:	d01f      	beq.n	8008c24 <setvbuf+0x16c>
 8008be4:	07d3      	lsls	r3, r2, #31
 8008be6:	d51b      	bpl.n	8008c20 <setvbuf+0x168>
 8008be8:	2300      	movs	r3, #0
 8008bea:	426d      	negs	r5, r5
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	61a5      	str	r5, [r4, #24]
 8008bf0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	000d      	movs	r5, r1
 8008bf6:	401d      	ands	r5, r3
 8008bf8:	4219      	tst	r1, r3
 8008bfa:	d118      	bne.n	8008c2e <setvbuf+0x176>
 8008bfc:	0593      	lsls	r3, r2, #22
 8008bfe:	d5cc      	bpl.n	8008b9a <setvbuf+0xe2>
 8008c00:	0028      	movs	r0, r5
 8008c02:	b005      	add	sp, #20
 8008c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c06:	9801      	ldr	r0, [sp, #4]
 8008c08:	f001 f9d4 	bl	8009fb4 <malloc>
 8008c0c:	9d01      	ldr	r5, [sp, #4]
 8008c0e:	1e07      	subs	r7, r0, #0
 8008c10:	d0af      	beq.n	8008b72 <setvbuf+0xba>
 8008c12:	2380      	movs	r3, #128	; 0x80
 8008c14:	89a2      	ldrh	r2, [r4, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	81a3      	strh	r3, [r4, #12]
 8008c1a:	e7ce      	b.n	8008bba <setvbuf+0x102>
 8008c1c:	2500      	movs	r5, #0
 8008c1e:	e7aa      	b.n	8008b76 <setvbuf+0xbe>
 8008c20:	60a5      	str	r5, [r4, #8]
 8008c22:	e7e5      	b.n	8008bf0 <setvbuf+0x138>
 8008c24:	60a1      	str	r1, [r4, #8]
 8008c26:	e7e3      	b.n	8008bf0 <setvbuf+0x138>
 8008c28:	2501      	movs	r5, #1
 8008c2a:	426d      	negs	r5, r5
 8008c2c:	e7e8      	b.n	8008c00 <setvbuf+0x148>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	e7e6      	b.n	8008c00 <setvbuf+0x148>
 8008c32:	46c0      	nop			; (mov r8, r8)
 8008c34:	2000040c 	.word	0x2000040c
 8008c38:	0800b650 	.word	0x0800b650
 8008c3c:	fffff35c 	.word	0xfffff35c
 8008c40:	0800b670 	.word	0x0800b670
 8008c44:	0800b630 	.word	0x0800b630

08008c48 <__swbuf_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	0005      	movs	r5, r0
 8008c4c:	000e      	movs	r6, r1
 8008c4e:	0014      	movs	r4, r2
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d004      	beq.n	8008c5e <__swbuf_r+0x16>
 8008c54:	6983      	ldr	r3, [r0, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <__swbuf_r+0x16>
 8008c5a:	f001 f897 	bl	8009d8c <__sinit>
 8008c5e:	4b22      	ldr	r3, [pc, #136]	; (8008ce8 <__swbuf_r+0xa0>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	d12e      	bne.n	8008cc2 <__swbuf_r+0x7a>
 8008c64:	686c      	ldr	r4, [r5, #4]
 8008c66:	69a3      	ldr	r3, [r4, #24]
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	071b      	lsls	r3, r3, #28
 8008c6e:	d532      	bpl.n	8008cd6 <__swbuf_r+0x8e>
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d02f      	beq.n	8008cd6 <__swbuf_r+0x8e>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	6922      	ldr	r2, [r4, #16]
 8008c7a:	b2f7      	uxtb	r7, r6
 8008c7c:	1a98      	subs	r0, r3, r2
 8008c7e:	6963      	ldr	r3, [r4, #20]
 8008c80:	b2f6      	uxtb	r6, r6
 8008c82:	4283      	cmp	r3, r0
 8008c84:	dc05      	bgt.n	8008c92 <__swbuf_r+0x4a>
 8008c86:	0021      	movs	r1, r4
 8008c88:	0028      	movs	r0, r5
 8008c8a:	f000 ffdd 	bl	8009c48 <_fflush_r>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d127      	bne.n	8008ce2 <__swbuf_r+0x9a>
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	3001      	adds	r0, #1
 8008c96:	3b01      	subs	r3, #1
 8008c98:	60a3      	str	r3, [r4, #8]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	701f      	strb	r7, [r3, #0]
 8008ca2:	6963      	ldr	r3, [r4, #20]
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	d004      	beq.n	8008cb2 <__swbuf_r+0x6a>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	07db      	lsls	r3, r3, #31
 8008cac:	d507      	bpl.n	8008cbe <__swbuf_r+0x76>
 8008cae:	2e0a      	cmp	r6, #10
 8008cb0:	d105      	bne.n	8008cbe <__swbuf_r+0x76>
 8008cb2:	0021      	movs	r1, r4
 8008cb4:	0028      	movs	r0, r5
 8008cb6:	f000 ffc7 	bl	8009c48 <_fflush_r>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d111      	bne.n	8008ce2 <__swbuf_r+0x9a>
 8008cbe:	0030      	movs	r0, r6
 8008cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc2:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <__swbuf_r+0xa4>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	d101      	bne.n	8008ccc <__swbuf_r+0x84>
 8008cc8:	68ac      	ldr	r4, [r5, #8]
 8008cca:	e7cc      	b.n	8008c66 <__swbuf_r+0x1e>
 8008ccc:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <__swbuf_r+0xa8>)
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d1c9      	bne.n	8008c66 <__swbuf_r+0x1e>
 8008cd2:	68ec      	ldr	r4, [r5, #12]
 8008cd4:	e7c7      	b.n	8008c66 <__swbuf_r+0x1e>
 8008cd6:	0021      	movs	r1, r4
 8008cd8:	0028      	movs	r0, r5
 8008cda:	f000 f80b 	bl	8008cf4 <__swsetup_r>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0c9      	beq.n	8008c76 <__swbuf_r+0x2e>
 8008ce2:	2601      	movs	r6, #1
 8008ce4:	4276      	negs	r6, r6
 8008ce6:	e7ea      	b.n	8008cbe <__swbuf_r+0x76>
 8008ce8:	0800b650 	.word	0x0800b650
 8008cec:	0800b670 	.word	0x0800b670
 8008cf0:	0800b630 	.word	0x0800b630

08008cf4 <__swsetup_r>:
 8008cf4:	4b37      	ldr	r3, [pc, #220]	; (8008dd4 <__swsetup_r+0xe0>)
 8008cf6:	b570      	push	{r4, r5, r6, lr}
 8008cf8:	681d      	ldr	r5, [r3, #0]
 8008cfa:	0006      	movs	r6, r0
 8008cfc:	000c      	movs	r4, r1
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	d005      	beq.n	8008d0e <__swsetup_r+0x1a>
 8008d02:	69ab      	ldr	r3, [r5, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <__swsetup_r+0x1a>
 8008d08:	0028      	movs	r0, r5
 8008d0a:	f001 f83f 	bl	8009d8c <__sinit>
 8008d0e:	4b32      	ldr	r3, [pc, #200]	; (8008dd8 <__swsetup_r+0xe4>)
 8008d10:	429c      	cmp	r4, r3
 8008d12:	d10f      	bne.n	8008d34 <__swsetup_r+0x40>
 8008d14:	686c      	ldr	r4, [r5, #4]
 8008d16:	230c      	movs	r3, #12
 8008d18:	5ee2      	ldrsh	r2, [r4, r3]
 8008d1a:	b293      	uxth	r3, r2
 8008d1c:	0711      	lsls	r1, r2, #28
 8008d1e:	d42d      	bmi.n	8008d7c <__swsetup_r+0x88>
 8008d20:	06d9      	lsls	r1, r3, #27
 8008d22:	d411      	bmi.n	8008d48 <__swsetup_r+0x54>
 8008d24:	2309      	movs	r3, #9
 8008d26:	2001      	movs	r0, #1
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	3337      	adds	r3, #55	; 0x37
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	4240      	negs	r0, r0
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	4b29      	ldr	r3, [pc, #164]	; (8008ddc <__swsetup_r+0xe8>)
 8008d36:	429c      	cmp	r4, r3
 8008d38:	d101      	bne.n	8008d3e <__swsetup_r+0x4a>
 8008d3a:	68ac      	ldr	r4, [r5, #8]
 8008d3c:	e7eb      	b.n	8008d16 <__swsetup_r+0x22>
 8008d3e:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <__swsetup_r+0xec>)
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d1e8      	bne.n	8008d16 <__swsetup_r+0x22>
 8008d44:	68ec      	ldr	r4, [r5, #12]
 8008d46:	e7e6      	b.n	8008d16 <__swsetup_r+0x22>
 8008d48:	075b      	lsls	r3, r3, #29
 8008d4a:	d513      	bpl.n	8008d74 <__swsetup_r+0x80>
 8008d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	d008      	beq.n	8008d64 <__swsetup_r+0x70>
 8008d52:	0023      	movs	r3, r4
 8008d54:	3344      	adds	r3, #68	; 0x44
 8008d56:	4299      	cmp	r1, r3
 8008d58:	d002      	beq.n	8008d60 <__swsetup_r+0x6c>
 8008d5a:	0030      	movs	r0, r6
 8008d5c:	f001 fd08 	bl	800a770 <_free_r>
 8008d60:	2300      	movs	r3, #0
 8008d62:	6363      	str	r3, [r4, #52]	; 0x34
 8008d64:	2224      	movs	r2, #36	; 0x24
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	4393      	bics	r3, r2
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6063      	str	r3, [r4, #4]
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	2308      	movs	r3, #8
 8008d76:	89a2      	ldrh	r2, [r4, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	81a3      	strh	r3, [r4, #12]
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <__swsetup_r+0xa6>
 8008d82:	21a0      	movs	r1, #160	; 0xa0
 8008d84:	2280      	movs	r2, #128	; 0x80
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	0089      	lsls	r1, r1, #2
 8008d8a:	0092      	lsls	r2, r2, #2
 8008d8c:	400b      	ands	r3, r1
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d003      	beq.n	8008d9a <__swsetup_r+0xa6>
 8008d92:	0021      	movs	r1, r4
 8008d94:	0030      	movs	r0, r6
 8008d96:	f001 f8c9 	bl	8009f2c <__smakebuf_r>
 8008d9a:	220c      	movs	r2, #12
 8008d9c:	5ea3      	ldrsh	r3, [r4, r2]
 8008d9e:	2001      	movs	r0, #1
 8008da0:	001a      	movs	r2, r3
 8008da2:	b299      	uxth	r1, r3
 8008da4:	4002      	ands	r2, r0
 8008da6:	4203      	tst	r3, r0
 8008da8:	d00f      	beq.n	8008dca <__swsetup_r+0xd6>
 8008daa:	2200      	movs	r2, #0
 8008dac:	60a2      	str	r2, [r4, #8]
 8008dae:	6962      	ldr	r2, [r4, #20]
 8008db0:	4252      	negs	r2, r2
 8008db2:	61a2      	str	r2, [r4, #24]
 8008db4:	2000      	movs	r0, #0
 8008db6:	6922      	ldr	r2, [r4, #16]
 8008db8:	4282      	cmp	r2, r0
 8008dba:	d1ba      	bne.n	8008d32 <__swsetup_r+0x3e>
 8008dbc:	060a      	lsls	r2, r1, #24
 8008dbe:	d5b8      	bpl.n	8008d32 <__swsetup_r+0x3e>
 8008dc0:	2240      	movs	r2, #64	; 0x40
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	3801      	subs	r0, #1
 8008dc8:	e7b3      	b.n	8008d32 <__swsetup_r+0x3e>
 8008dca:	0788      	lsls	r0, r1, #30
 8008dcc:	d400      	bmi.n	8008dd0 <__swsetup_r+0xdc>
 8008dce:	6962      	ldr	r2, [r4, #20]
 8008dd0:	60a2      	str	r2, [r4, #8]
 8008dd2:	e7ef      	b.n	8008db4 <__swsetup_r+0xc0>
 8008dd4:	2000040c 	.word	0x2000040c
 8008dd8:	0800b650 	.word	0x0800b650
 8008ddc:	0800b670 	.word	0x0800b670
 8008de0:	0800b630 	.word	0x0800b630

08008de4 <quorem>:
 8008de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de6:	0006      	movs	r6, r0
 8008de8:	690b      	ldr	r3, [r1, #16]
 8008dea:	6932      	ldr	r2, [r6, #16]
 8008dec:	b087      	sub	sp, #28
 8008dee:	2000      	movs	r0, #0
 8008df0:	9103      	str	r1, [sp, #12]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	db65      	blt.n	8008ec2 <quorem+0xde>
 8008df6:	3b01      	subs	r3, #1
 8008df8:	009c      	lsls	r4, r3, #2
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	000b      	movs	r3, r1
 8008dfe:	3314      	adds	r3, #20
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	191b      	adds	r3, r3, r4
 8008e04:	9304      	str	r3, [sp, #16]
 8008e06:	0033      	movs	r3, r6
 8008e08:	3314      	adds	r3, #20
 8008e0a:	9302      	str	r3, [sp, #8]
 8008e0c:	191c      	adds	r4, r3, r4
 8008e0e:	9b04      	ldr	r3, [sp, #16]
 8008e10:	6827      	ldr	r7, [r4, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	0038      	movs	r0, r7
 8008e16:	1c5d      	adds	r5, r3, #1
 8008e18:	0029      	movs	r1, r5
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	f7f7 f990 	bl	8000140 <__udivsi3>
 8008e20:	9001      	str	r0, [sp, #4]
 8008e22:	42af      	cmp	r7, r5
 8008e24:	d324      	bcc.n	8008e70 <quorem+0x8c>
 8008e26:	2500      	movs	r5, #0
 8008e28:	46ac      	mov	ip, r5
 8008e2a:	9802      	ldr	r0, [sp, #8]
 8008e2c:	9f05      	ldr	r7, [sp, #20]
 8008e2e:	cf08      	ldmia	r7!, {r3}
 8008e30:	9a01      	ldr	r2, [sp, #4]
 8008e32:	b299      	uxth	r1, r3
 8008e34:	4351      	muls	r1, r2
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	4353      	muls	r3, r2
 8008e3a:	1949      	adds	r1, r1, r5
 8008e3c:	0c0a      	lsrs	r2, r1, #16
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	6802      	ldr	r2, [r0, #0]
 8008e42:	b289      	uxth	r1, r1
 8008e44:	b292      	uxth	r2, r2
 8008e46:	4462      	add	r2, ip
 8008e48:	1a52      	subs	r2, r2, r1
 8008e4a:	6801      	ldr	r1, [r0, #0]
 8008e4c:	0c1d      	lsrs	r5, r3, #16
 8008e4e:	0c09      	lsrs	r1, r1, #16
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	1acb      	subs	r3, r1, r3
 8008e54:	1411      	asrs	r1, r2, #16
 8008e56:	185b      	adds	r3, r3, r1
 8008e58:	1419      	asrs	r1, r3, #16
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	041b      	lsls	r3, r3, #16
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	9b04      	ldr	r3, [sp, #16]
 8008e62:	468c      	mov	ip, r1
 8008e64:	c004      	stmia	r0!, {r2}
 8008e66:	42bb      	cmp	r3, r7
 8008e68:	d2e1      	bcs.n	8008e2e <quorem+0x4a>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d030      	beq.n	8008ed2 <quorem+0xee>
 8008e70:	0030      	movs	r0, r6
 8008e72:	9903      	ldr	r1, [sp, #12]
 8008e74:	f001 fb38 	bl	800a4e8 <__mcmp>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	db21      	blt.n	8008ec0 <quorem+0xdc>
 8008e7c:	0030      	movs	r0, r6
 8008e7e:	2400      	movs	r4, #0
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	9903      	ldr	r1, [sp, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	3014      	adds	r0, #20
 8008e8a:	3114      	adds	r1, #20
 8008e8c:	6803      	ldr	r3, [r0, #0]
 8008e8e:	c920      	ldmia	r1!, {r5}
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	1914      	adds	r4, r2, r4
 8008e94:	b2aa      	uxth	r2, r5
 8008e96:	1aa2      	subs	r2, r4, r2
 8008e98:	0c1b      	lsrs	r3, r3, #16
 8008e9a:	0c2d      	lsrs	r5, r5, #16
 8008e9c:	1414      	asrs	r4, r2, #16
 8008e9e:	1b5b      	subs	r3, r3, r5
 8008ea0:	191b      	adds	r3, r3, r4
 8008ea2:	141c      	asrs	r4, r3, #16
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	c008      	stmia	r0!, {r3}
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	428b      	cmp	r3, r1
 8008eb0:	d2ec      	bcs.n	8008e8c <quorem+0xa8>
 8008eb2:	9b00      	ldr	r3, [sp, #0]
 8008eb4:	9a02      	ldr	r2, [sp, #8]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	18d3      	adds	r3, r2, r3
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	d015      	beq.n	8008eec <quorem+0x108>
 8008ec0:	9801      	ldr	r0, [sp, #4]
 8008ec2:	b007      	add	sp, #28
 8008ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <quorem+0xf6>
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	3c04      	subs	r4, #4
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	d3f5      	bcc.n	8008ec6 <quorem+0xe2>
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	6133      	str	r3, [r6, #16]
 8008ede:	e7c7      	b.n	8008e70 <quorem+0x8c>
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	d106      	bne.n	8008ef4 <quorem+0x110>
 8008ee6:	9a00      	ldr	r2, [sp, #0]
 8008ee8:	3a01      	subs	r2, #1
 8008eea:	9200      	str	r2, [sp, #0]
 8008eec:	9a02      	ldr	r2, [sp, #8]
 8008eee:	3b04      	subs	r3, #4
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d3f5      	bcc.n	8008ee0 <quorem+0xfc>
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	6133      	str	r3, [r6, #16]
 8008ef8:	e7e2      	b.n	8008ec0 <quorem+0xdc>
	...

08008efc <_dtoa_r>:
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efe:	b09d      	sub	sp, #116	; 0x74
 8008f00:	9202      	str	r2, [sp, #8]
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	9c03      	ldr	r4, [sp, #12]
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	9409      	str	r4, [sp, #36]	; 0x24
 8008f0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f0e:	0007      	movs	r7, r0
 8008f10:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008f12:	2c00      	cmp	r4, #0
 8008f14:	d10e      	bne.n	8008f34 <_dtoa_r+0x38>
 8008f16:	2010      	movs	r0, #16
 8008f18:	f001 f84c 	bl	8009fb4 <malloc>
 8008f1c:	1e02      	subs	r2, r0, #0
 8008f1e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f20:	d104      	bne.n	8008f2c <_dtoa_r+0x30>
 8008f22:	21ea      	movs	r1, #234	; 0xea
 8008f24:	4bc7      	ldr	r3, [pc, #796]	; (8009244 <_dtoa_r+0x348>)
 8008f26:	48c8      	ldr	r0, [pc, #800]	; (8009248 <_dtoa_r+0x34c>)
 8008f28:	f001 fed8 	bl	800acdc <__assert_func>
 8008f2c:	6044      	str	r4, [r0, #4]
 8008f2e:	6084      	str	r4, [r0, #8]
 8008f30:	6004      	str	r4, [r0, #0]
 8008f32:	60c4      	str	r4, [r0, #12]
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	6819      	ldr	r1, [r3, #0]
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	d00a      	beq.n	8008f52 <_dtoa_r+0x56>
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4093      	lsls	r3, r2
 8008f42:	604a      	str	r2, [r1, #4]
 8008f44:	608b      	str	r3, [r1, #8]
 8008f46:	0038      	movs	r0, r7
 8008f48:	f001 f88e 	bl	800a068 <_Bfree>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	da20      	bge.n	8008f9a <_dtoa_r+0x9e>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	085b      	lsrs	r3, r3, #1
 8008f62:	9309      	str	r3, [sp, #36]	; 0x24
 8008f64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f66:	4bb9      	ldr	r3, [pc, #740]	; (800924c <_dtoa_r+0x350>)
 8008f68:	4ab8      	ldr	r2, [pc, #736]	; (800924c <_dtoa_r+0x350>)
 8008f6a:	402b      	ands	r3, r5
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d117      	bne.n	8008fa0 <_dtoa_r+0xa4>
 8008f70:	4bb7      	ldr	r3, [pc, #732]	; (8009250 <_dtoa_r+0x354>)
 8008f72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f74:	0328      	lsls	r0, r5, #12
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	9b02      	ldr	r3, [sp, #8]
 8008f7a:	0b00      	lsrs	r0, r0, #12
 8008f7c:	4318      	orrs	r0, r3
 8008f7e:	d101      	bne.n	8008f84 <_dtoa_r+0x88>
 8008f80:	f000 fdbf 	bl	8009b02 <_dtoa_r+0xc06>
 8008f84:	48b3      	ldr	r0, [pc, #716]	; (8009254 <_dtoa_r+0x358>)
 8008f86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f88:	9006      	str	r0, [sp, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <_dtoa_r+0x98>
 8008f8e:	4bb2      	ldr	r3, [pc, #712]	; (8009258 <_dtoa_r+0x35c>)
 8008f90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	9806      	ldr	r0, [sp, #24]
 8008f96:	b01d      	add	sp, #116	; 0x74
 8008f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	602b      	str	r3, [r5, #0]
 8008f9e:	e7e1      	b.n	8008f64 <_dtoa_r+0x68>
 8008fa0:	9b08      	ldr	r3, [sp, #32]
 8008fa2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008fa4:	9312      	str	r3, [sp, #72]	; 0x48
 8008fa6:	9413      	str	r4, [sp, #76]	; 0x4c
 8008fa8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008faa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f7f7 fa4c 	bl	800044c <__aeabi_dcmpeq>
 8008fb4:	1e04      	subs	r4, r0, #0
 8008fb6:	d009      	beq.n	8008fcc <_dtoa_r+0xd0>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	4ba7      	ldr	r3, [pc, #668]	; (800925c <_dtoa_r+0x360>)
 8008fc0:	9306      	str	r3, [sp, #24]
 8008fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0e5      	beq.n	8008f94 <_dtoa_r+0x98>
 8008fc8:	4ba5      	ldr	r3, [pc, #660]	; (8009260 <_dtoa_r+0x364>)
 8008fca:	e7e1      	b.n	8008f90 <_dtoa_r+0x94>
 8008fcc:	ab1a      	add	r3, sp, #104	; 0x68
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	0038      	movs	r0, r7
 8008fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fda:	f001 fb39 	bl	800a650 <__d2b>
 8008fde:	006e      	lsls	r6, r5, #1
 8008fe0:	9005      	str	r0, [sp, #20]
 8008fe2:	0d76      	lsrs	r6, r6, #21
 8008fe4:	d100      	bne.n	8008fe8 <_dtoa_r+0xec>
 8008fe6:	e07c      	b.n	80090e2 <_dtoa_r+0x1e6>
 8008fe8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008fea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fee:	4a9d      	ldr	r2, [pc, #628]	; (8009264 <_dtoa_r+0x368>)
 8008ff0:	031b      	lsls	r3, r3, #12
 8008ff2:	0b1b      	lsrs	r3, r3, #12
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	0011      	movs	r1, r2
 8008ff8:	4b9b      	ldr	r3, [pc, #620]	; (8009268 <_dtoa_r+0x36c>)
 8008ffa:	9418      	str	r4, [sp, #96]	; 0x60
 8008ffc:	18f6      	adds	r6, r6, r3
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b9a      	ldr	r3, [pc, #616]	; (800926c <_dtoa_r+0x370>)
 8009002:	f7f8 fce7 	bl	80019d4 <__aeabi_dsub>
 8009006:	4a9a      	ldr	r2, [pc, #616]	; (8009270 <_dtoa_r+0x374>)
 8009008:	4b9a      	ldr	r3, [pc, #616]	; (8009274 <_dtoa_r+0x378>)
 800900a:	f7f8 fa77 	bl	80014fc <__aeabi_dmul>
 800900e:	4a9a      	ldr	r2, [pc, #616]	; (8009278 <_dtoa_r+0x37c>)
 8009010:	4b9a      	ldr	r3, [pc, #616]	; (800927c <_dtoa_r+0x380>)
 8009012:	f7f7 fb35 	bl	8000680 <__aeabi_dadd>
 8009016:	0004      	movs	r4, r0
 8009018:	0030      	movs	r0, r6
 800901a:	000d      	movs	r5, r1
 800901c:	f7f9 f8c0 	bl	80021a0 <__aeabi_i2d>
 8009020:	4a97      	ldr	r2, [pc, #604]	; (8009280 <_dtoa_r+0x384>)
 8009022:	4b98      	ldr	r3, [pc, #608]	; (8009284 <_dtoa_r+0x388>)
 8009024:	f7f8 fa6a 	bl	80014fc <__aeabi_dmul>
 8009028:	0002      	movs	r2, r0
 800902a:	000b      	movs	r3, r1
 800902c:	0020      	movs	r0, r4
 800902e:	0029      	movs	r1, r5
 8009030:	f7f7 fb26 	bl	8000680 <__aeabi_dadd>
 8009034:	0004      	movs	r4, r0
 8009036:	000d      	movs	r5, r1
 8009038:	f7f9 f87c 	bl	8002134 <__aeabi_d2iz>
 800903c:	2200      	movs	r2, #0
 800903e:	9002      	str	r0, [sp, #8]
 8009040:	2300      	movs	r3, #0
 8009042:	0020      	movs	r0, r4
 8009044:	0029      	movs	r1, r5
 8009046:	f7f7 fa07 	bl	8000458 <__aeabi_dcmplt>
 800904a:	2800      	cmp	r0, #0
 800904c:	d00b      	beq.n	8009066 <_dtoa_r+0x16a>
 800904e:	9802      	ldr	r0, [sp, #8]
 8009050:	f7f9 f8a6 	bl	80021a0 <__aeabi_i2d>
 8009054:	002b      	movs	r3, r5
 8009056:	0022      	movs	r2, r4
 8009058:	f7f7 f9f8 	bl	800044c <__aeabi_dcmpeq>
 800905c:	4243      	negs	r3, r0
 800905e:	4158      	adcs	r0, r3
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	1a1b      	subs	r3, r3, r0
 8009064:	9302      	str	r3, [sp, #8]
 8009066:	2301      	movs	r3, #1
 8009068:	9316      	str	r3, [sp, #88]	; 0x58
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	2b16      	cmp	r3, #22
 800906e:	d80f      	bhi.n	8009090 <_dtoa_r+0x194>
 8009070:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009072:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009074:	00da      	lsls	r2, r3, #3
 8009076:	4b84      	ldr	r3, [pc, #528]	; (8009288 <_dtoa_r+0x38c>)
 8009078:	189b      	adds	r3, r3, r2
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f7f7 f9eb 	bl	8000458 <__aeabi_dcmplt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d049      	beq.n	800911a <_dtoa_r+0x21e>
 8009086:	9b02      	ldr	r3, [sp, #8]
 8009088:	3b01      	subs	r3, #1
 800908a:	9302      	str	r3, [sp, #8]
 800908c:	2300      	movs	r3, #0
 800908e:	9316      	str	r3, [sp, #88]	; 0x58
 8009090:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009092:	1b9e      	subs	r6, r3, r6
 8009094:	2300      	movs	r3, #0
 8009096:	930a      	str	r3, [sp, #40]	; 0x28
 8009098:	0033      	movs	r3, r6
 800909a:	3b01      	subs	r3, #1
 800909c:	930d      	str	r3, [sp, #52]	; 0x34
 800909e:	d504      	bpl.n	80090aa <_dtoa_r+0x1ae>
 80090a0:	2301      	movs	r3, #1
 80090a2:	1b9b      	subs	r3, r3, r6
 80090a4:	930a      	str	r3, [sp, #40]	; 0x28
 80090a6:	2300      	movs	r3, #0
 80090a8:	930d      	str	r3, [sp, #52]	; 0x34
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db36      	blt.n	800911e <_dtoa_r+0x222>
 80090b0:	9a02      	ldr	r2, [sp, #8]
 80090b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090b4:	4694      	mov	ip, r2
 80090b6:	4463      	add	r3, ip
 80090b8:	930d      	str	r3, [sp, #52]	; 0x34
 80090ba:	2300      	movs	r3, #0
 80090bc:	9215      	str	r2, [sp, #84]	; 0x54
 80090be:	930e      	str	r3, [sp, #56]	; 0x38
 80090c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c2:	2401      	movs	r4, #1
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d864      	bhi.n	8009192 <_dtoa_r+0x296>
 80090c8:	2b05      	cmp	r3, #5
 80090ca:	dd02      	ble.n	80090d2 <_dtoa_r+0x1d6>
 80090cc:	2400      	movs	r4, #0
 80090ce:	3b04      	subs	r3, #4
 80090d0:	9322      	str	r3, [sp, #136]	; 0x88
 80090d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090d4:	1e98      	subs	r0, r3, #2
 80090d6:	2803      	cmp	r0, #3
 80090d8:	d864      	bhi.n	80091a4 <_dtoa_r+0x2a8>
 80090da:	f7f7 f81d 	bl	8000118 <__gnu_thumb1_case_uqi>
 80090de:	3829      	.short	0x3829
 80090e0:	5836      	.short	0x5836
 80090e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090e6:	189e      	adds	r6, r3, r2
 80090e8:	4b68      	ldr	r3, [pc, #416]	; (800928c <_dtoa_r+0x390>)
 80090ea:	18f2      	adds	r2, r6, r3
 80090ec:	2a20      	cmp	r2, #32
 80090ee:	dd0f      	ble.n	8009110 <_dtoa_r+0x214>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	409d      	lsls	r5, r3
 80090f6:	4b66      	ldr	r3, [pc, #408]	; (8009290 <_dtoa_r+0x394>)
 80090f8:	9802      	ldr	r0, [sp, #8]
 80090fa:	18f3      	adds	r3, r6, r3
 80090fc:	40d8      	lsrs	r0, r3
 80090fe:	4328      	orrs	r0, r5
 8009100:	f7f9 f87e 	bl	8002200 <__aeabi_ui2d>
 8009104:	2301      	movs	r3, #1
 8009106:	4c63      	ldr	r4, [pc, #396]	; (8009294 <_dtoa_r+0x398>)
 8009108:	3e01      	subs	r6, #1
 800910a:	1909      	adds	r1, r1, r4
 800910c:	9318      	str	r3, [sp, #96]	; 0x60
 800910e:	e776      	b.n	8008ffe <_dtoa_r+0x102>
 8009110:	2320      	movs	r3, #32
 8009112:	9802      	ldr	r0, [sp, #8]
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	4098      	lsls	r0, r3
 8009118:	e7f2      	b.n	8009100 <_dtoa_r+0x204>
 800911a:	9016      	str	r0, [sp, #88]	; 0x58
 800911c:	e7b8      	b.n	8009090 <_dtoa_r+0x194>
 800911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009120:	9a02      	ldr	r2, [sp, #8]
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	930a      	str	r3, [sp, #40]	; 0x28
 8009126:	4253      	negs	r3, r2
 8009128:	930e      	str	r3, [sp, #56]	; 0x38
 800912a:	2300      	movs	r3, #0
 800912c:	9315      	str	r3, [sp, #84]	; 0x54
 800912e:	e7c7      	b.n	80090c0 <_dtoa_r+0x1c4>
 8009130:	2300      	movs	r3, #0
 8009132:	930f      	str	r3, [sp, #60]	; 0x3c
 8009134:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009136:	930c      	str	r3, [sp, #48]	; 0x30
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dc13      	bgt.n	8009166 <_dtoa_r+0x26a>
 800913e:	2301      	movs	r3, #1
 8009140:	001a      	movs	r2, r3
 8009142:	930c      	str	r3, [sp, #48]	; 0x30
 8009144:	9307      	str	r3, [sp, #28]
 8009146:	9223      	str	r2, [sp, #140]	; 0x8c
 8009148:	e00d      	b.n	8009166 <_dtoa_r+0x26a>
 800914a:	2301      	movs	r3, #1
 800914c:	e7f1      	b.n	8009132 <_dtoa_r+0x236>
 800914e:	2300      	movs	r3, #0
 8009150:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009152:	930f      	str	r3, [sp, #60]	; 0x3c
 8009154:	4694      	mov	ip, r2
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	4463      	add	r3, ip
 800915a:	930c      	str	r3, [sp, #48]	; 0x30
 800915c:	3301      	adds	r3, #1
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	dc00      	bgt.n	8009166 <_dtoa_r+0x26a>
 8009164:	2301      	movs	r3, #1
 8009166:	2200      	movs	r2, #0
 8009168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800916a:	6042      	str	r2, [r0, #4]
 800916c:	3204      	adds	r2, #4
 800916e:	0015      	movs	r5, r2
 8009170:	3514      	adds	r5, #20
 8009172:	6841      	ldr	r1, [r0, #4]
 8009174:	429d      	cmp	r5, r3
 8009176:	d919      	bls.n	80091ac <_dtoa_r+0x2b0>
 8009178:	0038      	movs	r0, r7
 800917a:	f000 ff31 	bl	8009fe0 <_Balloc>
 800917e:	9006      	str	r0, [sp, #24]
 8009180:	2800      	cmp	r0, #0
 8009182:	d117      	bne.n	80091b4 <_dtoa_r+0x2b8>
 8009184:	21d5      	movs	r1, #213	; 0xd5
 8009186:	0002      	movs	r2, r0
 8009188:	4b43      	ldr	r3, [pc, #268]	; (8009298 <_dtoa_r+0x39c>)
 800918a:	0049      	lsls	r1, r1, #1
 800918c:	e6cb      	b.n	8008f26 <_dtoa_r+0x2a>
 800918e:	2301      	movs	r3, #1
 8009190:	e7de      	b.n	8009150 <_dtoa_r+0x254>
 8009192:	2300      	movs	r3, #0
 8009194:	940f      	str	r4, [sp, #60]	; 0x3c
 8009196:	9322      	str	r3, [sp, #136]	; 0x88
 8009198:	3b01      	subs	r3, #1
 800919a:	930c      	str	r3, [sp, #48]	; 0x30
 800919c:	9307      	str	r3, [sp, #28]
 800919e:	2200      	movs	r2, #0
 80091a0:	3313      	adds	r3, #19
 80091a2:	e7d0      	b.n	8009146 <_dtoa_r+0x24a>
 80091a4:	2301      	movs	r3, #1
 80091a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a8:	3b02      	subs	r3, #2
 80091aa:	e7f6      	b.n	800919a <_dtoa_r+0x29e>
 80091ac:	3101      	adds	r1, #1
 80091ae:	6041      	str	r1, [r0, #4]
 80091b0:	0052      	lsls	r2, r2, #1
 80091b2:	e7dc      	b.n	800916e <_dtoa_r+0x272>
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	9a06      	ldr	r2, [sp, #24]
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	9b07      	ldr	r3, [sp, #28]
 80091bc:	2b0e      	cmp	r3, #14
 80091be:	d900      	bls.n	80091c2 <_dtoa_r+0x2c6>
 80091c0:	e0eb      	b.n	800939a <_dtoa_r+0x49e>
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	d100      	bne.n	80091c8 <_dtoa_r+0x2cc>
 80091c6:	e0e8      	b.n	800939a <_dtoa_r+0x49e>
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd68      	ble.n	80092a0 <_dtoa_r+0x3a4>
 80091ce:	001a      	movs	r2, r3
 80091d0:	210f      	movs	r1, #15
 80091d2:	4b2d      	ldr	r3, [pc, #180]	; (8009288 <_dtoa_r+0x38c>)
 80091d4:	400a      	ands	r2, r1
 80091d6:	00d2      	lsls	r2, r2, #3
 80091d8:	189b      	adds	r3, r3, r2
 80091da:	681d      	ldr	r5, [r3, #0]
 80091dc:	685e      	ldr	r6, [r3, #4]
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	111c      	asrs	r4, r3, #4
 80091e2:	2302      	movs	r3, #2
 80091e4:	9310      	str	r3, [sp, #64]	; 0x40
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	05db      	lsls	r3, r3, #23
 80091ea:	d50b      	bpl.n	8009204 <_dtoa_r+0x308>
 80091ec:	4b2b      	ldr	r3, [pc, #172]	; (800929c <_dtoa_r+0x3a0>)
 80091ee:	400c      	ands	r4, r1
 80091f0:	6a1a      	ldr	r2, [r3, #32]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80091f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80091f8:	f7f7 fd7e 	bl	8000cf8 <__aeabi_ddiv>
 80091fc:	2303      	movs	r3, #3
 80091fe:	9008      	str	r0, [sp, #32]
 8009200:	9109      	str	r1, [sp, #36]	; 0x24
 8009202:	9310      	str	r3, [sp, #64]	; 0x40
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <_dtoa_r+0x3a0>)
 8009206:	9314      	str	r3, [sp, #80]	; 0x50
 8009208:	2c00      	cmp	r4, #0
 800920a:	d108      	bne.n	800921e <_dtoa_r+0x322>
 800920c:	9808      	ldr	r0, [sp, #32]
 800920e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009210:	002a      	movs	r2, r5
 8009212:	0033      	movs	r3, r6
 8009214:	f7f7 fd70 	bl	8000cf8 <__aeabi_ddiv>
 8009218:	9008      	str	r0, [sp, #32]
 800921a:	9109      	str	r1, [sp, #36]	; 0x24
 800921c:	e05c      	b.n	80092d8 <_dtoa_r+0x3dc>
 800921e:	2301      	movs	r3, #1
 8009220:	421c      	tst	r4, r3
 8009222:	d00b      	beq.n	800923c <_dtoa_r+0x340>
 8009224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009226:	0028      	movs	r0, r5
 8009228:	3301      	adds	r3, #1
 800922a:	9310      	str	r3, [sp, #64]	; 0x40
 800922c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800922e:	0031      	movs	r1, r6
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f7f8 f962 	bl	80014fc <__aeabi_dmul>
 8009238:	0005      	movs	r5, r0
 800923a:	000e      	movs	r6, r1
 800923c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800923e:	1064      	asrs	r4, r4, #1
 8009240:	3308      	adds	r3, #8
 8009242:	e7e0      	b.n	8009206 <_dtoa_r+0x30a>
 8009244:	0800b5ad 	.word	0x0800b5ad
 8009248:	0800b5c4 	.word	0x0800b5c4
 800924c:	7ff00000 	.word	0x7ff00000
 8009250:	0000270f 	.word	0x0000270f
 8009254:	0800b5a9 	.word	0x0800b5a9
 8009258:	0800b5ac 	.word	0x0800b5ac
 800925c:	0800b57c 	.word	0x0800b57c
 8009260:	0800b57d 	.word	0x0800b57d
 8009264:	3ff00000 	.word	0x3ff00000
 8009268:	fffffc01 	.word	0xfffffc01
 800926c:	3ff80000 	.word	0x3ff80000
 8009270:	636f4361 	.word	0x636f4361
 8009274:	3fd287a7 	.word	0x3fd287a7
 8009278:	8b60c8b3 	.word	0x8b60c8b3
 800927c:	3fc68a28 	.word	0x3fc68a28
 8009280:	509f79fb 	.word	0x509f79fb
 8009284:	3fd34413 	.word	0x3fd34413
 8009288:	0800b718 	.word	0x0800b718
 800928c:	00000432 	.word	0x00000432
 8009290:	00000412 	.word	0x00000412
 8009294:	fe100000 	.word	0xfe100000
 8009298:	0800b61f 	.word	0x0800b61f
 800929c:	0800b6f0 	.word	0x0800b6f0
 80092a0:	2302      	movs	r3, #2
 80092a2:	9310      	str	r3, [sp, #64]	; 0x40
 80092a4:	9b02      	ldr	r3, [sp, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d016      	beq.n	80092d8 <_dtoa_r+0x3dc>
 80092aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80092ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092ae:	425c      	negs	r4, r3
 80092b0:	230f      	movs	r3, #15
 80092b2:	4ab6      	ldr	r2, [pc, #728]	; (800958c <_dtoa_r+0x690>)
 80092b4:	4023      	ands	r3, r4
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f7f8 f91d 	bl	80014fc <__aeabi_dmul>
 80092c2:	2601      	movs	r6, #1
 80092c4:	2300      	movs	r3, #0
 80092c6:	9008      	str	r0, [sp, #32]
 80092c8:	9109      	str	r1, [sp, #36]	; 0x24
 80092ca:	4db1      	ldr	r5, [pc, #708]	; (8009590 <_dtoa_r+0x694>)
 80092cc:	1124      	asrs	r4, r4, #4
 80092ce:	2c00      	cmp	r4, #0
 80092d0:	d000      	beq.n	80092d4 <_dtoa_r+0x3d8>
 80092d2:	e094      	b.n	80093fe <_dtoa_r+0x502>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d19f      	bne.n	8009218 <_dtoa_r+0x31c>
 80092d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d100      	bne.n	80092e0 <_dtoa_r+0x3e4>
 80092de:	e09b      	b.n	8009418 <_dtoa_r+0x51c>
 80092e0:	9c08      	ldr	r4, [sp, #32]
 80092e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80092e4:	2200      	movs	r2, #0
 80092e6:	0020      	movs	r0, r4
 80092e8:	0029      	movs	r1, r5
 80092ea:	4baa      	ldr	r3, [pc, #680]	; (8009594 <_dtoa_r+0x698>)
 80092ec:	f7f7 f8b4 	bl	8000458 <__aeabi_dcmplt>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d100      	bne.n	80092f6 <_dtoa_r+0x3fa>
 80092f4:	e090      	b.n	8009418 <_dtoa_r+0x51c>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d100      	bne.n	80092fe <_dtoa_r+0x402>
 80092fc:	e08c      	b.n	8009418 <_dtoa_r+0x51c>
 80092fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009300:	2b00      	cmp	r3, #0
 8009302:	dd46      	ble.n	8009392 <_dtoa_r+0x496>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	0020      	movs	r0, r4
 800930a:	0029      	movs	r1, r5
 800930c:	1e5e      	subs	r6, r3, #1
 800930e:	4ba2      	ldr	r3, [pc, #648]	; (8009598 <_dtoa_r+0x69c>)
 8009310:	f7f8 f8f4 	bl	80014fc <__aeabi_dmul>
 8009314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009316:	9008      	str	r0, [sp, #32]
 8009318:	9109      	str	r1, [sp, #36]	; 0x24
 800931a:	3301      	adds	r3, #1
 800931c:	9310      	str	r3, [sp, #64]	; 0x40
 800931e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009320:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009322:	9c08      	ldr	r4, [sp, #32]
 8009324:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009326:	9314      	str	r3, [sp, #80]	; 0x50
 8009328:	f7f8 ff3a 	bl	80021a0 <__aeabi_i2d>
 800932c:	0022      	movs	r2, r4
 800932e:	002b      	movs	r3, r5
 8009330:	f7f8 f8e4 	bl	80014fc <__aeabi_dmul>
 8009334:	2200      	movs	r2, #0
 8009336:	4b99      	ldr	r3, [pc, #612]	; (800959c <_dtoa_r+0x6a0>)
 8009338:	f7f7 f9a2 	bl	8000680 <__aeabi_dadd>
 800933c:	9010      	str	r0, [sp, #64]	; 0x40
 800933e:	9111      	str	r1, [sp, #68]	; 0x44
 8009340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009344:	9208      	str	r2, [sp, #32]
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	4a95      	ldr	r2, [pc, #596]	; (80095a0 <_dtoa_r+0x6a4>)
 800934a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800934c:	4694      	mov	ip, r2
 800934e:	4463      	add	r3, ip
 8009350:	9317      	str	r3, [sp, #92]	; 0x5c
 8009352:	9309      	str	r3, [sp, #36]	; 0x24
 8009354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009356:	2b00      	cmp	r3, #0
 8009358:	d161      	bne.n	800941e <_dtoa_r+0x522>
 800935a:	2200      	movs	r2, #0
 800935c:	0020      	movs	r0, r4
 800935e:	0029      	movs	r1, r5
 8009360:	4b90      	ldr	r3, [pc, #576]	; (80095a4 <_dtoa_r+0x6a8>)
 8009362:	f7f8 fb37 	bl	80019d4 <__aeabi_dsub>
 8009366:	9a08      	ldr	r2, [sp, #32]
 8009368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800936a:	0004      	movs	r4, r0
 800936c:	000d      	movs	r5, r1
 800936e:	f7f7 f887 	bl	8000480 <__aeabi_dcmpgt>
 8009372:	2800      	cmp	r0, #0
 8009374:	d000      	beq.n	8009378 <_dtoa_r+0x47c>
 8009376:	e2af      	b.n	80098d8 <_dtoa_r+0x9dc>
 8009378:	488b      	ldr	r0, [pc, #556]	; (80095a8 <_dtoa_r+0x6ac>)
 800937a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800937c:	4684      	mov	ip, r0
 800937e:	4461      	add	r1, ip
 8009380:	000b      	movs	r3, r1
 8009382:	0020      	movs	r0, r4
 8009384:	0029      	movs	r1, r5
 8009386:	9a08      	ldr	r2, [sp, #32]
 8009388:	f7f7 f866 	bl	8000458 <__aeabi_dcmplt>
 800938c:	2800      	cmp	r0, #0
 800938e:	d000      	beq.n	8009392 <_dtoa_r+0x496>
 8009390:	e29f      	b.n	80098d2 <_dtoa_r+0x9d6>
 8009392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009394:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009396:	9308      	str	r3, [sp, #32]
 8009398:	9409      	str	r4, [sp, #36]	; 0x24
 800939a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800939c:	2b00      	cmp	r3, #0
 800939e:	da00      	bge.n	80093a2 <_dtoa_r+0x4a6>
 80093a0:	e172      	b.n	8009688 <_dtoa_r+0x78c>
 80093a2:	9a02      	ldr	r2, [sp, #8]
 80093a4:	2a0e      	cmp	r2, #14
 80093a6:	dd00      	ble.n	80093aa <_dtoa_r+0x4ae>
 80093a8:	e16e      	b.n	8009688 <_dtoa_r+0x78c>
 80093aa:	4b78      	ldr	r3, [pc, #480]	; (800958c <_dtoa_r+0x690>)
 80093ac:	00d2      	lsls	r2, r2, #3
 80093ae:	189b      	adds	r3, r3, r2
 80093b0:	685c      	ldr	r4, [r3, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	930a      	str	r3, [sp, #40]	; 0x28
 80093b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80093b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	db00      	blt.n	80093c0 <_dtoa_r+0x4c4>
 80093be:	e0f7      	b.n	80095b0 <_dtoa_r+0x6b4>
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dd00      	ble.n	80093c8 <_dtoa_r+0x4cc>
 80093c6:	e0f3      	b.n	80095b0 <_dtoa_r+0x6b4>
 80093c8:	d000      	beq.n	80093cc <_dtoa_r+0x4d0>
 80093ca:	e282      	b.n	80098d2 <_dtoa_r+0x9d6>
 80093cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80093ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093d0:	2200      	movs	r2, #0
 80093d2:	4b74      	ldr	r3, [pc, #464]	; (80095a4 <_dtoa_r+0x6a8>)
 80093d4:	f7f8 f892 	bl	80014fc <__aeabi_dmul>
 80093d8:	9a08      	ldr	r2, [sp, #32]
 80093da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093dc:	f7f7 f85a 	bl	8000494 <__aeabi_dcmpge>
 80093e0:	9e07      	ldr	r6, [sp, #28]
 80093e2:	0035      	movs	r5, r6
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d000      	beq.n	80093ea <_dtoa_r+0x4ee>
 80093e8:	e259      	b.n	800989e <_dtoa_r+0x9a2>
 80093ea:	9b06      	ldr	r3, [sp, #24]
 80093ec:	9a06      	ldr	r2, [sp, #24]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9308      	str	r3, [sp, #32]
 80093f2:	2331      	movs	r3, #49	; 0x31
 80093f4:	7013      	strb	r3, [r2, #0]
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	3301      	adds	r3, #1
 80093fa:	9302      	str	r3, [sp, #8]
 80093fc:	e254      	b.n	80098a8 <_dtoa_r+0x9ac>
 80093fe:	4234      	tst	r4, r6
 8009400:	d007      	beq.n	8009412 <_dtoa_r+0x516>
 8009402:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009404:	3301      	adds	r3, #1
 8009406:	9310      	str	r3, [sp, #64]	; 0x40
 8009408:	682a      	ldr	r2, [r5, #0]
 800940a:	686b      	ldr	r3, [r5, #4]
 800940c:	f7f8 f876 	bl	80014fc <__aeabi_dmul>
 8009410:	0033      	movs	r3, r6
 8009412:	1064      	asrs	r4, r4, #1
 8009414:	3508      	adds	r5, #8
 8009416:	e75a      	b.n	80092ce <_dtoa_r+0x3d2>
 8009418:	9e02      	ldr	r6, [sp, #8]
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	e780      	b.n	8009320 <_dtoa_r+0x424>
 800941e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009420:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009422:	1e5a      	subs	r2, r3, #1
 8009424:	4b59      	ldr	r3, [pc, #356]	; (800958c <_dtoa_r+0x690>)
 8009426:	00d2      	lsls	r2, r2, #3
 8009428:	189b      	adds	r3, r3, r2
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2900      	cmp	r1, #0
 8009430:	d051      	beq.n	80094d6 <_dtoa_r+0x5da>
 8009432:	2000      	movs	r0, #0
 8009434:	495d      	ldr	r1, [pc, #372]	; (80095ac <_dtoa_r+0x6b0>)
 8009436:	f7f7 fc5f 	bl	8000cf8 <__aeabi_ddiv>
 800943a:	9a08      	ldr	r2, [sp, #32]
 800943c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943e:	f7f8 fac9 	bl	80019d4 <__aeabi_dsub>
 8009442:	9a06      	ldr	r2, [sp, #24]
 8009444:	9b06      	ldr	r3, [sp, #24]
 8009446:	4694      	mov	ip, r2
 8009448:	9317      	str	r3, [sp, #92]	; 0x5c
 800944a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800944c:	9010      	str	r0, [sp, #64]	; 0x40
 800944e:	9111      	str	r1, [sp, #68]	; 0x44
 8009450:	4463      	add	r3, ip
 8009452:	9319      	str	r3, [sp, #100]	; 0x64
 8009454:	0029      	movs	r1, r5
 8009456:	0020      	movs	r0, r4
 8009458:	f7f8 fe6c 	bl	8002134 <__aeabi_d2iz>
 800945c:	9014      	str	r0, [sp, #80]	; 0x50
 800945e:	f7f8 fe9f 	bl	80021a0 <__aeabi_i2d>
 8009462:	0002      	movs	r2, r0
 8009464:	000b      	movs	r3, r1
 8009466:	0020      	movs	r0, r4
 8009468:	0029      	movs	r1, r5
 800946a:	f7f8 fab3 	bl	80019d4 <__aeabi_dsub>
 800946e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009470:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009472:	3301      	adds	r3, #1
 8009474:	9308      	str	r3, [sp, #32]
 8009476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009478:	0004      	movs	r4, r0
 800947a:	3330      	adds	r3, #48	; 0x30
 800947c:	7013      	strb	r3, [r2, #0]
 800947e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009482:	000d      	movs	r5, r1
 8009484:	f7f6 ffe8 	bl	8000458 <__aeabi_dcmplt>
 8009488:	2800      	cmp	r0, #0
 800948a:	d175      	bne.n	8009578 <_dtoa_r+0x67c>
 800948c:	0022      	movs	r2, r4
 800948e:	002b      	movs	r3, r5
 8009490:	2000      	movs	r0, #0
 8009492:	4940      	ldr	r1, [pc, #256]	; (8009594 <_dtoa_r+0x698>)
 8009494:	f7f8 fa9e 	bl	80019d4 <__aeabi_dsub>
 8009498:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800949a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800949c:	f7f6 ffdc 	bl	8000458 <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d000      	beq.n	80094a6 <_dtoa_r+0x5aa>
 80094a4:	e0d2      	b.n	800964c <_dtoa_r+0x750>
 80094a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a8:	9a08      	ldr	r2, [sp, #32]
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d100      	bne.n	80094b0 <_dtoa_r+0x5b4>
 80094ae:	e770      	b.n	8009392 <_dtoa_r+0x496>
 80094b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80094b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80094b4:	2200      	movs	r2, #0
 80094b6:	4b38      	ldr	r3, [pc, #224]	; (8009598 <_dtoa_r+0x69c>)
 80094b8:	f7f8 f820 	bl	80014fc <__aeabi_dmul>
 80094bc:	4b36      	ldr	r3, [pc, #216]	; (8009598 <_dtoa_r+0x69c>)
 80094be:	9010      	str	r0, [sp, #64]	; 0x40
 80094c0:	9111      	str	r1, [sp, #68]	; 0x44
 80094c2:	2200      	movs	r2, #0
 80094c4:	0020      	movs	r0, r4
 80094c6:	0029      	movs	r1, r5
 80094c8:	f7f8 f818 	bl	80014fc <__aeabi_dmul>
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	0004      	movs	r4, r0
 80094d0:	000d      	movs	r5, r1
 80094d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80094d4:	e7be      	b.n	8009454 <_dtoa_r+0x558>
 80094d6:	9808      	ldr	r0, [sp, #32]
 80094d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094da:	f7f8 f80f 	bl	80014fc <__aeabi_dmul>
 80094de:	9a06      	ldr	r2, [sp, #24]
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	4694      	mov	ip, r2
 80094e4:	9308      	str	r3, [sp, #32]
 80094e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094e8:	9010      	str	r0, [sp, #64]	; 0x40
 80094ea:	9111      	str	r1, [sp, #68]	; 0x44
 80094ec:	4463      	add	r3, ip
 80094ee:	9319      	str	r3, [sp, #100]	; 0x64
 80094f0:	0029      	movs	r1, r5
 80094f2:	0020      	movs	r0, r4
 80094f4:	f7f8 fe1e 	bl	8002134 <__aeabi_d2iz>
 80094f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80094fa:	f7f8 fe51 	bl	80021a0 <__aeabi_i2d>
 80094fe:	0002      	movs	r2, r0
 8009500:	000b      	movs	r3, r1
 8009502:	0020      	movs	r0, r4
 8009504:	0029      	movs	r1, r5
 8009506:	f7f8 fa65 	bl	80019d4 <__aeabi_dsub>
 800950a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800950c:	9a08      	ldr	r2, [sp, #32]
 800950e:	3330      	adds	r3, #48	; 0x30
 8009510:	7013      	strb	r3, [r2, #0]
 8009512:	0013      	movs	r3, r2
 8009514:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009516:	3301      	adds	r3, #1
 8009518:	0004      	movs	r4, r0
 800951a:	000d      	movs	r5, r1
 800951c:	9308      	str	r3, [sp, #32]
 800951e:	4293      	cmp	r3, r2
 8009520:	d12c      	bne.n	800957c <_dtoa_r+0x680>
 8009522:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009524:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009526:	9a06      	ldr	r2, [sp, #24]
 8009528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800952a:	4694      	mov	ip, r2
 800952c:	4463      	add	r3, ip
 800952e:	2200      	movs	r2, #0
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <_dtoa_r+0x6b0>)
 8009534:	f7f7 f8a4 	bl	8000680 <__aeabi_dadd>
 8009538:	0002      	movs	r2, r0
 800953a:	000b      	movs	r3, r1
 800953c:	0020      	movs	r0, r4
 800953e:	0029      	movs	r1, r5
 8009540:	f7f6 ff9e 	bl	8000480 <__aeabi_dcmpgt>
 8009544:	2800      	cmp	r0, #0
 8009546:	d000      	beq.n	800954a <_dtoa_r+0x64e>
 8009548:	e080      	b.n	800964c <_dtoa_r+0x750>
 800954a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800954c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800954e:	2000      	movs	r0, #0
 8009550:	4916      	ldr	r1, [pc, #88]	; (80095ac <_dtoa_r+0x6b0>)
 8009552:	f7f8 fa3f 	bl	80019d4 <__aeabi_dsub>
 8009556:	0002      	movs	r2, r0
 8009558:	000b      	movs	r3, r1
 800955a:	0020      	movs	r0, r4
 800955c:	0029      	movs	r1, r5
 800955e:	f7f6 ff7b 	bl	8000458 <__aeabi_dcmplt>
 8009562:	2800      	cmp	r0, #0
 8009564:	d100      	bne.n	8009568 <_dtoa_r+0x66c>
 8009566:	e714      	b.n	8009392 <_dtoa_r+0x496>
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	001a      	movs	r2, r3
 800956c:	3a01      	subs	r2, #1
 800956e:	9208      	str	r2, [sp, #32]
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	2a30      	cmp	r2, #48	; 0x30
 8009574:	d0f8      	beq.n	8009568 <_dtoa_r+0x66c>
 8009576:	9308      	str	r3, [sp, #32]
 8009578:	9602      	str	r6, [sp, #8]
 800957a:	e055      	b.n	8009628 <_dtoa_r+0x72c>
 800957c:	2200      	movs	r2, #0
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <_dtoa_r+0x69c>)
 8009580:	f7f7 ffbc 	bl	80014fc <__aeabi_dmul>
 8009584:	0004      	movs	r4, r0
 8009586:	000d      	movs	r5, r1
 8009588:	e7b2      	b.n	80094f0 <_dtoa_r+0x5f4>
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	0800b718 	.word	0x0800b718
 8009590:	0800b6f0 	.word	0x0800b6f0
 8009594:	3ff00000 	.word	0x3ff00000
 8009598:	40240000 	.word	0x40240000
 800959c:	401c0000 	.word	0x401c0000
 80095a0:	fcc00000 	.word	0xfcc00000
 80095a4:	40140000 	.word	0x40140000
 80095a8:	7cc00000 	.word	0x7cc00000
 80095ac:	3fe00000 	.word	0x3fe00000
 80095b0:	9b07      	ldr	r3, [sp, #28]
 80095b2:	9e06      	ldr	r6, [sp, #24]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	199b      	adds	r3, r3, r6
 80095b8:	930c      	str	r3, [sp, #48]	; 0x30
 80095ba:	9c08      	ldr	r4, [sp, #32]
 80095bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c2:	0020      	movs	r0, r4
 80095c4:	0029      	movs	r1, r5
 80095c6:	f7f7 fb97 	bl	8000cf8 <__aeabi_ddiv>
 80095ca:	f7f8 fdb3 	bl	8002134 <__aeabi_d2iz>
 80095ce:	9007      	str	r0, [sp, #28]
 80095d0:	f7f8 fde6 	bl	80021a0 <__aeabi_i2d>
 80095d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d8:	f7f7 ff90 	bl	80014fc <__aeabi_dmul>
 80095dc:	0002      	movs	r2, r0
 80095de:	000b      	movs	r3, r1
 80095e0:	0020      	movs	r0, r4
 80095e2:	0029      	movs	r1, r5
 80095e4:	f7f8 f9f6 	bl	80019d4 <__aeabi_dsub>
 80095e8:	0033      	movs	r3, r6
 80095ea:	9a07      	ldr	r2, [sp, #28]
 80095ec:	3601      	adds	r6, #1
 80095ee:	3230      	adds	r2, #48	; 0x30
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095f4:	9608      	str	r6, [sp, #32]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d139      	bne.n	800966e <_dtoa_r+0x772>
 80095fa:	0002      	movs	r2, r0
 80095fc:	000b      	movs	r3, r1
 80095fe:	f7f7 f83f 	bl	8000680 <__aeabi_dadd>
 8009602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009606:	0004      	movs	r4, r0
 8009608:	000d      	movs	r5, r1
 800960a:	f7f6 ff39 	bl	8000480 <__aeabi_dcmpgt>
 800960e:	2800      	cmp	r0, #0
 8009610:	d11b      	bne.n	800964a <_dtoa_r+0x74e>
 8009612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009616:	0020      	movs	r0, r4
 8009618:	0029      	movs	r1, r5
 800961a:	f7f6 ff17 	bl	800044c <__aeabi_dcmpeq>
 800961e:	2800      	cmp	r0, #0
 8009620:	d002      	beq.n	8009628 <_dtoa_r+0x72c>
 8009622:	9b07      	ldr	r3, [sp, #28]
 8009624:	07db      	lsls	r3, r3, #31
 8009626:	d410      	bmi.n	800964a <_dtoa_r+0x74e>
 8009628:	0038      	movs	r0, r7
 800962a:	9905      	ldr	r1, [sp, #20]
 800962c:	f000 fd1c 	bl	800a068 <_Bfree>
 8009630:	2300      	movs	r3, #0
 8009632:	9a08      	ldr	r2, [sp, #32]
 8009634:	9802      	ldr	r0, [sp, #8]
 8009636:	7013      	strb	r3, [r2, #0]
 8009638:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800963a:	3001      	adds	r0, #1
 800963c:	6018      	str	r0, [r3, #0]
 800963e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009640:	2b00      	cmp	r3, #0
 8009642:	d100      	bne.n	8009646 <_dtoa_r+0x74a>
 8009644:	e4a6      	b.n	8008f94 <_dtoa_r+0x98>
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	e4a4      	b.n	8008f94 <_dtoa_r+0x98>
 800964a:	9e02      	ldr	r6, [sp, #8]
 800964c:	9b08      	ldr	r3, [sp, #32]
 800964e:	9308      	str	r3, [sp, #32]
 8009650:	3b01      	subs	r3, #1
 8009652:	781a      	ldrb	r2, [r3, #0]
 8009654:	2a39      	cmp	r2, #57	; 0x39
 8009656:	d106      	bne.n	8009666 <_dtoa_r+0x76a>
 8009658:	9a06      	ldr	r2, [sp, #24]
 800965a:	429a      	cmp	r2, r3
 800965c:	d1f7      	bne.n	800964e <_dtoa_r+0x752>
 800965e:	2230      	movs	r2, #48	; 0x30
 8009660:	9906      	ldr	r1, [sp, #24]
 8009662:	3601      	adds	r6, #1
 8009664:	700a      	strb	r2, [r1, #0]
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	3201      	adds	r2, #1
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e784      	b.n	8009578 <_dtoa_r+0x67c>
 800966e:	2200      	movs	r2, #0
 8009670:	4baa      	ldr	r3, [pc, #680]	; (800991c <_dtoa_r+0xa20>)
 8009672:	f7f7 ff43 	bl	80014fc <__aeabi_dmul>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	0004      	movs	r4, r0
 800967c:	000d      	movs	r5, r1
 800967e:	f7f6 fee5 	bl	800044c <__aeabi_dcmpeq>
 8009682:	2800      	cmp	r0, #0
 8009684:	d09b      	beq.n	80095be <_dtoa_r+0x6c2>
 8009686:	e7cf      	b.n	8009628 <_dtoa_r+0x72c>
 8009688:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800968a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800968c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800968e:	2d00      	cmp	r5, #0
 8009690:	d012      	beq.n	80096b8 <_dtoa_r+0x7bc>
 8009692:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009694:	2a01      	cmp	r2, #1
 8009696:	dc66      	bgt.n	8009766 <_dtoa_r+0x86a>
 8009698:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800969a:	2a00      	cmp	r2, #0
 800969c:	d05d      	beq.n	800975a <_dtoa_r+0x85e>
 800969e:	4aa0      	ldr	r2, [pc, #640]	; (8009920 <_dtoa_r+0xa24>)
 80096a0:	189b      	adds	r3, r3, r2
 80096a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a4:	2101      	movs	r1, #1
 80096a6:	18d2      	adds	r2, r2, r3
 80096a8:	920a      	str	r2, [sp, #40]	; 0x28
 80096aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ac:	0038      	movs	r0, r7
 80096ae:	18d3      	adds	r3, r2, r3
 80096b0:	930d      	str	r3, [sp, #52]	; 0x34
 80096b2:	f000 fd89 	bl	800a1c8 <__i2b>
 80096b6:	0005      	movs	r5, r0
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	dd0e      	ble.n	80096da <_dtoa_r+0x7de>
 80096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd0b      	ble.n	80096da <_dtoa_r+0x7de>
 80096c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096c4:	0023      	movs	r3, r4
 80096c6:	4294      	cmp	r4, r2
 80096c8:	dd00      	ble.n	80096cc <_dtoa_r+0x7d0>
 80096ca:	0013      	movs	r3, r2
 80096cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ce:	1ae4      	subs	r4, r4, r3
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	920a      	str	r2, [sp, #40]	; 0x28
 80096d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	930d      	str	r3, [sp, #52]	; 0x34
 80096da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01f      	beq.n	8009720 <_dtoa_r+0x824>
 80096e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d054      	beq.n	8009790 <_dtoa_r+0x894>
 80096e6:	2e00      	cmp	r6, #0
 80096e8:	dd11      	ble.n	800970e <_dtoa_r+0x812>
 80096ea:	0029      	movs	r1, r5
 80096ec:	0032      	movs	r2, r6
 80096ee:	0038      	movs	r0, r7
 80096f0:	f000 fe30 	bl	800a354 <__pow5mult>
 80096f4:	9a05      	ldr	r2, [sp, #20]
 80096f6:	0001      	movs	r1, r0
 80096f8:	0005      	movs	r5, r0
 80096fa:	0038      	movs	r0, r7
 80096fc:	f000 fd7a 	bl	800a1f4 <__multiply>
 8009700:	9905      	ldr	r1, [sp, #20]
 8009702:	9014      	str	r0, [sp, #80]	; 0x50
 8009704:	0038      	movs	r0, r7
 8009706:	f000 fcaf 	bl	800a068 <_Bfree>
 800970a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009710:	1b9a      	subs	r2, r3, r6
 8009712:	42b3      	cmp	r3, r6
 8009714:	d004      	beq.n	8009720 <_dtoa_r+0x824>
 8009716:	0038      	movs	r0, r7
 8009718:	9905      	ldr	r1, [sp, #20]
 800971a:	f000 fe1b 	bl	800a354 <__pow5mult>
 800971e:	9005      	str	r0, [sp, #20]
 8009720:	2101      	movs	r1, #1
 8009722:	0038      	movs	r0, r7
 8009724:	f000 fd50 	bl	800a1c8 <__i2b>
 8009728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800972a:	0006      	movs	r6, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	dd31      	ble.n	8009794 <_dtoa_r+0x898>
 8009730:	001a      	movs	r2, r3
 8009732:	0001      	movs	r1, r0
 8009734:	0038      	movs	r0, r7
 8009736:	f000 fe0d 	bl	800a354 <__pow5mult>
 800973a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800973c:	0006      	movs	r6, r0
 800973e:	2b01      	cmp	r3, #1
 8009740:	dd2d      	ble.n	800979e <_dtoa_r+0x8a2>
 8009742:	2300      	movs	r3, #0
 8009744:	930e      	str	r3, [sp, #56]	; 0x38
 8009746:	6933      	ldr	r3, [r6, #16]
 8009748:	3303      	adds	r3, #3
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	18f3      	adds	r3, r6, r3
 800974e:	6858      	ldr	r0, [r3, #4]
 8009750:	f000 fcf2 	bl	800a138 <__hi0bits>
 8009754:	2320      	movs	r3, #32
 8009756:	1a18      	subs	r0, r3, r0
 8009758:	e039      	b.n	80097ce <_dtoa_r+0x8d2>
 800975a:	2336      	movs	r3, #54	; 0x36
 800975c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800975e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	e79d      	b.n	80096a2 <_dtoa_r+0x7a6>
 8009766:	9b07      	ldr	r3, [sp, #28]
 8009768:	1e5e      	subs	r6, r3, #1
 800976a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800976c:	42b3      	cmp	r3, r6
 800976e:	db07      	blt.n	8009780 <_dtoa_r+0x884>
 8009770:	1b9e      	subs	r6, r3, r6
 8009772:	9b07      	ldr	r3, [sp, #28]
 8009774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009776:	2b00      	cmp	r3, #0
 8009778:	da93      	bge.n	80096a2 <_dtoa_r+0x7a6>
 800977a:	1ae4      	subs	r4, r4, r3
 800977c:	2300      	movs	r3, #0
 800977e:	e790      	b.n	80096a2 <_dtoa_r+0x7a6>
 8009780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009782:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009784:	1af3      	subs	r3, r6, r3
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	960e      	str	r6, [sp, #56]	; 0x38
 800978a:	9315      	str	r3, [sp, #84]	; 0x54
 800978c:	2600      	movs	r6, #0
 800978e:	e7f0      	b.n	8009772 <_dtoa_r+0x876>
 8009790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009792:	e7c0      	b.n	8009716 <_dtoa_r+0x81a>
 8009794:	2300      	movs	r3, #0
 8009796:	930e      	str	r3, [sp, #56]	; 0x38
 8009798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800979a:	2b01      	cmp	r3, #1
 800979c:	dc13      	bgt.n	80097c6 <_dtoa_r+0x8ca>
 800979e:	2300      	movs	r3, #0
 80097a0:	930e      	str	r3, [sp, #56]	; 0x38
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d10e      	bne.n	80097c6 <_dtoa_r+0x8ca>
 80097a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097aa:	031b      	lsls	r3, r3, #12
 80097ac:	d10b      	bne.n	80097c6 <_dtoa_r+0x8ca>
 80097ae:	4b5d      	ldr	r3, [pc, #372]	; (8009924 <_dtoa_r+0xa28>)
 80097b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097b2:	4213      	tst	r3, r2
 80097b4:	d007      	beq.n	80097c6 <_dtoa_r+0x8ca>
 80097b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b8:	3301      	adds	r3, #1
 80097ba:	930a      	str	r3, [sp, #40]	; 0x28
 80097bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097be:	3301      	adds	r3, #1
 80097c0:	930d      	str	r3, [sp, #52]	; 0x34
 80097c2:	2301      	movs	r3, #1
 80097c4:	930e      	str	r3, [sp, #56]	; 0x38
 80097c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c8:	2001      	movs	r0, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1bb      	bne.n	8009746 <_dtoa_r+0x84a>
 80097ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d0:	221f      	movs	r2, #31
 80097d2:	1818      	adds	r0, r3, r0
 80097d4:	0003      	movs	r3, r0
 80097d6:	4013      	ands	r3, r2
 80097d8:	4210      	tst	r0, r2
 80097da:	d046      	beq.n	800986a <_dtoa_r+0x96e>
 80097dc:	3201      	adds	r2, #1
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2a04      	cmp	r2, #4
 80097e2:	dd3f      	ble.n	8009864 <_dtoa_r+0x968>
 80097e4:	221c      	movs	r2, #28
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ea:	18e4      	adds	r4, r4, r3
 80097ec:	18d2      	adds	r2, r2, r3
 80097ee:	920a      	str	r2, [sp, #40]	; 0x28
 80097f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097f2:	18d3      	adds	r3, r2, r3
 80097f4:	930d      	str	r3, [sp, #52]	; 0x34
 80097f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dd05      	ble.n	8009808 <_dtoa_r+0x90c>
 80097fc:	001a      	movs	r2, r3
 80097fe:	0038      	movs	r0, r7
 8009800:	9905      	ldr	r1, [sp, #20]
 8009802:	f000 fe03 	bl	800a40c <__lshift>
 8009806:	9005      	str	r0, [sp, #20]
 8009808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd05      	ble.n	800981a <_dtoa_r+0x91e>
 800980e:	0031      	movs	r1, r6
 8009810:	001a      	movs	r2, r3
 8009812:	0038      	movs	r0, r7
 8009814:	f000 fdfa 	bl	800a40c <__lshift>
 8009818:	0006      	movs	r6, r0
 800981a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800981c:	2b00      	cmp	r3, #0
 800981e:	d026      	beq.n	800986e <_dtoa_r+0x972>
 8009820:	0031      	movs	r1, r6
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f000 fe60 	bl	800a4e8 <__mcmp>
 8009828:	2800      	cmp	r0, #0
 800982a:	da20      	bge.n	800986e <_dtoa_r+0x972>
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	220a      	movs	r2, #10
 8009830:	3b01      	subs	r3, #1
 8009832:	9302      	str	r3, [sp, #8]
 8009834:	0038      	movs	r0, r7
 8009836:	2300      	movs	r3, #0
 8009838:	9905      	ldr	r1, [sp, #20]
 800983a:	f000 fc39 	bl	800a0b0 <__multadd>
 800983e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009840:	9005      	str	r0, [sp, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d100      	bne.n	8009848 <_dtoa_r+0x94c>
 8009846:	e166      	b.n	8009b16 <_dtoa_r+0xc1a>
 8009848:	2300      	movs	r3, #0
 800984a:	0029      	movs	r1, r5
 800984c:	220a      	movs	r2, #10
 800984e:	0038      	movs	r0, r7
 8009850:	f000 fc2e 	bl	800a0b0 <__multadd>
 8009854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009856:	0005      	movs	r5, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	dc47      	bgt.n	80098ec <_dtoa_r+0x9f0>
 800985c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985e:	2b02      	cmp	r3, #2
 8009860:	dc0d      	bgt.n	800987e <_dtoa_r+0x982>
 8009862:	e043      	b.n	80098ec <_dtoa_r+0x9f0>
 8009864:	2a04      	cmp	r2, #4
 8009866:	d0c6      	beq.n	80097f6 <_dtoa_r+0x8fa>
 8009868:	0013      	movs	r3, r2
 800986a:	331c      	adds	r3, #28
 800986c:	e7bc      	b.n	80097e8 <_dtoa_r+0x8ec>
 800986e:	9b07      	ldr	r3, [sp, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	dc35      	bgt.n	80098e0 <_dtoa_r+0x9e4>
 8009874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009876:	2b02      	cmp	r3, #2
 8009878:	dd32      	ble.n	80098e0 <_dtoa_r+0x9e4>
 800987a:	9b07      	ldr	r3, [sp, #28]
 800987c:	930c      	str	r3, [sp, #48]	; 0x30
 800987e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10c      	bne.n	800989e <_dtoa_r+0x9a2>
 8009884:	0031      	movs	r1, r6
 8009886:	2205      	movs	r2, #5
 8009888:	0038      	movs	r0, r7
 800988a:	f000 fc11 	bl	800a0b0 <__multadd>
 800988e:	0006      	movs	r6, r0
 8009890:	0001      	movs	r1, r0
 8009892:	9805      	ldr	r0, [sp, #20]
 8009894:	f000 fe28 	bl	800a4e8 <__mcmp>
 8009898:	2800      	cmp	r0, #0
 800989a:	dd00      	ble.n	800989e <_dtoa_r+0x9a2>
 800989c:	e5a5      	b.n	80093ea <_dtoa_r+0x4ee>
 800989e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098a0:	43db      	mvns	r3, r3
 80098a2:	9302      	str	r3, [sp, #8]
 80098a4:	9b06      	ldr	r3, [sp, #24]
 80098a6:	9308      	str	r3, [sp, #32]
 80098a8:	2400      	movs	r4, #0
 80098aa:	0031      	movs	r1, r6
 80098ac:	0038      	movs	r0, r7
 80098ae:	f000 fbdb 	bl	800a068 <_Bfree>
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	d100      	bne.n	80098b8 <_dtoa_r+0x9bc>
 80098b6:	e6b7      	b.n	8009628 <_dtoa_r+0x72c>
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	d005      	beq.n	80098c8 <_dtoa_r+0x9cc>
 80098bc:	42ac      	cmp	r4, r5
 80098be:	d003      	beq.n	80098c8 <_dtoa_r+0x9cc>
 80098c0:	0021      	movs	r1, r4
 80098c2:	0038      	movs	r0, r7
 80098c4:	f000 fbd0 	bl	800a068 <_Bfree>
 80098c8:	0029      	movs	r1, r5
 80098ca:	0038      	movs	r0, r7
 80098cc:	f000 fbcc 	bl	800a068 <_Bfree>
 80098d0:	e6aa      	b.n	8009628 <_dtoa_r+0x72c>
 80098d2:	2600      	movs	r6, #0
 80098d4:	0035      	movs	r5, r6
 80098d6:	e7e2      	b.n	800989e <_dtoa_r+0x9a2>
 80098d8:	9602      	str	r6, [sp, #8]
 80098da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80098dc:	0035      	movs	r5, r6
 80098de:	e584      	b.n	80093ea <_dtoa_r+0x4ee>
 80098e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d100      	bne.n	80098e8 <_dtoa_r+0x9ec>
 80098e6:	e0ce      	b.n	8009a86 <_dtoa_r+0xb8a>
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	930c      	str	r3, [sp, #48]	; 0x30
 80098ec:	2c00      	cmp	r4, #0
 80098ee:	dd05      	ble.n	80098fc <_dtoa_r+0xa00>
 80098f0:	0029      	movs	r1, r5
 80098f2:	0022      	movs	r2, r4
 80098f4:	0038      	movs	r0, r7
 80098f6:	f000 fd89 	bl	800a40c <__lshift>
 80098fa:	0005      	movs	r5, r0
 80098fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098fe:	0028      	movs	r0, r5
 8009900:	2b00      	cmp	r3, #0
 8009902:	d022      	beq.n	800994a <_dtoa_r+0xa4e>
 8009904:	0038      	movs	r0, r7
 8009906:	6869      	ldr	r1, [r5, #4]
 8009908:	f000 fb6a 	bl	8009fe0 <_Balloc>
 800990c:	1e04      	subs	r4, r0, #0
 800990e:	d10f      	bne.n	8009930 <_dtoa_r+0xa34>
 8009910:	0002      	movs	r2, r0
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <_dtoa_r+0xa2c>)
 8009914:	4905      	ldr	r1, [pc, #20]	; (800992c <_dtoa_r+0xa30>)
 8009916:	f7ff fb06 	bl	8008f26 <_dtoa_r+0x2a>
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	40240000 	.word	0x40240000
 8009920:	00000433 	.word	0x00000433
 8009924:	7ff00000 	.word	0x7ff00000
 8009928:	0800b61f 	.word	0x0800b61f
 800992c:	000002ea 	.word	0x000002ea
 8009930:	0029      	movs	r1, r5
 8009932:	692b      	ldr	r3, [r5, #16]
 8009934:	310c      	adds	r1, #12
 8009936:	1c9a      	adds	r2, r3, #2
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	300c      	adds	r0, #12
 800993c:	f7fe fba6 	bl	800808c <memcpy>
 8009940:	2201      	movs	r2, #1
 8009942:	0021      	movs	r1, r4
 8009944:	0038      	movs	r0, r7
 8009946:	f000 fd61 	bl	800a40c <__lshift>
 800994a:	9b06      	ldr	r3, [sp, #24]
 800994c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800994e:	930a      	str	r3, [sp, #40]	; 0x28
 8009950:	3b01      	subs	r3, #1
 8009952:	189b      	adds	r3, r3, r2
 8009954:	2201      	movs	r2, #1
 8009956:	002c      	movs	r4, r5
 8009958:	0005      	movs	r5, r0
 800995a:	9314      	str	r3, [sp, #80]	; 0x50
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	4013      	ands	r3, r2
 8009960:	930f      	str	r3, [sp, #60]	; 0x3c
 8009962:	0031      	movs	r1, r6
 8009964:	9805      	ldr	r0, [sp, #20]
 8009966:	f7ff fa3d 	bl	8008de4 <quorem>
 800996a:	0003      	movs	r3, r0
 800996c:	0021      	movs	r1, r4
 800996e:	3330      	adds	r3, #48	; 0x30
 8009970:	900d      	str	r0, [sp, #52]	; 0x34
 8009972:	9805      	ldr	r0, [sp, #20]
 8009974:	9307      	str	r3, [sp, #28]
 8009976:	f000 fdb7 	bl	800a4e8 <__mcmp>
 800997a:	002a      	movs	r2, r5
 800997c:	900e      	str	r0, [sp, #56]	; 0x38
 800997e:	0031      	movs	r1, r6
 8009980:	0038      	movs	r0, r7
 8009982:	f000 fdcd 	bl	800a520 <__mdiff>
 8009986:	68c3      	ldr	r3, [r0, #12]
 8009988:	9008      	str	r0, [sp, #32]
 800998a:	9310      	str	r3, [sp, #64]	; 0x40
 800998c:	2301      	movs	r3, #1
 800998e:	930c      	str	r3, [sp, #48]	; 0x30
 8009990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <_dtoa_r+0xaa4>
 8009996:	0001      	movs	r1, r0
 8009998:	9805      	ldr	r0, [sp, #20]
 800999a:	f000 fda5 	bl	800a4e8 <__mcmp>
 800999e:	900c      	str	r0, [sp, #48]	; 0x30
 80099a0:	0038      	movs	r0, r7
 80099a2:	9908      	ldr	r1, [sp, #32]
 80099a4:	f000 fb60 	bl	800a068 <_Bfree>
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099ac:	3301      	adds	r3, #1
 80099ae:	9308      	str	r3, [sp, #32]
 80099b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099b2:	4313      	orrs	r3, r2
 80099b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099b6:	4313      	orrs	r3, r2
 80099b8:	d10c      	bne.n	80099d4 <_dtoa_r+0xad8>
 80099ba:	9b07      	ldr	r3, [sp, #28]
 80099bc:	2b39      	cmp	r3, #57	; 0x39
 80099be:	d026      	beq.n	8009a0e <_dtoa_r+0xb12>
 80099c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd02      	ble.n	80099cc <_dtoa_r+0xad0>
 80099c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c8:	3331      	adds	r3, #49	; 0x31
 80099ca:	9307      	str	r3, [sp, #28]
 80099cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ce:	9a07      	ldr	r2, [sp, #28]
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	e76a      	b.n	80098aa <_dtoa_r+0x9ae>
 80099d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	db04      	blt.n	80099e4 <_dtoa_r+0xae8>
 80099da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099dc:	4313      	orrs	r3, r2
 80099de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099e0:	4313      	orrs	r3, r2
 80099e2:	d11f      	bne.n	8009a24 <_dtoa_r+0xb28>
 80099e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	ddf0      	ble.n	80099cc <_dtoa_r+0xad0>
 80099ea:	9905      	ldr	r1, [sp, #20]
 80099ec:	2201      	movs	r2, #1
 80099ee:	0038      	movs	r0, r7
 80099f0:	f000 fd0c 	bl	800a40c <__lshift>
 80099f4:	0031      	movs	r1, r6
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	f000 fd76 	bl	800a4e8 <__mcmp>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	dc03      	bgt.n	8009a08 <_dtoa_r+0xb0c>
 8009a00:	d1e4      	bne.n	80099cc <_dtoa_r+0xad0>
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	07db      	lsls	r3, r3, #31
 8009a06:	d5e1      	bpl.n	80099cc <_dtoa_r+0xad0>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	2b39      	cmp	r3, #57	; 0x39
 8009a0c:	d1db      	bne.n	80099c6 <_dtoa_r+0xaca>
 8009a0e:	2339      	movs	r3, #57	; 0x39
 8009a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a12:	7013      	strb	r3, [r2, #0]
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	9308      	str	r3, [sp, #32]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	2a39      	cmp	r2, #57	; 0x39
 8009a1e:	d068      	beq.n	8009af2 <_dtoa_r+0xbf6>
 8009a20:	3201      	adds	r2, #1
 8009a22:	e7d5      	b.n	80099d0 <_dtoa_r+0xad4>
 8009a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	dd07      	ble.n	8009a3a <_dtoa_r+0xb3e>
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	2b39      	cmp	r3, #57	; 0x39
 8009a2e:	d0ee      	beq.n	8009a0e <_dtoa_r+0xb12>
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a34:	3301      	adds	r3, #1
 8009a36:	7013      	strb	r3, [r2, #0]
 8009a38:	e737      	b.n	80098aa <_dtoa_r+0x9ae>
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3c:	9a07      	ldr	r2, [sp, #28]
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d03e      	beq.n	8009ac6 <_dtoa_r+0xbca>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	9905      	ldr	r1, [sp, #20]
 8009a4e:	0038      	movs	r0, r7
 8009a50:	f000 fb2e 	bl	800a0b0 <__multadd>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9005      	str	r0, [sp, #20]
 8009a58:	220a      	movs	r2, #10
 8009a5a:	0021      	movs	r1, r4
 8009a5c:	0038      	movs	r0, r7
 8009a5e:	42ac      	cmp	r4, r5
 8009a60:	d106      	bne.n	8009a70 <_dtoa_r+0xb74>
 8009a62:	f000 fb25 	bl	800a0b0 <__multadd>
 8009a66:	0004      	movs	r4, r0
 8009a68:	0005      	movs	r5, r0
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a6e:	e778      	b.n	8009962 <_dtoa_r+0xa66>
 8009a70:	f000 fb1e 	bl	800a0b0 <__multadd>
 8009a74:	0029      	movs	r1, r5
 8009a76:	0004      	movs	r4, r0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	220a      	movs	r2, #10
 8009a7c:	0038      	movs	r0, r7
 8009a7e:	f000 fb17 	bl	800a0b0 <__multadd>
 8009a82:	0005      	movs	r5, r0
 8009a84:	e7f1      	b.n	8009a6a <_dtoa_r+0xb6e>
 8009a86:	9b07      	ldr	r3, [sp, #28]
 8009a88:	930c      	str	r3, [sp, #48]	; 0x30
 8009a8a:	2400      	movs	r4, #0
 8009a8c:	0031      	movs	r1, r6
 8009a8e:	9805      	ldr	r0, [sp, #20]
 8009a90:	f7ff f9a8 	bl	8008de4 <quorem>
 8009a94:	9b06      	ldr	r3, [sp, #24]
 8009a96:	3030      	adds	r0, #48	; 0x30
 8009a98:	5518      	strb	r0, [r3, r4]
 8009a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	9007      	str	r0, [sp, #28]
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	dd07      	ble.n	8009ab4 <_dtoa_r+0xbb8>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	0038      	movs	r0, r7
 8009aaa:	9905      	ldr	r1, [sp, #20]
 8009aac:	f000 fb00 	bl	800a0b0 <__multadd>
 8009ab0:	9005      	str	r0, [sp, #20]
 8009ab2:	e7eb      	b.n	8009a8c <_dtoa_r+0xb90>
 8009ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ab6:	2001      	movs	r0, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd00      	ble.n	8009abe <_dtoa_r+0xbc2>
 8009abc:	0018      	movs	r0, r3
 8009abe:	2400      	movs	r4, #0
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	181b      	adds	r3, r3, r0
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	9905      	ldr	r1, [sp, #20]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	0038      	movs	r0, r7
 8009acc:	f000 fc9e 	bl	800a40c <__lshift>
 8009ad0:	0031      	movs	r1, r6
 8009ad2:	9005      	str	r0, [sp, #20]
 8009ad4:	f000 fd08 	bl	800a4e8 <__mcmp>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dc9b      	bgt.n	8009a14 <_dtoa_r+0xb18>
 8009adc:	d102      	bne.n	8009ae4 <_dtoa_r+0xbe8>
 8009ade:	9b07      	ldr	r3, [sp, #28]
 8009ae0:	07db      	lsls	r3, r3, #31
 8009ae2:	d497      	bmi.n	8009a14 <_dtoa_r+0xb18>
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	9308      	str	r3, [sp, #32]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	781a      	ldrb	r2, [r3, #0]
 8009aec:	2a30      	cmp	r2, #48	; 0x30
 8009aee:	d0fa      	beq.n	8009ae6 <_dtoa_r+0xbea>
 8009af0:	e6db      	b.n	80098aa <_dtoa_r+0x9ae>
 8009af2:	9a06      	ldr	r2, [sp, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d18e      	bne.n	8009a16 <_dtoa_r+0xb1a>
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	3301      	adds	r3, #1
 8009afc:	9302      	str	r3, [sp, #8]
 8009afe:	2331      	movs	r3, #49	; 0x31
 8009b00:	e799      	b.n	8009a36 <_dtoa_r+0xb3a>
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <_dtoa_r+0xc2c>)
 8009b04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b06:	9306      	str	r3, [sp, #24]
 8009b08:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <_dtoa_r+0xc30>)
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	d001      	beq.n	8009b12 <_dtoa_r+0xc16>
 8009b0e:	f7ff fa3f 	bl	8008f90 <_dtoa_r+0x94>
 8009b12:	f7ff fa3f 	bl	8008f94 <_dtoa_r+0x98>
 8009b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dcb6      	bgt.n	8009a8a <_dtoa_r+0xb8e>
 8009b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	dd00      	ble.n	8009b24 <_dtoa_r+0xc28>
 8009b22:	e6ac      	b.n	800987e <_dtoa_r+0x982>
 8009b24:	e7b1      	b.n	8009a8a <_dtoa_r+0xb8e>
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	0800b5a0 	.word	0x0800b5a0
 8009b2c:	0800b5a8 	.word	0x0800b5a8

08009b30 <__sflush_r>:
 8009b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b32:	898b      	ldrh	r3, [r1, #12]
 8009b34:	0005      	movs	r5, r0
 8009b36:	000c      	movs	r4, r1
 8009b38:	071a      	lsls	r2, r3, #28
 8009b3a:	d45f      	bmi.n	8009bfc <__sflush_r+0xcc>
 8009b3c:	684a      	ldr	r2, [r1, #4]
 8009b3e:	2a00      	cmp	r2, #0
 8009b40:	dc04      	bgt.n	8009b4c <__sflush_r+0x1c>
 8009b42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	dc01      	bgt.n	8009b4c <__sflush_r+0x1c>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009b4e:	2f00      	cmp	r7, #0
 8009b50:	d0fa      	beq.n	8009b48 <__sflush_r+0x18>
 8009b52:	2200      	movs	r2, #0
 8009b54:	2180      	movs	r1, #128	; 0x80
 8009b56:	682e      	ldr	r6, [r5, #0]
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	0149      	lsls	r1, r1, #5
 8009b5e:	400a      	ands	r2, r1
 8009b60:	420b      	tst	r3, r1
 8009b62:	d034      	beq.n	8009bce <__sflush_r+0x9e>
 8009b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	075b      	lsls	r3, r3, #29
 8009b6a:	d506      	bpl.n	8009b7a <__sflush_r+0x4a>
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	1ac0      	subs	r0, r0, r3
 8009b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <__sflush_r+0x4a>
 8009b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b78:	1ac0      	subs	r0, r0, r3
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	6a21      	ldr	r1, [r4, #32]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	0028      	movs	r0, r5
 8009b82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009b84:	47b8      	blx	r7
 8009b86:	89a1      	ldrh	r1, [r4, #12]
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d106      	bne.n	8009b9a <__sflush_r+0x6a>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	2b1d      	cmp	r3, #29
 8009b90:	d831      	bhi.n	8009bf6 <__sflush_r+0xc6>
 8009b92:	4a2c      	ldr	r2, [pc, #176]	; (8009c44 <__sflush_r+0x114>)
 8009b94:	40da      	lsrs	r2, r3
 8009b96:	07d3      	lsls	r3, r2, #31
 8009b98:	d52d      	bpl.n	8009bf6 <__sflush_r+0xc6>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	04cb      	lsls	r3, r1, #19
 8009ba4:	d505      	bpl.n	8009bb2 <__sflush_r+0x82>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d102      	bne.n	8009bb0 <__sflush_r+0x80>
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d100      	bne.n	8009bb2 <__sflush_r+0x82>
 8009bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8009bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bb4:	602e      	str	r6, [r5, #0]
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	d0c6      	beq.n	8009b48 <__sflush_r+0x18>
 8009bba:	0023      	movs	r3, r4
 8009bbc:	3344      	adds	r3, #68	; 0x44
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	d002      	beq.n	8009bc8 <__sflush_r+0x98>
 8009bc2:	0028      	movs	r0, r5
 8009bc4:	f000 fdd4 	bl	800a770 <_free_r>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	6360      	str	r0, [r4, #52]	; 0x34
 8009bcc:	e7bd      	b.n	8009b4a <__sflush_r+0x1a>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	0028      	movs	r0, r5
 8009bd2:	6a21      	ldr	r1, [r4, #32]
 8009bd4:	47b8      	blx	r7
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d1c5      	bne.n	8009b66 <__sflush_r+0x36>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0c2      	beq.n	8009b66 <__sflush_r+0x36>
 8009be0:	2b1d      	cmp	r3, #29
 8009be2:	d001      	beq.n	8009be8 <__sflush_r+0xb8>
 8009be4:	2b16      	cmp	r3, #22
 8009be6:	d101      	bne.n	8009bec <__sflush_r+0xbc>
 8009be8:	602e      	str	r6, [r5, #0]
 8009bea:	e7ad      	b.n	8009b48 <__sflush_r+0x18>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	89a2      	ldrh	r2, [r4, #12]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	e7a9      	b.n	8009b4a <__sflush_r+0x1a>
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	e7fa      	b.n	8009bf2 <__sflush_r+0xc2>
 8009bfc:	690f      	ldr	r7, [r1, #16]
 8009bfe:	2f00      	cmp	r7, #0
 8009c00:	d0a2      	beq.n	8009b48 <__sflush_r+0x18>
 8009c02:	680a      	ldr	r2, [r1, #0]
 8009c04:	600f      	str	r7, [r1, #0]
 8009c06:	1bd2      	subs	r2, r2, r7
 8009c08:	9201      	str	r2, [sp, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	079b      	lsls	r3, r3, #30
 8009c0e:	d100      	bne.n	8009c12 <__sflush_r+0xe2>
 8009c10:	694a      	ldr	r2, [r1, #20]
 8009c12:	60a2      	str	r2, [r4, #8]
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dc00      	bgt.n	8009c1c <__sflush_r+0xec>
 8009c1a:	e795      	b.n	8009b48 <__sflush_r+0x18>
 8009c1c:	003a      	movs	r2, r7
 8009c1e:	0028      	movs	r0, r5
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	6a21      	ldr	r1, [r4, #32]
 8009c24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c26:	47b0      	blx	r6
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	dc06      	bgt.n	8009c3a <__sflush_r+0x10a>
 8009c2c:	2340      	movs	r3, #64	; 0x40
 8009c2e:	2001      	movs	r0, #1
 8009c30:	89a2      	ldrh	r2, [r4, #12]
 8009c32:	4240      	negs	r0, r0
 8009c34:	4313      	orrs	r3, r2
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	e787      	b.n	8009b4a <__sflush_r+0x1a>
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	183f      	adds	r7, r7, r0
 8009c3e:	1a1b      	subs	r3, r3, r0
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	e7e7      	b.n	8009c14 <__sflush_r+0xe4>
 8009c44:	20400001 	.word	0x20400001

08009c48 <_fflush_r>:
 8009c48:	690b      	ldr	r3, [r1, #16]
 8009c4a:	b570      	push	{r4, r5, r6, lr}
 8009c4c:	0005      	movs	r5, r0
 8009c4e:	000c      	movs	r4, r1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <_fflush_r+0x12>
 8009c54:	2500      	movs	r5, #0
 8009c56:	0028      	movs	r0, r5
 8009c58:	bd70      	pop	{r4, r5, r6, pc}
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d004      	beq.n	8009c68 <_fflush_r+0x20>
 8009c5e:	6983      	ldr	r3, [r0, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <_fflush_r+0x20>
 8009c64:	f000 f892 	bl	8009d8c <__sinit>
 8009c68:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <_fflush_r+0x74>)
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d11b      	bne.n	8009ca6 <_fflush_r+0x5e>
 8009c6e:	686c      	ldr	r4, [r5, #4]
 8009c70:	220c      	movs	r2, #12
 8009c72:	5ea3      	ldrsh	r3, [r4, r2]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0ed      	beq.n	8009c54 <_fflush_r+0xc>
 8009c78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c7a:	07d2      	lsls	r2, r2, #31
 8009c7c:	d404      	bmi.n	8009c88 <_fflush_r+0x40>
 8009c7e:	059b      	lsls	r3, r3, #22
 8009c80:	d402      	bmi.n	8009c88 <_fflush_r+0x40>
 8009c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c84:	f000 f927 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 8009c88:	0028      	movs	r0, r5
 8009c8a:	0021      	movs	r1, r4
 8009c8c:	f7ff ff50 	bl	8009b30 <__sflush_r>
 8009c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c92:	0005      	movs	r5, r0
 8009c94:	07db      	lsls	r3, r3, #31
 8009c96:	d4de      	bmi.n	8009c56 <_fflush_r+0xe>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	059b      	lsls	r3, r3, #22
 8009c9c:	d4db      	bmi.n	8009c56 <_fflush_r+0xe>
 8009c9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca0:	f000 f91a 	bl	8009ed8 <__retarget_lock_release_recursive>
 8009ca4:	e7d7      	b.n	8009c56 <_fflush_r+0xe>
 8009ca6:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <_fflush_r+0x78>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	d101      	bne.n	8009cb0 <_fflush_r+0x68>
 8009cac:	68ac      	ldr	r4, [r5, #8]
 8009cae:	e7df      	b.n	8009c70 <_fflush_r+0x28>
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <_fflush_r+0x7c>)
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	d1dc      	bne.n	8009c70 <_fflush_r+0x28>
 8009cb6:	68ec      	ldr	r4, [r5, #12]
 8009cb8:	e7da      	b.n	8009c70 <_fflush_r+0x28>
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	0800b650 	.word	0x0800b650
 8009cc0:	0800b670 	.word	0x0800b670
 8009cc4:	0800b630 	.word	0x0800b630

08009cc8 <std>:
 8009cc8:	2300      	movs	r3, #0
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	0004      	movs	r4, r0
 8009cce:	6003      	str	r3, [r0, #0]
 8009cd0:	6043      	str	r3, [r0, #4]
 8009cd2:	6083      	str	r3, [r0, #8]
 8009cd4:	8181      	strh	r1, [r0, #12]
 8009cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009cd8:	0019      	movs	r1, r3
 8009cda:	81c2      	strh	r2, [r0, #14]
 8009cdc:	6103      	str	r3, [r0, #16]
 8009cde:	6143      	str	r3, [r0, #20]
 8009ce0:	6183      	str	r3, [r0, #24]
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	305c      	adds	r0, #92	; 0x5c
 8009ce6:	f7fe f9da 	bl	800809e <memset>
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <std+0x38>)
 8009cec:	6224      	str	r4, [r4, #32]
 8009cee:	6263      	str	r3, [r4, #36]	; 0x24
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <std+0x3c>)
 8009cf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <std+0x40>)
 8009cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cf8:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <std+0x44>)
 8009cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	0800ac1d 	.word	0x0800ac1d
 8009d04:	0800ac45 	.word	0x0800ac45
 8009d08:	0800ac7d 	.word	0x0800ac7d
 8009d0c:	0800aca9 	.word	0x0800aca9

08009d10 <_cleanup_r>:
 8009d10:	b510      	push	{r4, lr}
 8009d12:	4902      	ldr	r1, [pc, #8]	; (8009d1c <_cleanup_r+0xc>)
 8009d14:	f000 f8ba 	bl	8009e8c <_fwalk_reent>
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	08009c49 	.word	0x08009c49

08009d20 <__sfmoreglue>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	2568      	movs	r5, #104	; 0x68
 8009d24:	1e4a      	subs	r2, r1, #1
 8009d26:	4355      	muls	r5, r2
 8009d28:	000e      	movs	r6, r1
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	3174      	adds	r1, #116	; 0x74
 8009d2e:	f000 fd8b 	bl	800a848 <_malloc_r>
 8009d32:	1e04      	subs	r4, r0, #0
 8009d34:	d008      	beq.n	8009d48 <__sfmoreglue+0x28>
 8009d36:	2100      	movs	r1, #0
 8009d38:	002a      	movs	r2, r5
 8009d3a:	6001      	str	r1, [r0, #0]
 8009d3c:	6046      	str	r6, [r0, #4]
 8009d3e:	300c      	adds	r0, #12
 8009d40:	60a0      	str	r0, [r4, #8]
 8009d42:	3268      	adds	r2, #104	; 0x68
 8009d44:	f7fe f9ab 	bl	800809e <memset>
 8009d48:	0020      	movs	r0, r4
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}

08009d4c <__sfp_lock_acquire>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4802      	ldr	r0, [pc, #8]	; (8009d58 <__sfp_lock_acquire+0xc>)
 8009d50:	f000 f8c1 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	20000e65 	.word	0x20000e65

08009d5c <__sfp_lock_release>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4802      	ldr	r0, [pc, #8]	; (8009d68 <__sfp_lock_release+0xc>)
 8009d60:	f000 f8ba 	bl	8009ed8 <__retarget_lock_release_recursive>
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	20000e65 	.word	0x20000e65

08009d6c <__sinit_lock_acquire>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4802      	ldr	r0, [pc, #8]	; (8009d78 <__sinit_lock_acquire+0xc>)
 8009d70:	f000 f8b1 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	20000e66 	.word	0x20000e66

08009d7c <__sinit_lock_release>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	4802      	ldr	r0, [pc, #8]	; (8009d88 <__sinit_lock_release+0xc>)
 8009d80:	f000 f8aa 	bl	8009ed8 <__retarget_lock_release_recursive>
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	20000e66 	.word	0x20000e66

08009d8c <__sinit>:
 8009d8c:	b513      	push	{r0, r1, r4, lr}
 8009d8e:	0004      	movs	r4, r0
 8009d90:	f7ff ffec 	bl	8009d6c <__sinit_lock_acquire>
 8009d94:	69a3      	ldr	r3, [r4, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <__sinit+0x14>
 8009d9a:	f7ff ffef 	bl	8009d7c <__sinit_lock_release>
 8009d9e:	bd13      	pop	{r0, r1, r4, pc}
 8009da0:	64a3      	str	r3, [r4, #72]	; 0x48
 8009da2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009da4:	6523      	str	r3, [r4, #80]	; 0x50
 8009da6:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <__sinit+0x68>)
 8009da8:	4a13      	ldr	r2, [pc, #76]	; (8009df8 <__sinit+0x6c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	d101      	bne.n	8009db8 <__sinit+0x2c>
 8009db4:	2301      	movs	r3, #1
 8009db6:	61a3      	str	r3, [r4, #24]
 8009db8:	0020      	movs	r0, r4
 8009dba:	f000 f81f 	bl	8009dfc <__sfp>
 8009dbe:	6060      	str	r0, [r4, #4]
 8009dc0:	0020      	movs	r0, r4
 8009dc2:	f000 f81b 	bl	8009dfc <__sfp>
 8009dc6:	60a0      	str	r0, [r4, #8]
 8009dc8:	0020      	movs	r0, r4
 8009dca:	f000 f817 	bl	8009dfc <__sfp>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2104      	movs	r1, #4
 8009dd2:	60e0      	str	r0, [r4, #12]
 8009dd4:	6860      	ldr	r0, [r4, #4]
 8009dd6:	f7ff ff77 	bl	8009cc8 <std>
 8009dda:	2201      	movs	r2, #1
 8009ddc:	2109      	movs	r1, #9
 8009dde:	68a0      	ldr	r0, [r4, #8]
 8009de0:	f7ff ff72 	bl	8009cc8 <std>
 8009de4:	2202      	movs	r2, #2
 8009de6:	2112      	movs	r1, #18
 8009de8:	68e0      	ldr	r0, [r4, #12]
 8009dea:	f7ff ff6d 	bl	8009cc8 <std>
 8009dee:	2301      	movs	r3, #1
 8009df0:	61a3      	str	r3, [r4, #24]
 8009df2:	e7d2      	b.n	8009d9a <__sinit+0xe>
 8009df4:	0800b568 	.word	0x0800b568
 8009df8:	08009d11 	.word	0x08009d11

08009dfc <__sfp>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	0007      	movs	r7, r0
 8009e00:	f7ff ffa4 	bl	8009d4c <__sfp_lock_acquire>
 8009e04:	4b1f      	ldr	r3, [pc, #124]	; (8009e84 <__sfp+0x88>)
 8009e06:	681e      	ldr	r6, [r3, #0]
 8009e08:	69b3      	ldr	r3, [r6, #24]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <__sfp+0x18>
 8009e0e:	0030      	movs	r0, r6
 8009e10:	f7ff ffbc 	bl	8009d8c <__sinit>
 8009e14:	3648      	adds	r6, #72	; 0x48
 8009e16:	68b4      	ldr	r4, [r6, #8]
 8009e18:	6873      	ldr	r3, [r6, #4]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	d504      	bpl.n	8009e28 <__sfp+0x2c>
 8009e1e:	6833      	ldr	r3, [r6, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d022      	beq.n	8009e6a <__sfp+0x6e>
 8009e24:	6836      	ldr	r6, [r6, #0]
 8009e26:	e7f6      	b.n	8009e16 <__sfp+0x1a>
 8009e28:	220c      	movs	r2, #12
 8009e2a:	5ea5      	ldrsh	r5, [r4, r2]
 8009e2c:	2d00      	cmp	r5, #0
 8009e2e:	d11a      	bne.n	8009e66 <__sfp+0x6a>
 8009e30:	0020      	movs	r0, r4
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <__sfp+0x8c>)
 8009e34:	3058      	adds	r0, #88	; 0x58
 8009e36:	60e3      	str	r3, [r4, #12]
 8009e38:	6665      	str	r5, [r4, #100]	; 0x64
 8009e3a:	f000 f84b 	bl	8009ed4 <__retarget_lock_init_recursive>
 8009e3e:	f7ff ff8d 	bl	8009d5c <__sfp_lock_release>
 8009e42:	0020      	movs	r0, r4
 8009e44:	2208      	movs	r2, #8
 8009e46:	0029      	movs	r1, r5
 8009e48:	6025      	str	r5, [r4, #0]
 8009e4a:	60a5      	str	r5, [r4, #8]
 8009e4c:	6065      	str	r5, [r4, #4]
 8009e4e:	6125      	str	r5, [r4, #16]
 8009e50:	6165      	str	r5, [r4, #20]
 8009e52:	61a5      	str	r5, [r4, #24]
 8009e54:	305c      	adds	r0, #92	; 0x5c
 8009e56:	f7fe f922 	bl	800809e <memset>
 8009e5a:	6365      	str	r5, [r4, #52]	; 0x34
 8009e5c:	63a5      	str	r5, [r4, #56]	; 0x38
 8009e5e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009e60:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009e62:	0020      	movs	r0, r4
 8009e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e66:	3468      	adds	r4, #104	; 0x68
 8009e68:	e7d7      	b.n	8009e1a <__sfp+0x1e>
 8009e6a:	2104      	movs	r1, #4
 8009e6c:	0038      	movs	r0, r7
 8009e6e:	f7ff ff57 	bl	8009d20 <__sfmoreglue>
 8009e72:	1e04      	subs	r4, r0, #0
 8009e74:	6030      	str	r0, [r6, #0]
 8009e76:	d1d5      	bne.n	8009e24 <__sfp+0x28>
 8009e78:	f7ff ff70 	bl	8009d5c <__sfp_lock_release>
 8009e7c:	230c      	movs	r3, #12
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	e7ef      	b.n	8009e62 <__sfp+0x66>
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	0800b568 	.word	0x0800b568
 8009e88:	ffff0001 	.word	0xffff0001

08009e8c <_fwalk_reent>:
 8009e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e8e:	0004      	movs	r4, r0
 8009e90:	0006      	movs	r6, r0
 8009e92:	2700      	movs	r7, #0
 8009e94:	9101      	str	r1, [sp, #4]
 8009e96:	3448      	adds	r4, #72	; 0x48
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	68a5      	ldr	r5, [r4, #8]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	d504      	bpl.n	8009eb0 <_fwalk_reent+0x24>
 8009ea6:	6824      	ldr	r4, [r4, #0]
 8009ea8:	2c00      	cmp	r4, #0
 8009eaa:	d1f5      	bne.n	8009e98 <_fwalk_reent+0xc>
 8009eac:	0038      	movs	r0, r7
 8009eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eb0:	89ab      	ldrh	r3, [r5, #12]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d908      	bls.n	8009ec8 <_fwalk_reent+0x3c>
 8009eb6:	220e      	movs	r2, #14
 8009eb8:	5eab      	ldrsh	r3, [r5, r2]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	d004      	beq.n	8009ec8 <_fwalk_reent+0x3c>
 8009ebe:	0029      	movs	r1, r5
 8009ec0:	0030      	movs	r0, r6
 8009ec2:	9b01      	ldr	r3, [sp, #4]
 8009ec4:	4798      	blx	r3
 8009ec6:	4307      	orrs	r7, r0
 8009ec8:	3568      	adds	r5, #104	; 0x68
 8009eca:	e7e8      	b.n	8009e9e <_fwalk_reent+0x12>

08009ecc <_localeconv_r>:
 8009ecc:	4800      	ldr	r0, [pc, #0]	; (8009ed0 <_localeconv_r+0x4>)
 8009ece:	4770      	bx	lr
 8009ed0:	20000560 	.word	0x20000560

08009ed4 <__retarget_lock_init_recursive>:
 8009ed4:	4770      	bx	lr

08009ed6 <__retarget_lock_acquire_recursive>:
 8009ed6:	4770      	bx	lr

08009ed8 <__retarget_lock_release_recursive>:
 8009ed8:	4770      	bx	lr
	...

08009edc <__swhatbuf_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	000e      	movs	r6, r1
 8009ee0:	001d      	movs	r5, r3
 8009ee2:	230e      	movs	r3, #14
 8009ee4:	5ec9      	ldrsh	r1, [r1, r3]
 8009ee6:	0014      	movs	r4, r2
 8009ee8:	b096      	sub	sp, #88	; 0x58
 8009eea:	2900      	cmp	r1, #0
 8009eec:	da08      	bge.n	8009f00 <__swhatbuf_r+0x24>
 8009eee:	220c      	movs	r2, #12
 8009ef0:	5eb3      	ldrsh	r3, [r6, r2]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	061b      	lsls	r3, r3, #24
 8009ef8:	d411      	bmi.n	8009f1e <__swhatbuf_r+0x42>
 8009efa:	2380      	movs	r3, #128	; 0x80
 8009efc:	00db      	lsls	r3, r3, #3
 8009efe:	e00f      	b.n	8009f20 <__swhatbuf_r+0x44>
 8009f00:	466a      	mov	r2, sp
 8009f02:	f000 ff2b 	bl	800ad5c <_fstat_r>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	dbf1      	blt.n	8009eee <__swhatbuf_r+0x12>
 8009f0a:	23f0      	movs	r3, #240	; 0xf0
 8009f0c:	9901      	ldr	r1, [sp, #4]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	4019      	ands	r1, r3
 8009f12:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <__swhatbuf_r+0x4c>)
 8009f14:	18c9      	adds	r1, r1, r3
 8009f16:	424b      	negs	r3, r1
 8009f18:	4159      	adcs	r1, r3
 8009f1a:	6029      	str	r1, [r5, #0]
 8009f1c:	e7ed      	b.n	8009efa <__swhatbuf_r+0x1e>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	2000      	movs	r0, #0
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	b016      	add	sp, #88	; 0x58
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	ffffe000 	.word	0xffffe000

08009f2c <__smakebuf_r>:
 8009f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f2e:	2602      	movs	r6, #2
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	0005      	movs	r5, r0
 8009f34:	000c      	movs	r4, r1
 8009f36:	4233      	tst	r3, r6
 8009f38:	d006      	beq.n	8009f48 <__smakebuf_r+0x1c>
 8009f3a:	0023      	movs	r3, r4
 8009f3c:	3347      	adds	r3, #71	; 0x47
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	6123      	str	r3, [r4, #16]
 8009f42:	2301      	movs	r3, #1
 8009f44:	6163      	str	r3, [r4, #20]
 8009f46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009f48:	466a      	mov	r2, sp
 8009f4a:	ab01      	add	r3, sp, #4
 8009f4c:	f7ff ffc6 	bl	8009edc <__swhatbuf_r>
 8009f50:	9900      	ldr	r1, [sp, #0]
 8009f52:	0007      	movs	r7, r0
 8009f54:	0028      	movs	r0, r5
 8009f56:	f000 fc77 	bl	800a848 <_malloc_r>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d108      	bne.n	8009f70 <__smakebuf_r+0x44>
 8009f5e:	220c      	movs	r2, #12
 8009f60:	5ea3      	ldrsh	r3, [r4, r2]
 8009f62:	059a      	lsls	r2, r3, #22
 8009f64:	d4ef      	bmi.n	8009f46 <__smakebuf_r+0x1a>
 8009f66:	2203      	movs	r2, #3
 8009f68:	4393      	bics	r3, r2
 8009f6a:	431e      	orrs	r6, r3
 8009f6c:	81a6      	strh	r6, [r4, #12]
 8009f6e:	e7e4      	b.n	8009f3a <__smakebuf_r+0xe>
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <__smakebuf_r+0x84>)
 8009f72:	62ab      	str	r3, [r5, #40]	; 0x28
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	89a2      	ldrh	r2, [r4, #12]
 8009f78:	6020      	str	r0, [r4, #0]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	9b00      	ldr	r3, [sp, #0]
 8009f80:	6120      	str	r0, [r4, #16]
 8009f82:	6163      	str	r3, [r4, #20]
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <__smakebuf_r+0x7a>
 8009f8a:	0028      	movs	r0, r5
 8009f8c:	230e      	movs	r3, #14
 8009f8e:	5ee1      	ldrsh	r1, [r4, r3]
 8009f90:	f000 fef6 	bl	800ad80 <_isatty_r>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d006      	beq.n	8009fa6 <__smakebuf_r+0x7a>
 8009f98:	2203      	movs	r2, #3
 8009f9a:	89a3      	ldrh	r3, [r4, #12]
 8009f9c:	4393      	bics	r3, r2
 8009f9e:	001a      	movs	r2, r3
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	89a0      	ldrh	r0, [r4, #12]
 8009fa8:	4307      	orrs	r7, r0
 8009faa:	81a7      	strh	r7, [r4, #12]
 8009fac:	e7cb      	b.n	8009f46 <__smakebuf_r+0x1a>
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	08009d11 	.word	0x08009d11

08009fb4 <malloc>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <malloc+0x10>)
 8009fb8:	0001      	movs	r1, r0
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	f000 fc44 	bl	800a848 <_malloc_r>
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	2000040c 	.word	0x2000040c

08009fc8 <memchr>:
 8009fc8:	b2c9      	uxtb	r1, r1
 8009fca:	1882      	adds	r2, r0, r2
 8009fcc:	4290      	cmp	r0, r2
 8009fce:	d101      	bne.n	8009fd4 <memchr+0xc>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	4770      	bx	lr
 8009fd4:	7803      	ldrb	r3, [r0, #0]
 8009fd6:	428b      	cmp	r3, r1
 8009fd8:	d0fb      	beq.n	8009fd2 <memchr+0xa>
 8009fda:	3001      	adds	r0, #1
 8009fdc:	e7f6      	b.n	8009fcc <memchr+0x4>
	...

08009fe0 <_Balloc>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fe4:	0006      	movs	r6, r0
 8009fe6:	000c      	movs	r4, r1
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	d10e      	bne.n	800a00a <_Balloc+0x2a>
 8009fec:	2010      	movs	r0, #16
 8009fee:	f7ff ffe1 	bl	8009fb4 <malloc>
 8009ff2:	1e02      	subs	r2, r0, #0
 8009ff4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ff6:	d104      	bne.n	800a002 <_Balloc+0x22>
 8009ff8:	2166      	movs	r1, #102	; 0x66
 8009ffa:	4b19      	ldr	r3, [pc, #100]	; (800a060 <_Balloc+0x80>)
 8009ffc:	4819      	ldr	r0, [pc, #100]	; (800a064 <_Balloc+0x84>)
 8009ffe:	f000 fe6d 	bl	800acdc <__assert_func>
 800a002:	6045      	str	r5, [r0, #4]
 800a004:	6085      	str	r5, [r0, #8]
 800a006:	6005      	str	r5, [r0, #0]
 800a008:	60c5      	str	r5, [r0, #12]
 800a00a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800a00c:	68eb      	ldr	r3, [r5, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d013      	beq.n	800a03a <_Balloc+0x5a>
 800a012:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a014:	00a2      	lsls	r2, r4, #2
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	189b      	adds	r3, r3, r2
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d118      	bne.n	800a052 <_Balloc+0x72>
 800a020:	2101      	movs	r1, #1
 800a022:	000d      	movs	r5, r1
 800a024:	40a5      	lsls	r5, r4
 800a026:	1d6a      	adds	r2, r5, #5
 800a028:	0030      	movs	r0, r6
 800a02a:	0092      	lsls	r2, r2, #2
 800a02c:	f000 fb74 	bl	800a718 <_calloc_r>
 800a030:	2800      	cmp	r0, #0
 800a032:	d00c      	beq.n	800a04e <_Balloc+0x6e>
 800a034:	6044      	str	r4, [r0, #4]
 800a036:	6085      	str	r5, [r0, #8]
 800a038:	e00d      	b.n	800a056 <_Balloc+0x76>
 800a03a:	2221      	movs	r2, #33	; 0x21
 800a03c:	2104      	movs	r1, #4
 800a03e:	0030      	movs	r0, r6
 800a040:	f000 fb6a 	bl	800a718 <_calloc_r>
 800a044:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a046:	60e8      	str	r0, [r5, #12]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e1      	bne.n	800a012 <_Balloc+0x32>
 800a04e:	2000      	movs	r0, #0
 800a050:	bd70      	pop	{r4, r5, r6, pc}
 800a052:	6802      	ldr	r2, [r0, #0]
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	2300      	movs	r3, #0
 800a058:	6103      	str	r3, [r0, #16]
 800a05a:	60c3      	str	r3, [r0, #12]
 800a05c:	e7f8      	b.n	800a050 <_Balloc+0x70>
 800a05e:	46c0      	nop			; (mov r8, r8)
 800a060:	0800b5ad 	.word	0x0800b5ad
 800a064:	0800b690 	.word	0x0800b690

0800a068 <_Bfree>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a06c:	0005      	movs	r5, r0
 800a06e:	000c      	movs	r4, r1
 800a070:	2e00      	cmp	r6, #0
 800a072:	d10e      	bne.n	800a092 <_Bfree+0x2a>
 800a074:	2010      	movs	r0, #16
 800a076:	f7ff ff9d 	bl	8009fb4 <malloc>
 800a07a:	1e02      	subs	r2, r0, #0
 800a07c:	6268      	str	r0, [r5, #36]	; 0x24
 800a07e:	d104      	bne.n	800a08a <_Bfree+0x22>
 800a080:	218a      	movs	r1, #138	; 0x8a
 800a082:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <_Bfree+0x40>)
 800a084:	4809      	ldr	r0, [pc, #36]	; (800a0ac <_Bfree+0x44>)
 800a086:	f000 fe29 	bl	800acdc <__assert_func>
 800a08a:	6046      	str	r6, [r0, #4]
 800a08c:	6086      	str	r6, [r0, #8]
 800a08e:	6006      	str	r6, [r0, #0]
 800a090:	60c6      	str	r6, [r0, #12]
 800a092:	2c00      	cmp	r4, #0
 800a094:	d007      	beq.n	800a0a6 <_Bfree+0x3e>
 800a096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a098:	6862      	ldr	r2, [r4, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	0092      	lsls	r2, r2, #2
 800a09e:	189b      	adds	r3, r3, r2
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	601c      	str	r4, [r3, #0]
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	0800b5ad 	.word	0x0800b5ad
 800a0ac:	0800b690 	.word	0x0800b690

0800a0b0 <__multadd>:
 800a0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0b2:	000e      	movs	r6, r1
 800a0b4:	9001      	str	r0, [sp, #4]
 800a0b6:	000c      	movs	r4, r1
 800a0b8:	001d      	movs	r5, r3
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	690f      	ldr	r7, [r1, #16]
 800a0be:	3614      	adds	r6, #20
 800a0c0:	6833      	ldr	r3, [r6, #0]
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	b299      	uxth	r1, r3
 800a0c6:	4351      	muls	r1, r2
 800a0c8:	0c1b      	lsrs	r3, r3, #16
 800a0ca:	4353      	muls	r3, r2
 800a0cc:	1949      	adds	r1, r1, r5
 800a0ce:	0c0d      	lsrs	r5, r1, #16
 800a0d0:	195b      	adds	r3, r3, r5
 800a0d2:	0c1d      	lsrs	r5, r3, #16
 800a0d4:	b289      	uxth	r1, r1
 800a0d6:	041b      	lsls	r3, r3, #16
 800a0d8:	185b      	adds	r3, r3, r1
 800a0da:	c608      	stmia	r6!, {r3}
 800a0dc:	4287      	cmp	r7, r0
 800a0de:	dcef      	bgt.n	800a0c0 <__multadd+0x10>
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	d022      	beq.n	800a12a <__multadd+0x7a>
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	42bb      	cmp	r3, r7
 800a0e8:	dc19      	bgt.n	800a11e <__multadd+0x6e>
 800a0ea:	6863      	ldr	r3, [r4, #4]
 800a0ec:	9801      	ldr	r0, [sp, #4]
 800a0ee:	1c59      	adds	r1, r3, #1
 800a0f0:	f7ff ff76 	bl	8009fe0 <_Balloc>
 800a0f4:	1e06      	subs	r6, r0, #0
 800a0f6:	d105      	bne.n	800a104 <__multadd+0x54>
 800a0f8:	0002      	movs	r2, r0
 800a0fa:	21b5      	movs	r1, #181	; 0xb5
 800a0fc:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <__multadd+0x80>)
 800a0fe:	480d      	ldr	r0, [pc, #52]	; (800a134 <__multadd+0x84>)
 800a100:	f000 fdec 	bl	800acdc <__assert_func>
 800a104:	0021      	movs	r1, r4
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	310c      	adds	r1, #12
 800a10a:	1c9a      	adds	r2, r3, #2
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	300c      	adds	r0, #12
 800a110:	f7fd ffbc 	bl	800808c <memcpy>
 800a114:	0021      	movs	r1, r4
 800a116:	9801      	ldr	r0, [sp, #4]
 800a118:	f7ff ffa6 	bl	800a068 <_Bfree>
 800a11c:	0034      	movs	r4, r6
 800a11e:	1d3b      	adds	r3, r7, #4
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	18e3      	adds	r3, r4, r3
 800a124:	605d      	str	r5, [r3, #4]
 800a126:	1c7b      	adds	r3, r7, #1
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	0020      	movs	r0, r4
 800a12c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	0800b61f 	.word	0x0800b61f
 800a134:	0800b690 	.word	0x0800b690

0800a138 <__hi0bits>:
 800a138:	0003      	movs	r3, r0
 800a13a:	0c02      	lsrs	r2, r0, #16
 800a13c:	2000      	movs	r0, #0
 800a13e:	4282      	cmp	r2, r0
 800a140:	d101      	bne.n	800a146 <__hi0bits+0xe>
 800a142:	041b      	lsls	r3, r3, #16
 800a144:	3010      	adds	r0, #16
 800a146:	0e1a      	lsrs	r2, r3, #24
 800a148:	d101      	bne.n	800a14e <__hi0bits+0x16>
 800a14a:	3008      	adds	r0, #8
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	0f1a      	lsrs	r2, r3, #28
 800a150:	d101      	bne.n	800a156 <__hi0bits+0x1e>
 800a152:	3004      	adds	r0, #4
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	0f9a      	lsrs	r2, r3, #30
 800a158:	d101      	bne.n	800a15e <__hi0bits+0x26>
 800a15a:	3002      	adds	r0, #2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	db03      	blt.n	800a16a <__hi0bits+0x32>
 800a162:	3001      	adds	r0, #1
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	d400      	bmi.n	800a16a <__hi0bits+0x32>
 800a168:	2020      	movs	r0, #32
 800a16a:	4770      	bx	lr

0800a16c <__lo0bits>:
 800a16c:	6803      	ldr	r3, [r0, #0]
 800a16e:	0002      	movs	r2, r0
 800a170:	2107      	movs	r1, #7
 800a172:	0018      	movs	r0, r3
 800a174:	4008      	ands	r0, r1
 800a176:	420b      	tst	r3, r1
 800a178:	d00d      	beq.n	800a196 <__lo0bits+0x2a>
 800a17a:	3906      	subs	r1, #6
 800a17c:	2000      	movs	r0, #0
 800a17e:	420b      	tst	r3, r1
 800a180:	d105      	bne.n	800a18e <__lo0bits+0x22>
 800a182:	3002      	adds	r0, #2
 800a184:	4203      	tst	r3, r0
 800a186:	d003      	beq.n	800a190 <__lo0bits+0x24>
 800a188:	40cb      	lsrs	r3, r1
 800a18a:	0008      	movs	r0, r1
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4770      	bx	lr
 800a190:	089b      	lsrs	r3, r3, #2
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	e7fb      	b.n	800a18e <__lo0bits+0x22>
 800a196:	b299      	uxth	r1, r3
 800a198:	2900      	cmp	r1, #0
 800a19a:	d101      	bne.n	800a1a0 <__lo0bits+0x34>
 800a19c:	2010      	movs	r0, #16
 800a19e:	0c1b      	lsrs	r3, r3, #16
 800a1a0:	b2d9      	uxtb	r1, r3
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d101      	bne.n	800a1aa <__lo0bits+0x3e>
 800a1a6:	3008      	adds	r0, #8
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	0719      	lsls	r1, r3, #28
 800a1ac:	d101      	bne.n	800a1b2 <__lo0bits+0x46>
 800a1ae:	3004      	adds	r0, #4
 800a1b0:	091b      	lsrs	r3, r3, #4
 800a1b2:	0799      	lsls	r1, r3, #30
 800a1b4:	d101      	bne.n	800a1ba <__lo0bits+0x4e>
 800a1b6:	3002      	adds	r0, #2
 800a1b8:	089b      	lsrs	r3, r3, #2
 800a1ba:	07d9      	lsls	r1, r3, #31
 800a1bc:	d4e9      	bmi.n	800a192 <__lo0bits+0x26>
 800a1be:	3001      	adds	r0, #1
 800a1c0:	085b      	lsrs	r3, r3, #1
 800a1c2:	d1e6      	bne.n	800a192 <__lo0bits+0x26>
 800a1c4:	2020      	movs	r0, #32
 800a1c6:	e7e2      	b.n	800a18e <__lo0bits+0x22>

0800a1c8 <__i2b>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	000c      	movs	r4, r1
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	f7ff ff07 	bl	8009fe0 <_Balloc>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d106      	bne.n	800a1e4 <__i2b+0x1c>
 800a1d6:	21a0      	movs	r1, #160	; 0xa0
 800a1d8:	0002      	movs	r2, r0
 800a1da:	4b04      	ldr	r3, [pc, #16]	; (800a1ec <__i2b+0x24>)
 800a1dc:	4804      	ldr	r0, [pc, #16]	; (800a1f0 <__i2b+0x28>)
 800a1de:	0049      	lsls	r1, r1, #1
 800a1e0:	f000 fd7c 	bl	800acdc <__assert_func>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	6144      	str	r4, [r0, #20]
 800a1e8:	6103      	str	r3, [r0, #16]
 800a1ea:	bd10      	pop	{r4, pc}
 800a1ec:	0800b61f 	.word	0x0800b61f
 800a1f0:	0800b690 	.word	0x0800b690

0800a1f4 <__multiply>:
 800a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f6:	690b      	ldr	r3, [r1, #16]
 800a1f8:	0014      	movs	r4, r2
 800a1fa:	6912      	ldr	r2, [r2, #16]
 800a1fc:	000d      	movs	r5, r1
 800a1fe:	b089      	sub	sp, #36	; 0x24
 800a200:	4293      	cmp	r3, r2
 800a202:	da01      	bge.n	800a208 <__multiply+0x14>
 800a204:	0025      	movs	r5, r4
 800a206:	000c      	movs	r4, r1
 800a208:	692f      	ldr	r7, [r5, #16]
 800a20a:	6926      	ldr	r6, [r4, #16]
 800a20c:	6869      	ldr	r1, [r5, #4]
 800a20e:	19bb      	adds	r3, r7, r6
 800a210:	9302      	str	r3, [sp, #8]
 800a212:	68ab      	ldr	r3, [r5, #8]
 800a214:	19ba      	adds	r2, r7, r6
 800a216:	4293      	cmp	r3, r2
 800a218:	da00      	bge.n	800a21c <__multiply+0x28>
 800a21a:	3101      	adds	r1, #1
 800a21c:	f7ff fee0 	bl	8009fe0 <_Balloc>
 800a220:	9001      	str	r0, [sp, #4]
 800a222:	2800      	cmp	r0, #0
 800a224:	d106      	bne.n	800a234 <__multiply+0x40>
 800a226:	215e      	movs	r1, #94	; 0x5e
 800a228:	0002      	movs	r2, r0
 800a22a:	4b48      	ldr	r3, [pc, #288]	; (800a34c <__multiply+0x158>)
 800a22c:	4848      	ldr	r0, [pc, #288]	; (800a350 <__multiply+0x15c>)
 800a22e:	31ff      	adds	r1, #255	; 0xff
 800a230:	f000 fd54 	bl	800acdc <__assert_func>
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	3314      	adds	r3, #20
 800a23a:	469c      	mov	ip, r3
 800a23c:	19bb      	adds	r3, r7, r6
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4463      	add	r3, ip
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	4663      	mov	r3, ip
 800a246:	9903      	ldr	r1, [sp, #12]
 800a248:	428b      	cmp	r3, r1
 800a24a:	d32c      	bcc.n	800a2a6 <__multiply+0xb2>
 800a24c:	002b      	movs	r3, r5
 800a24e:	0022      	movs	r2, r4
 800a250:	3314      	adds	r3, #20
 800a252:	00bf      	lsls	r7, r7, #2
 800a254:	3214      	adds	r2, #20
 800a256:	9306      	str	r3, [sp, #24]
 800a258:	00b6      	lsls	r6, r6, #2
 800a25a:	19db      	adds	r3, r3, r7
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	1993      	adds	r3, r2, r6
 800a260:	9307      	str	r3, [sp, #28]
 800a262:	2304      	movs	r3, #4
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	002b      	movs	r3, r5
 800a268:	9904      	ldr	r1, [sp, #16]
 800a26a:	3315      	adds	r3, #21
 800a26c:	9200      	str	r2, [sp, #0]
 800a26e:	4299      	cmp	r1, r3
 800a270:	d305      	bcc.n	800a27e <__multiply+0x8a>
 800a272:	1b4b      	subs	r3, r1, r5
 800a274:	3b15      	subs	r3, #21
 800a276:	089b      	lsrs	r3, r3, #2
 800a278:	3301      	adds	r3, #1
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	9b07      	ldr	r3, [sp, #28]
 800a280:	9a00      	ldr	r2, [sp, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d311      	bcc.n	800a2aa <__multiply+0xb6>
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	dd06      	ble.n	800a29a <__multiply+0xa6>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	3b04      	subs	r3, #4
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d053      	beq.n	800a342 <__multiply+0x14e>
 800a29a:	9b01      	ldr	r3, [sp, #4]
 800a29c:	9a02      	ldr	r2, [sp, #8]
 800a29e:	0018      	movs	r0, r3
 800a2a0:	611a      	str	r2, [r3, #16]
 800a2a2:	b009      	add	sp, #36	; 0x24
 800a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a6:	c304      	stmia	r3!, {r2}
 800a2a8:	e7cd      	b.n	800a246 <__multiply+0x52>
 800a2aa:	9b00      	ldr	r3, [sp, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	b298      	uxth	r0, r3
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d01b      	beq.n	800a2ec <__multiply+0xf8>
 800a2b4:	4667      	mov	r7, ip
 800a2b6:	2400      	movs	r4, #0
 800a2b8:	9e06      	ldr	r6, [sp, #24]
 800a2ba:	ce02      	ldmia	r6!, {r1}
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	b28b      	uxth	r3, r1
 800a2c0:	4343      	muls	r3, r0
 800a2c2:	b292      	uxth	r2, r2
 800a2c4:	189b      	adds	r3, r3, r2
 800a2c6:	191b      	adds	r3, r3, r4
 800a2c8:	0c0c      	lsrs	r4, r1, #16
 800a2ca:	4344      	muls	r4, r0
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	0c11      	lsrs	r1, r2, #16
 800a2d0:	1861      	adds	r1, r4, r1
 800a2d2:	0c1c      	lsrs	r4, r3, #16
 800a2d4:	1909      	adds	r1, r1, r4
 800a2d6:	0c0c      	lsrs	r4, r1, #16
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	0409      	lsls	r1, r1, #16
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	c708      	stmia	r7!, {r3}
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	42b3      	cmp	r3, r6
 800a2e4:	d8e9      	bhi.n	800a2ba <__multiply+0xc6>
 800a2e6:	4663      	mov	r3, ip
 800a2e8:	9a05      	ldr	r2, [sp, #20]
 800a2ea:	509c      	str	r4, [r3, r2]
 800a2ec:	9b00      	ldr	r3, [sp, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	0c1e      	lsrs	r6, r3, #16
 800a2f2:	d020      	beq.n	800a336 <__multiply+0x142>
 800a2f4:	4663      	mov	r3, ip
 800a2f6:	002c      	movs	r4, r5
 800a2f8:	4660      	mov	r0, ip
 800a2fa:	2700      	movs	r7, #0
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3414      	adds	r4, #20
 800a300:	6822      	ldr	r2, [r4, #0]
 800a302:	b29b      	uxth	r3, r3
 800a304:	b291      	uxth	r1, r2
 800a306:	4371      	muls	r1, r6
 800a308:	6802      	ldr	r2, [r0, #0]
 800a30a:	0c12      	lsrs	r2, r2, #16
 800a30c:	1889      	adds	r1, r1, r2
 800a30e:	19cf      	adds	r7, r1, r7
 800a310:	0439      	lsls	r1, r7, #16
 800a312:	430b      	orrs	r3, r1
 800a314:	6003      	str	r3, [r0, #0]
 800a316:	cc02      	ldmia	r4!, {r1}
 800a318:	6843      	ldr	r3, [r0, #4]
 800a31a:	0c09      	lsrs	r1, r1, #16
 800a31c:	4371      	muls	r1, r6
 800a31e:	b29b      	uxth	r3, r3
 800a320:	0c3f      	lsrs	r7, r7, #16
 800a322:	18cb      	adds	r3, r1, r3
 800a324:	9a04      	ldr	r2, [sp, #16]
 800a326:	19db      	adds	r3, r3, r7
 800a328:	0c1f      	lsrs	r7, r3, #16
 800a32a:	3004      	adds	r0, #4
 800a32c:	42a2      	cmp	r2, r4
 800a32e:	d8e7      	bhi.n	800a300 <__multiply+0x10c>
 800a330:	4662      	mov	r2, ip
 800a332:	9905      	ldr	r1, [sp, #20]
 800a334:	5053      	str	r3, [r2, r1]
 800a336:	9b00      	ldr	r3, [sp, #0]
 800a338:	3304      	adds	r3, #4
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	2304      	movs	r3, #4
 800a33e:	449c      	add	ip, r3
 800a340:	e79d      	b.n	800a27e <__multiply+0x8a>
 800a342:	9b02      	ldr	r3, [sp, #8]
 800a344:	3b01      	subs	r3, #1
 800a346:	9302      	str	r3, [sp, #8]
 800a348:	e79d      	b.n	800a286 <__multiply+0x92>
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	0800b61f 	.word	0x0800b61f
 800a350:	0800b690 	.word	0x0800b690

0800a354 <__pow5mult>:
 800a354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a356:	2303      	movs	r3, #3
 800a358:	0015      	movs	r5, r2
 800a35a:	0007      	movs	r7, r0
 800a35c:	000e      	movs	r6, r1
 800a35e:	401a      	ands	r2, r3
 800a360:	421d      	tst	r5, r3
 800a362:	d008      	beq.n	800a376 <__pow5mult+0x22>
 800a364:	4925      	ldr	r1, [pc, #148]	; (800a3fc <__pow5mult+0xa8>)
 800a366:	3a01      	subs	r2, #1
 800a368:	0092      	lsls	r2, r2, #2
 800a36a:	5852      	ldr	r2, [r2, r1]
 800a36c:	2300      	movs	r3, #0
 800a36e:	0031      	movs	r1, r6
 800a370:	f7ff fe9e 	bl	800a0b0 <__multadd>
 800a374:	0006      	movs	r6, r0
 800a376:	10ad      	asrs	r5, r5, #2
 800a378:	d03d      	beq.n	800a3f6 <__pow5mult+0xa2>
 800a37a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d10f      	bne.n	800a3a0 <__pow5mult+0x4c>
 800a380:	2010      	movs	r0, #16
 800a382:	f7ff fe17 	bl	8009fb4 <malloc>
 800a386:	1e02      	subs	r2, r0, #0
 800a388:	6278      	str	r0, [r7, #36]	; 0x24
 800a38a:	d105      	bne.n	800a398 <__pow5mult+0x44>
 800a38c:	21d7      	movs	r1, #215	; 0xd7
 800a38e:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <__pow5mult+0xac>)
 800a390:	481c      	ldr	r0, [pc, #112]	; (800a404 <__pow5mult+0xb0>)
 800a392:	0049      	lsls	r1, r1, #1
 800a394:	f000 fca2 	bl	800acdc <__assert_func>
 800a398:	6044      	str	r4, [r0, #4]
 800a39a:	6084      	str	r4, [r0, #8]
 800a39c:	6004      	str	r4, [r0, #0]
 800a39e:	60c4      	str	r4, [r0, #12]
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	689c      	ldr	r4, [r3, #8]
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	d108      	bne.n	800a3bc <__pow5mult+0x68>
 800a3aa:	0038      	movs	r0, r7
 800a3ac:	4916      	ldr	r1, [pc, #88]	; (800a408 <__pow5mult+0xb4>)
 800a3ae:	f7ff ff0b 	bl	800a1c8 <__i2b>
 800a3b2:	9b01      	ldr	r3, [sp, #4]
 800a3b4:	0004      	movs	r4, r0
 800a3b6:	6098      	str	r0, [r3, #8]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	6003      	str	r3, [r0, #0]
 800a3bc:	2301      	movs	r3, #1
 800a3be:	421d      	tst	r5, r3
 800a3c0:	d00a      	beq.n	800a3d8 <__pow5mult+0x84>
 800a3c2:	0031      	movs	r1, r6
 800a3c4:	0022      	movs	r2, r4
 800a3c6:	0038      	movs	r0, r7
 800a3c8:	f7ff ff14 	bl	800a1f4 <__multiply>
 800a3cc:	0031      	movs	r1, r6
 800a3ce:	9001      	str	r0, [sp, #4]
 800a3d0:	0038      	movs	r0, r7
 800a3d2:	f7ff fe49 	bl	800a068 <_Bfree>
 800a3d6:	9e01      	ldr	r6, [sp, #4]
 800a3d8:	106d      	asrs	r5, r5, #1
 800a3da:	d00c      	beq.n	800a3f6 <__pow5mult+0xa2>
 800a3dc:	6820      	ldr	r0, [r4, #0]
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d107      	bne.n	800a3f2 <__pow5mult+0x9e>
 800a3e2:	0022      	movs	r2, r4
 800a3e4:	0021      	movs	r1, r4
 800a3e6:	0038      	movs	r0, r7
 800a3e8:	f7ff ff04 	bl	800a1f4 <__multiply>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	6020      	str	r0, [r4, #0]
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	e7e2      	b.n	800a3bc <__pow5mult+0x68>
 800a3f6:	0030      	movs	r0, r6
 800a3f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	0800b7e0 	.word	0x0800b7e0
 800a400:	0800b5ad 	.word	0x0800b5ad
 800a404:	0800b690 	.word	0x0800b690
 800a408:	00000271 	.word	0x00000271

0800a40c <__lshift>:
 800a40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40e:	000c      	movs	r4, r1
 800a410:	0017      	movs	r7, r2
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	1155      	asrs	r5, r2, #5
 800a416:	b087      	sub	sp, #28
 800a418:	18eb      	adds	r3, r5, r3
 800a41a:	9302      	str	r3, [sp, #8]
 800a41c:	3301      	adds	r3, #1
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	6849      	ldr	r1, [r1, #4]
 800a422:	68a3      	ldr	r3, [r4, #8]
 800a424:	9004      	str	r0, [sp, #16]
 800a426:	9a01      	ldr	r2, [sp, #4]
 800a428:	4293      	cmp	r3, r2
 800a42a:	db10      	blt.n	800a44e <__lshift+0x42>
 800a42c:	9804      	ldr	r0, [sp, #16]
 800a42e:	f7ff fdd7 	bl	8009fe0 <_Balloc>
 800a432:	2300      	movs	r3, #0
 800a434:	0002      	movs	r2, r0
 800a436:	0006      	movs	r6, r0
 800a438:	0019      	movs	r1, r3
 800a43a:	3214      	adds	r2, #20
 800a43c:	4298      	cmp	r0, r3
 800a43e:	d10c      	bne.n	800a45a <__lshift+0x4e>
 800a440:	21da      	movs	r1, #218	; 0xda
 800a442:	0002      	movs	r2, r0
 800a444:	4b26      	ldr	r3, [pc, #152]	; (800a4e0 <__lshift+0xd4>)
 800a446:	4827      	ldr	r0, [pc, #156]	; (800a4e4 <__lshift+0xd8>)
 800a448:	31ff      	adds	r1, #255	; 0xff
 800a44a:	f000 fc47 	bl	800acdc <__assert_func>
 800a44e:	3101      	adds	r1, #1
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	e7e8      	b.n	800a426 <__lshift+0x1a>
 800a454:	0098      	lsls	r0, r3, #2
 800a456:	5011      	str	r1, [r2, r0]
 800a458:	3301      	adds	r3, #1
 800a45a:	42ab      	cmp	r3, r5
 800a45c:	dbfa      	blt.n	800a454 <__lshift+0x48>
 800a45e:	43eb      	mvns	r3, r5
 800a460:	17db      	asrs	r3, r3, #31
 800a462:	401d      	ands	r5, r3
 800a464:	211f      	movs	r1, #31
 800a466:	0023      	movs	r3, r4
 800a468:	0038      	movs	r0, r7
 800a46a:	00ad      	lsls	r5, r5, #2
 800a46c:	1955      	adds	r5, r2, r5
 800a46e:	6922      	ldr	r2, [r4, #16]
 800a470:	3314      	adds	r3, #20
 800a472:	0092      	lsls	r2, r2, #2
 800a474:	4008      	ands	r0, r1
 800a476:	4684      	mov	ip, r0
 800a478:	189a      	adds	r2, r3, r2
 800a47a:	420f      	tst	r7, r1
 800a47c:	d02a      	beq.n	800a4d4 <__lshift+0xc8>
 800a47e:	3101      	adds	r1, #1
 800a480:	1a09      	subs	r1, r1, r0
 800a482:	9105      	str	r1, [sp, #20]
 800a484:	2100      	movs	r1, #0
 800a486:	9503      	str	r5, [sp, #12]
 800a488:	4667      	mov	r7, ip
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	40b8      	lsls	r0, r7
 800a48e:	4301      	orrs	r1, r0
 800a490:	9803      	ldr	r0, [sp, #12]
 800a492:	c002      	stmia	r0!, {r1}
 800a494:	cb02      	ldmia	r3!, {r1}
 800a496:	9003      	str	r0, [sp, #12]
 800a498:	9805      	ldr	r0, [sp, #20]
 800a49a:	40c1      	lsrs	r1, r0
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d8f3      	bhi.n	800a488 <__lshift+0x7c>
 800a4a0:	0020      	movs	r0, r4
 800a4a2:	3015      	adds	r0, #21
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	4282      	cmp	r2, r0
 800a4a8:	d304      	bcc.n	800a4b4 <__lshift+0xa8>
 800a4aa:	1b13      	subs	r3, r2, r4
 800a4ac:	3b15      	subs	r3, #21
 800a4ae:	089b      	lsrs	r3, r3, #2
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	50e9      	str	r1, [r5, r3]
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	d002      	beq.n	800a4c0 <__lshift+0xb4>
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	3302      	adds	r3, #2
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	9804      	ldr	r0, [sp, #16]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	0021      	movs	r1, r4
 800a4c8:	6133      	str	r3, [r6, #16]
 800a4ca:	f7ff fdcd 	bl	800a068 <_Bfree>
 800a4ce:	0030      	movs	r0, r6
 800a4d0:	b007      	add	sp, #28
 800a4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d4:	cb02      	ldmia	r3!, {r1}
 800a4d6:	c502      	stmia	r5!, {r1}
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d8fb      	bhi.n	800a4d4 <__lshift+0xc8>
 800a4dc:	e7f0      	b.n	800a4c0 <__lshift+0xb4>
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	0800b61f 	.word	0x0800b61f
 800a4e4:	0800b690 	.word	0x0800b690

0800a4e8 <__mcmp>:
 800a4e8:	6902      	ldr	r2, [r0, #16]
 800a4ea:	690b      	ldr	r3, [r1, #16]
 800a4ec:	b530      	push	{r4, r5, lr}
 800a4ee:	0004      	movs	r4, r0
 800a4f0:	1ad0      	subs	r0, r2, r3
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d10d      	bne.n	800a512 <__mcmp+0x2a>
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	3414      	adds	r4, #20
 800a4fa:	3114      	adds	r1, #20
 800a4fc:	18e2      	adds	r2, r4, r3
 800a4fe:	18c9      	adds	r1, r1, r3
 800a500:	3a04      	subs	r2, #4
 800a502:	3904      	subs	r1, #4
 800a504:	6815      	ldr	r5, [r2, #0]
 800a506:	680b      	ldr	r3, [r1, #0]
 800a508:	429d      	cmp	r5, r3
 800a50a:	d003      	beq.n	800a514 <__mcmp+0x2c>
 800a50c:	2001      	movs	r0, #1
 800a50e:	429d      	cmp	r5, r3
 800a510:	d303      	bcc.n	800a51a <__mcmp+0x32>
 800a512:	bd30      	pop	{r4, r5, pc}
 800a514:	4294      	cmp	r4, r2
 800a516:	d3f3      	bcc.n	800a500 <__mcmp+0x18>
 800a518:	e7fb      	b.n	800a512 <__mcmp+0x2a>
 800a51a:	4240      	negs	r0, r0
 800a51c:	e7f9      	b.n	800a512 <__mcmp+0x2a>
	...

0800a520 <__mdiff>:
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	000e      	movs	r6, r1
 800a524:	0007      	movs	r7, r0
 800a526:	0011      	movs	r1, r2
 800a528:	0030      	movs	r0, r6
 800a52a:	b087      	sub	sp, #28
 800a52c:	0014      	movs	r4, r2
 800a52e:	f7ff ffdb 	bl	800a4e8 <__mcmp>
 800a532:	1e05      	subs	r5, r0, #0
 800a534:	d110      	bne.n	800a558 <__mdiff+0x38>
 800a536:	0001      	movs	r1, r0
 800a538:	0038      	movs	r0, r7
 800a53a:	f7ff fd51 	bl	8009fe0 <_Balloc>
 800a53e:	1e02      	subs	r2, r0, #0
 800a540:	d104      	bne.n	800a54c <__mdiff+0x2c>
 800a542:	4b40      	ldr	r3, [pc, #256]	; (800a644 <__mdiff+0x124>)
 800a544:	4940      	ldr	r1, [pc, #256]	; (800a648 <__mdiff+0x128>)
 800a546:	4841      	ldr	r0, [pc, #260]	; (800a64c <__mdiff+0x12c>)
 800a548:	f000 fbc8 	bl	800acdc <__assert_func>
 800a54c:	2301      	movs	r3, #1
 800a54e:	6145      	str	r5, [r0, #20]
 800a550:	6103      	str	r3, [r0, #16]
 800a552:	0010      	movs	r0, r2
 800a554:	b007      	add	sp, #28
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a558:	2301      	movs	r3, #1
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	2800      	cmp	r0, #0
 800a55e:	db04      	blt.n	800a56a <__mdiff+0x4a>
 800a560:	0023      	movs	r3, r4
 800a562:	0034      	movs	r4, r6
 800a564:	001e      	movs	r6, r3
 800a566:	2300      	movs	r3, #0
 800a568:	9301      	str	r3, [sp, #4]
 800a56a:	0038      	movs	r0, r7
 800a56c:	6861      	ldr	r1, [r4, #4]
 800a56e:	f7ff fd37 	bl	8009fe0 <_Balloc>
 800a572:	1e02      	subs	r2, r0, #0
 800a574:	d103      	bne.n	800a57e <__mdiff+0x5e>
 800a576:	2190      	movs	r1, #144	; 0x90
 800a578:	4b32      	ldr	r3, [pc, #200]	; (800a644 <__mdiff+0x124>)
 800a57a:	0089      	lsls	r1, r1, #2
 800a57c:	e7e3      	b.n	800a546 <__mdiff+0x26>
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	2700      	movs	r7, #0
 800a582:	60c3      	str	r3, [r0, #12]
 800a584:	6920      	ldr	r0, [r4, #16]
 800a586:	3414      	adds	r4, #20
 800a588:	9401      	str	r4, [sp, #4]
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	0084      	lsls	r4, r0, #2
 800a58e:	191b      	adds	r3, r3, r4
 800a590:	0034      	movs	r4, r6
 800a592:	9302      	str	r3, [sp, #8]
 800a594:	6933      	ldr	r3, [r6, #16]
 800a596:	3414      	adds	r4, #20
 800a598:	0099      	lsls	r1, r3, #2
 800a59a:	1863      	adds	r3, r4, r1
 800a59c:	9303      	str	r3, [sp, #12]
 800a59e:	0013      	movs	r3, r2
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	469c      	mov	ip, r3
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	9b04      	ldr	r3, [sp, #16]
 800a5ac:	cc02      	ldmia	r4!, {r1}
 800a5ae:	cb20      	ldmia	r3!, {r5}
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	b2ab      	uxth	r3, r5
 800a5b4:	19df      	adds	r7, r3, r7
 800a5b6:	b28b      	uxth	r3, r1
 800a5b8:	1afb      	subs	r3, r7, r3
 800a5ba:	0c09      	lsrs	r1, r1, #16
 800a5bc:	0c2d      	lsrs	r5, r5, #16
 800a5be:	1a6d      	subs	r5, r5, r1
 800a5c0:	1419      	asrs	r1, r3, #16
 800a5c2:	186d      	adds	r5, r5, r1
 800a5c4:	4661      	mov	r1, ip
 800a5c6:	142f      	asrs	r7, r5, #16
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	042d      	lsls	r5, r5, #16
 800a5cc:	432b      	orrs	r3, r5
 800a5ce:	c108      	stmia	r1!, {r3}
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	468c      	mov	ip, r1
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d8e8      	bhi.n	800a5aa <__mdiff+0x8a>
 800a5d8:	0031      	movs	r1, r6
 800a5da:	9c03      	ldr	r4, [sp, #12]
 800a5dc:	3115      	adds	r1, #21
 800a5de:	2304      	movs	r3, #4
 800a5e0:	428c      	cmp	r4, r1
 800a5e2:	d304      	bcc.n	800a5ee <__mdiff+0xce>
 800a5e4:	1ba3      	subs	r3, r4, r6
 800a5e6:	3b15      	subs	r3, #21
 800a5e8:	089b      	lsrs	r3, r3, #2
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	9901      	ldr	r1, [sp, #4]
 800a5f0:	18cc      	adds	r4, r1, r3
 800a5f2:	9905      	ldr	r1, [sp, #20]
 800a5f4:	0026      	movs	r6, r4
 800a5f6:	18cb      	adds	r3, r1, r3
 800a5f8:	469c      	mov	ip, r3
 800a5fa:	9902      	ldr	r1, [sp, #8]
 800a5fc:	428e      	cmp	r6, r1
 800a5fe:	d310      	bcc.n	800a622 <__mdiff+0x102>
 800a600:	9e02      	ldr	r6, [sp, #8]
 800a602:	1ee1      	subs	r1, r4, #3
 800a604:	2500      	movs	r5, #0
 800a606:	428e      	cmp	r6, r1
 800a608:	d304      	bcc.n	800a614 <__mdiff+0xf4>
 800a60a:	0031      	movs	r1, r6
 800a60c:	3103      	adds	r1, #3
 800a60e:	1b0c      	subs	r4, r1, r4
 800a610:	08a4      	lsrs	r4, r4, #2
 800a612:	00a5      	lsls	r5, r4, #2
 800a614:	195b      	adds	r3, r3, r5
 800a616:	3b04      	subs	r3, #4
 800a618:	6819      	ldr	r1, [r3, #0]
 800a61a:	2900      	cmp	r1, #0
 800a61c:	d00f      	beq.n	800a63e <__mdiff+0x11e>
 800a61e:	6110      	str	r0, [r2, #16]
 800a620:	e797      	b.n	800a552 <__mdiff+0x32>
 800a622:	ce02      	ldmia	r6!, {r1}
 800a624:	b28d      	uxth	r5, r1
 800a626:	19ed      	adds	r5, r5, r7
 800a628:	0c0f      	lsrs	r7, r1, #16
 800a62a:	1429      	asrs	r1, r5, #16
 800a62c:	1879      	adds	r1, r7, r1
 800a62e:	140f      	asrs	r7, r1, #16
 800a630:	b2ad      	uxth	r5, r5
 800a632:	0409      	lsls	r1, r1, #16
 800a634:	430d      	orrs	r5, r1
 800a636:	4661      	mov	r1, ip
 800a638:	c120      	stmia	r1!, {r5}
 800a63a:	468c      	mov	ip, r1
 800a63c:	e7dd      	b.n	800a5fa <__mdiff+0xda>
 800a63e:	3801      	subs	r0, #1
 800a640:	e7e9      	b.n	800a616 <__mdiff+0xf6>
 800a642:	46c0      	nop			; (mov r8, r8)
 800a644:	0800b61f 	.word	0x0800b61f
 800a648:	00000232 	.word	0x00000232
 800a64c:	0800b690 	.word	0x0800b690

0800a650 <__d2b>:
 800a650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a652:	2101      	movs	r1, #1
 800a654:	0014      	movs	r4, r2
 800a656:	001e      	movs	r6, r3
 800a658:	9f08      	ldr	r7, [sp, #32]
 800a65a:	f7ff fcc1 	bl	8009fe0 <_Balloc>
 800a65e:	1e05      	subs	r5, r0, #0
 800a660:	d105      	bne.n	800a66e <__d2b+0x1e>
 800a662:	0002      	movs	r2, r0
 800a664:	4b26      	ldr	r3, [pc, #152]	; (800a700 <__d2b+0xb0>)
 800a666:	4927      	ldr	r1, [pc, #156]	; (800a704 <__d2b+0xb4>)
 800a668:	4827      	ldr	r0, [pc, #156]	; (800a708 <__d2b+0xb8>)
 800a66a:	f000 fb37 	bl	800acdc <__assert_func>
 800a66e:	0333      	lsls	r3, r6, #12
 800a670:	0076      	lsls	r6, r6, #1
 800a672:	0b1b      	lsrs	r3, r3, #12
 800a674:	0d76      	lsrs	r6, r6, #21
 800a676:	d124      	bne.n	800a6c2 <__d2b+0x72>
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	2c00      	cmp	r4, #0
 800a67c:	d027      	beq.n	800a6ce <__d2b+0x7e>
 800a67e:	4668      	mov	r0, sp
 800a680:	9400      	str	r4, [sp, #0]
 800a682:	f7ff fd73 	bl	800a16c <__lo0bits>
 800a686:	9c00      	ldr	r4, [sp, #0]
 800a688:	2800      	cmp	r0, #0
 800a68a:	d01e      	beq.n	800a6ca <__d2b+0x7a>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	2120      	movs	r1, #32
 800a690:	001a      	movs	r2, r3
 800a692:	1a09      	subs	r1, r1, r0
 800a694:	408a      	lsls	r2, r1
 800a696:	40c3      	lsrs	r3, r0
 800a698:	4322      	orrs	r2, r4
 800a69a:	616a      	str	r2, [r5, #20]
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	9c01      	ldr	r4, [sp, #4]
 800a6a0:	61ac      	str	r4, [r5, #24]
 800a6a2:	1e63      	subs	r3, r4, #1
 800a6a4:	419c      	sbcs	r4, r3
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	612c      	str	r4, [r5, #16]
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d018      	beq.n	800a6e0 <__d2b+0x90>
 800a6ae:	4b17      	ldr	r3, [pc, #92]	; (800a70c <__d2b+0xbc>)
 800a6b0:	18f6      	adds	r6, r6, r3
 800a6b2:	2335      	movs	r3, #53	; 0x35
 800a6b4:	1836      	adds	r6, r6, r0
 800a6b6:	1a18      	subs	r0, r3, r0
 800a6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ba:	603e      	str	r6, [r7, #0]
 800a6bc:	6018      	str	r0, [r3, #0]
 800a6be:	0028      	movs	r0, r5
 800a6c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6c2:	2280      	movs	r2, #128	; 0x80
 800a6c4:	0352      	lsls	r2, r2, #13
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	e7d6      	b.n	800a678 <__d2b+0x28>
 800a6ca:	616c      	str	r4, [r5, #20]
 800a6cc:	e7e7      	b.n	800a69e <__d2b+0x4e>
 800a6ce:	a801      	add	r0, sp, #4
 800a6d0:	f7ff fd4c 	bl	800a16c <__lo0bits>
 800a6d4:	2401      	movs	r4, #1
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	612c      	str	r4, [r5, #16]
 800a6da:	616b      	str	r3, [r5, #20]
 800a6dc:	3020      	adds	r0, #32
 800a6de:	e7e4      	b.n	800a6aa <__d2b+0x5a>
 800a6e0:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <__d2b+0xc0>)
 800a6e2:	18c0      	adds	r0, r0, r3
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <__d2b+0xc4>)
 800a6e6:	6038      	str	r0, [r7, #0]
 800a6e8:	18e3      	adds	r3, r4, r3
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	18eb      	adds	r3, r5, r3
 800a6ee:	6958      	ldr	r0, [r3, #20]
 800a6f0:	f7ff fd22 	bl	800a138 <__hi0bits>
 800a6f4:	0164      	lsls	r4, r4, #5
 800a6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f8:	1a24      	subs	r4, r4, r0
 800a6fa:	601c      	str	r4, [r3, #0]
 800a6fc:	e7df      	b.n	800a6be <__d2b+0x6e>
 800a6fe:	46c0      	nop			; (mov r8, r8)
 800a700:	0800b61f 	.word	0x0800b61f
 800a704:	0000030a 	.word	0x0000030a
 800a708:	0800b690 	.word	0x0800b690
 800a70c:	fffffbcd 	.word	0xfffffbcd
 800a710:	fffffbce 	.word	0xfffffbce
 800a714:	3fffffff 	.word	0x3fffffff

0800a718 <_calloc_r>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	0c13      	lsrs	r3, r2, #16
 800a71c:	0c0d      	lsrs	r5, r1, #16
 800a71e:	d11e      	bne.n	800a75e <_calloc_r+0x46>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10c      	bne.n	800a73e <_calloc_r+0x26>
 800a724:	b289      	uxth	r1, r1
 800a726:	b294      	uxth	r4, r2
 800a728:	434c      	muls	r4, r1
 800a72a:	0021      	movs	r1, r4
 800a72c:	f000 f88c 	bl	800a848 <_malloc_r>
 800a730:	1e05      	subs	r5, r0, #0
 800a732:	d01b      	beq.n	800a76c <_calloc_r+0x54>
 800a734:	0022      	movs	r2, r4
 800a736:	2100      	movs	r1, #0
 800a738:	f7fd fcb1 	bl	800809e <memset>
 800a73c:	e016      	b.n	800a76c <_calloc_r+0x54>
 800a73e:	1c1d      	adds	r5, r3, #0
 800a740:	1c0b      	adds	r3, r1, #0
 800a742:	b292      	uxth	r2, r2
 800a744:	b289      	uxth	r1, r1
 800a746:	b29c      	uxth	r4, r3
 800a748:	4351      	muls	r1, r2
 800a74a:	b2ab      	uxth	r3, r5
 800a74c:	4363      	muls	r3, r4
 800a74e:	0c0c      	lsrs	r4, r1, #16
 800a750:	191c      	adds	r4, r3, r4
 800a752:	0c22      	lsrs	r2, r4, #16
 800a754:	d107      	bne.n	800a766 <_calloc_r+0x4e>
 800a756:	0424      	lsls	r4, r4, #16
 800a758:	b289      	uxth	r1, r1
 800a75a:	430c      	orrs	r4, r1
 800a75c:	e7e5      	b.n	800a72a <_calloc_r+0x12>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <_calloc_r+0x4e>
 800a762:	1c13      	adds	r3, r2, #0
 800a764:	e7ed      	b.n	800a742 <_calloc_r+0x2a>
 800a766:	230c      	movs	r3, #12
 800a768:	2500      	movs	r5, #0
 800a76a:	6003      	str	r3, [r0, #0]
 800a76c:	0028      	movs	r0, r5
 800a76e:	bd70      	pop	{r4, r5, r6, pc}

0800a770 <_free_r>:
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	0005      	movs	r5, r0
 800a774:	2900      	cmp	r1, #0
 800a776:	d010      	beq.n	800a79a <_free_r+0x2a>
 800a778:	1f0c      	subs	r4, r1, #4
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da00      	bge.n	800a782 <_free_r+0x12>
 800a780:	18e4      	adds	r4, r4, r3
 800a782:	0028      	movs	r0, r5
 800a784:	f000 fb34 	bl	800adf0 <__malloc_lock>
 800a788:	4a1d      	ldr	r2, [pc, #116]	; (800a800 <_free_r+0x90>)
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <_free_r+0x2c>
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	6014      	str	r4, [r2, #0]
 800a794:	0028      	movs	r0, r5
 800a796:	f000 fb33 	bl	800ae00 <__malloc_unlock>
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d908      	bls.n	800a7b2 <_free_r+0x42>
 800a7a0:	6821      	ldr	r1, [r4, #0]
 800a7a2:	1860      	adds	r0, r4, r1
 800a7a4:	4283      	cmp	r3, r0
 800a7a6:	d1f3      	bne.n	800a790 <_free_r+0x20>
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	1841      	adds	r1, r0, r1
 800a7ae:	6021      	str	r1, [r4, #0]
 800a7b0:	e7ee      	b.n	800a790 <_free_r+0x20>
 800a7b2:	001a      	movs	r2, r3
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <_free_r+0x4e>
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	d9f9      	bls.n	800a7b2 <_free_r+0x42>
 800a7be:	6811      	ldr	r1, [r2, #0]
 800a7c0:	1850      	adds	r0, r2, r1
 800a7c2:	42a0      	cmp	r0, r4
 800a7c4:	d10b      	bne.n	800a7de <_free_r+0x6e>
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	1809      	adds	r1, r1, r0
 800a7ca:	1850      	adds	r0, r2, r1
 800a7cc:	6011      	str	r1, [r2, #0]
 800a7ce:	4283      	cmp	r3, r0
 800a7d0:	d1e0      	bne.n	800a794 <_free_r+0x24>
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	1841      	adds	r1, r0, r1
 800a7d8:	6011      	str	r1, [r2, #0]
 800a7da:	6053      	str	r3, [r2, #4]
 800a7dc:	e7da      	b.n	800a794 <_free_r+0x24>
 800a7de:	42a0      	cmp	r0, r4
 800a7e0:	d902      	bls.n	800a7e8 <_free_r+0x78>
 800a7e2:	230c      	movs	r3, #12
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	e7d5      	b.n	800a794 <_free_r+0x24>
 800a7e8:	6821      	ldr	r1, [r4, #0]
 800a7ea:	1860      	adds	r0, r4, r1
 800a7ec:	4283      	cmp	r3, r0
 800a7ee:	d103      	bne.n	800a7f8 <_free_r+0x88>
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	1841      	adds	r1, r0, r1
 800a7f6:	6021      	str	r1, [r4, #0]
 800a7f8:	6063      	str	r3, [r4, #4]
 800a7fa:	6054      	str	r4, [r2, #4]
 800a7fc:	e7ca      	b.n	800a794 <_free_r+0x24>
 800a7fe:	46c0      	nop			; (mov r8, r8)
 800a800:	20000e68 	.word	0x20000e68

0800a804 <sbrk_aligned>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4e0f      	ldr	r6, [pc, #60]	; (800a844 <sbrk_aligned+0x40>)
 800a808:	000d      	movs	r5, r1
 800a80a:	6831      	ldr	r1, [r6, #0]
 800a80c:	0004      	movs	r4, r0
 800a80e:	2900      	cmp	r1, #0
 800a810:	d102      	bne.n	800a818 <sbrk_aligned+0x14>
 800a812:	f000 f9f1 	bl	800abf8 <_sbrk_r>
 800a816:	6030      	str	r0, [r6, #0]
 800a818:	0029      	movs	r1, r5
 800a81a:	0020      	movs	r0, r4
 800a81c:	f000 f9ec 	bl	800abf8 <_sbrk_r>
 800a820:	1c43      	adds	r3, r0, #1
 800a822:	d00a      	beq.n	800a83a <sbrk_aligned+0x36>
 800a824:	2303      	movs	r3, #3
 800a826:	1cc5      	adds	r5, r0, #3
 800a828:	439d      	bics	r5, r3
 800a82a:	42a8      	cmp	r0, r5
 800a82c:	d007      	beq.n	800a83e <sbrk_aligned+0x3a>
 800a82e:	1a29      	subs	r1, r5, r0
 800a830:	0020      	movs	r0, r4
 800a832:	f000 f9e1 	bl	800abf8 <_sbrk_r>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d101      	bne.n	800a83e <sbrk_aligned+0x3a>
 800a83a:	2501      	movs	r5, #1
 800a83c:	426d      	negs	r5, r5
 800a83e:	0028      	movs	r0, r5
 800a840:	bd70      	pop	{r4, r5, r6, pc}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	20000e6c 	.word	0x20000e6c

0800a848 <_malloc_r>:
 800a848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a84a:	2203      	movs	r2, #3
 800a84c:	1ccb      	adds	r3, r1, #3
 800a84e:	4393      	bics	r3, r2
 800a850:	3308      	adds	r3, #8
 800a852:	0006      	movs	r6, r0
 800a854:	001f      	movs	r7, r3
 800a856:	2b0c      	cmp	r3, #12
 800a858:	d232      	bcs.n	800a8c0 <_malloc_r+0x78>
 800a85a:	270c      	movs	r7, #12
 800a85c:	42b9      	cmp	r1, r7
 800a85e:	d831      	bhi.n	800a8c4 <_malloc_r+0x7c>
 800a860:	0030      	movs	r0, r6
 800a862:	f000 fac5 	bl	800adf0 <__malloc_lock>
 800a866:	4d32      	ldr	r5, [pc, #200]	; (800a930 <_malloc_r+0xe8>)
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	001c      	movs	r4, r3
 800a86c:	2c00      	cmp	r4, #0
 800a86e:	d12e      	bne.n	800a8ce <_malloc_r+0x86>
 800a870:	0039      	movs	r1, r7
 800a872:	0030      	movs	r0, r6
 800a874:	f7ff ffc6 	bl	800a804 <sbrk_aligned>
 800a878:	0004      	movs	r4, r0
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d11e      	bne.n	800a8bc <_malloc_r+0x74>
 800a87e:	682c      	ldr	r4, [r5, #0]
 800a880:	0025      	movs	r5, r4
 800a882:	2d00      	cmp	r5, #0
 800a884:	d14a      	bne.n	800a91c <_malloc_r+0xd4>
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	0029      	movs	r1, r5
 800a88a:	18e3      	adds	r3, r4, r3
 800a88c:	0030      	movs	r0, r6
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	f000 f9b2 	bl	800abf8 <_sbrk_r>
 800a894:	9b01      	ldr	r3, [sp, #4]
 800a896:	4283      	cmp	r3, r0
 800a898:	d143      	bne.n	800a922 <_malloc_r+0xda>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	3703      	adds	r7, #3
 800a89e:	1aff      	subs	r7, r7, r3
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	439f      	bics	r7, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	2f0c      	cmp	r7, #12
 800a8a8:	d200      	bcs.n	800a8ac <_malloc_r+0x64>
 800a8aa:	270c      	movs	r7, #12
 800a8ac:	0039      	movs	r1, r7
 800a8ae:	0030      	movs	r0, r6
 800a8b0:	f7ff ffa8 	bl	800a804 <sbrk_aligned>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d034      	beq.n	800a922 <_malloc_r+0xda>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	19df      	adds	r7, r3, r7
 800a8bc:	6027      	str	r7, [r4, #0]
 800a8be:	e013      	b.n	800a8e8 <_malloc_r+0xa0>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dacb      	bge.n	800a85c <_malloc_r+0x14>
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	6033      	str	r3, [r6, #0]
 800a8ca:	0028      	movs	r0, r5
 800a8cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8ce:	6822      	ldr	r2, [r4, #0]
 800a8d0:	1bd1      	subs	r1, r2, r7
 800a8d2:	d420      	bmi.n	800a916 <_malloc_r+0xce>
 800a8d4:	290b      	cmp	r1, #11
 800a8d6:	d917      	bls.n	800a908 <_malloc_r+0xc0>
 800a8d8:	19e2      	adds	r2, r4, r7
 800a8da:	6027      	str	r7, [r4, #0]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d111      	bne.n	800a904 <_malloc_r+0xbc>
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	6863      	ldr	r3, [r4, #4]
 800a8e4:	6011      	str	r1, [r2, #0]
 800a8e6:	6053      	str	r3, [r2, #4]
 800a8e8:	0030      	movs	r0, r6
 800a8ea:	0025      	movs	r5, r4
 800a8ec:	f000 fa88 	bl	800ae00 <__malloc_unlock>
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	350b      	adds	r5, #11
 800a8f4:	1d23      	adds	r3, r4, #4
 800a8f6:	4395      	bics	r5, r2
 800a8f8:	1aea      	subs	r2, r5, r3
 800a8fa:	429d      	cmp	r5, r3
 800a8fc:	d0e5      	beq.n	800a8ca <_malloc_r+0x82>
 800a8fe:	1b5b      	subs	r3, r3, r5
 800a900:	50a3      	str	r3, [r4, r2]
 800a902:	e7e2      	b.n	800a8ca <_malloc_r+0x82>
 800a904:	605a      	str	r2, [r3, #4]
 800a906:	e7ec      	b.n	800a8e2 <_malloc_r+0x9a>
 800a908:	6862      	ldr	r2, [r4, #4]
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	d101      	bne.n	800a912 <_malloc_r+0xca>
 800a90e:	602a      	str	r2, [r5, #0]
 800a910:	e7ea      	b.n	800a8e8 <_malloc_r+0xa0>
 800a912:	605a      	str	r2, [r3, #4]
 800a914:	e7e8      	b.n	800a8e8 <_malloc_r+0xa0>
 800a916:	0023      	movs	r3, r4
 800a918:	6864      	ldr	r4, [r4, #4]
 800a91a:	e7a7      	b.n	800a86c <_malloc_r+0x24>
 800a91c:	002c      	movs	r4, r5
 800a91e:	686d      	ldr	r5, [r5, #4]
 800a920:	e7af      	b.n	800a882 <_malloc_r+0x3a>
 800a922:	230c      	movs	r3, #12
 800a924:	0030      	movs	r0, r6
 800a926:	6033      	str	r3, [r6, #0]
 800a928:	f000 fa6a 	bl	800ae00 <__malloc_unlock>
 800a92c:	e7cd      	b.n	800a8ca <_malloc_r+0x82>
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	20000e68 	.word	0x20000e68

0800a934 <__sfputc_r>:
 800a934:	6893      	ldr	r3, [r2, #8]
 800a936:	b510      	push	{r4, lr}
 800a938:	3b01      	subs	r3, #1
 800a93a:	6093      	str	r3, [r2, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da04      	bge.n	800a94a <__sfputc_r+0x16>
 800a940:	6994      	ldr	r4, [r2, #24]
 800a942:	42a3      	cmp	r3, r4
 800a944:	db07      	blt.n	800a956 <__sfputc_r+0x22>
 800a946:	290a      	cmp	r1, #10
 800a948:	d005      	beq.n	800a956 <__sfputc_r+0x22>
 800a94a:	6813      	ldr	r3, [r2, #0]
 800a94c:	1c58      	adds	r0, r3, #1
 800a94e:	6010      	str	r0, [r2, #0]
 800a950:	7019      	strb	r1, [r3, #0]
 800a952:	0008      	movs	r0, r1
 800a954:	bd10      	pop	{r4, pc}
 800a956:	f7fe f977 	bl	8008c48 <__swbuf_r>
 800a95a:	0001      	movs	r1, r0
 800a95c:	e7f9      	b.n	800a952 <__sfputc_r+0x1e>

0800a95e <__sfputs_r>:
 800a95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a960:	0006      	movs	r6, r0
 800a962:	000f      	movs	r7, r1
 800a964:	0014      	movs	r4, r2
 800a966:	18d5      	adds	r5, r2, r3
 800a968:	42ac      	cmp	r4, r5
 800a96a:	d101      	bne.n	800a970 <__sfputs_r+0x12>
 800a96c:	2000      	movs	r0, #0
 800a96e:	e007      	b.n	800a980 <__sfputs_r+0x22>
 800a970:	7821      	ldrb	r1, [r4, #0]
 800a972:	003a      	movs	r2, r7
 800a974:	0030      	movs	r0, r6
 800a976:	f7ff ffdd 	bl	800a934 <__sfputc_r>
 800a97a:	3401      	adds	r4, #1
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d1f3      	bne.n	800a968 <__sfputs_r+0xa>
 800a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a984 <_vfiprintf_r>:
 800a984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a986:	b0a1      	sub	sp, #132	; 0x84
 800a988:	0006      	movs	r6, r0
 800a98a:	000c      	movs	r4, r1
 800a98c:	001f      	movs	r7, r3
 800a98e:	9203      	str	r2, [sp, #12]
 800a990:	2800      	cmp	r0, #0
 800a992:	d004      	beq.n	800a99e <_vfiprintf_r+0x1a>
 800a994:	6983      	ldr	r3, [r0, #24]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <_vfiprintf_r+0x1a>
 800a99a:	f7ff f9f7 	bl	8009d8c <__sinit>
 800a99e:	4b8e      	ldr	r3, [pc, #568]	; (800abd8 <_vfiprintf_r+0x254>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d11c      	bne.n	800a9de <_vfiprintf_r+0x5a>
 800a9a4:	6874      	ldr	r4, [r6, #4]
 800a9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9a8:	07db      	lsls	r3, r3, #31
 800a9aa:	d405      	bmi.n	800a9b8 <_vfiprintf_r+0x34>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	059b      	lsls	r3, r3, #22
 800a9b0:	d402      	bmi.n	800a9b8 <_vfiprintf_r+0x34>
 800a9b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9b4:	f7ff fa8f 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	071b      	lsls	r3, r3, #28
 800a9bc:	d502      	bpl.n	800a9c4 <_vfiprintf_r+0x40>
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d11d      	bne.n	800aa00 <_vfiprintf_r+0x7c>
 800a9c4:	0021      	movs	r1, r4
 800a9c6:	0030      	movs	r0, r6
 800a9c8:	f7fe f994 	bl	8008cf4 <__swsetup_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d017      	beq.n	800aa00 <_vfiprintf_r+0x7c>
 800a9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d2:	07db      	lsls	r3, r3, #31
 800a9d4:	d50d      	bpl.n	800a9f2 <_vfiprintf_r+0x6e>
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	4240      	negs	r0, r0
 800a9da:	b021      	add	sp, #132	; 0x84
 800a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9de:	4b7f      	ldr	r3, [pc, #508]	; (800abdc <_vfiprintf_r+0x258>)
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	d101      	bne.n	800a9e8 <_vfiprintf_r+0x64>
 800a9e4:	68b4      	ldr	r4, [r6, #8]
 800a9e6:	e7de      	b.n	800a9a6 <_vfiprintf_r+0x22>
 800a9e8:	4b7d      	ldr	r3, [pc, #500]	; (800abe0 <_vfiprintf_r+0x25c>)
 800a9ea:	429c      	cmp	r4, r3
 800a9ec:	d1db      	bne.n	800a9a6 <_vfiprintf_r+0x22>
 800a9ee:	68f4      	ldr	r4, [r6, #12]
 800a9f0:	e7d9      	b.n	800a9a6 <_vfiprintf_r+0x22>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	059b      	lsls	r3, r3, #22
 800a9f6:	d4ee      	bmi.n	800a9d6 <_vfiprintf_r+0x52>
 800a9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9fa:	f7ff fa6d 	bl	8009ed8 <__retarget_lock_release_recursive>
 800a9fe:	e7ea      	b.n	800a9d6 <_vfiprintf_r+0x52>
 800aa00:	2300      	movs	r3, #0
 800aa02:	ad08      	add	r5, sp, #32
 800aa04:	616b      	str	r3, [r5, #20]
 800aa06:	3320      	adds	r3, #32
 800aa08:	766b      	strb	r3, [r5, #25]
 800aa0a:	3310      	adds	r3, #16
 800aa0c:	76ab      	strb	r3, [r5, #26]
 800aa0e:	9707      	str	r7, [sp, #28]
 800aa10:	9f03      	ldr	r7, [sp, #12]
 800aa12:	783b      	ldrb	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <_vfiprintf_r+0x98>
 800aa18:	2b25      	cmp	r3, #37	; 0x25
 800aa1a:	d14e      	bne.n	800aaba <_vfiprintf_r+0x136>
 800aa1c:	9b03      	ldr	r3, [sp, #12]
 800aa1e:	1afb      	subs	r3, r7, r3
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	429f      	cmp	r7, r3
 800aa26:	d00d      	beq.n	800aa44 <_vfiprintf_r+0xc0>
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	0021      	movs	r1, r4
 800aa2c:	0030      	movs	r0, r6
 800aa2e:	9a03      	ldr	r2, [sp, #12]
 800aa30:	f7ff ff95 	bl	800a95e <__sfputs_r>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d100      	bne.n	800aa3a <_vfiprintf_r+0xb6>
 800aa38:	e0b5      	b.n	800aba6 <_vfiprintf_r+0x222>
 800aa3a:	696a      	ldr	r2, [r5, #20]
 800aa3c:	9b05      	ldr	r3, [sp, #20]
 800aa3e:	4694      	mov	ip, r2
 800aa40:	4463      	add	r3, ip
 800aa42:	616b      	str	r3, [r5, #20]
 800aa44:	783b      	ldrb	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d100      	bne.n	800aa4c <_vfiprintf_r+0xc8>
 800aa4a:	e0ac      	b.n	800aba6 <_vfiprintf_r+0x222>
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	1c7b      	adds	r3, r7, #1
 800aa50:	9303      	str	r3, [sp, #12]
 800aa52:	2300      	movs	r3, #0
 800aa54:	4252      	negs	r2, r2
 800aa56:	606a      	str	r2, [r5, #4]
 800aa58:	a904      	add	r1, sp, #16
 800aa5a:	3254      	adds	r2, #84	; 0x54
 800aa5c:	1852      	adds	r2, r2, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	60eb      	str	r3, [r5, #12]
 800aa62:	60ab      	str	r3, [r5, #8]
 800aa64:	7013      	strb	r3, [r2, #0]
 800aa66:	65ab      	str	r3, [r5, #88]	; 0x58
 800aa68:	9b03      	ldr	r3, [sp, #12]
 800aa6a:	2205      	movs	r2, #5
 800aa6c:	7819      	ldrb	r1, [r3, #0]
 800aa6e:	485d      	ldr	r0, [pc, #372]	; (800abe4 <_vfiprintf_r+0x260>)
 800aa70:	f7ff faaa 	bl	8009fc8 <memchr>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	1c5f      	adds	r7, r3, #1
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d120      	bne.n	800aabe <_vfiprintf_r+0x13a>
 800aa7c:	682a      	ldr	r2, [r5, #0]
 800aa7e:	06d3      	lsls	r3, r2, #27
 800aa80:	d504      	bpl.n	800aa8c <_vfiprintf_r+0x108>
 800aa82:	2353      	movs	r3, #83	; 0x53
 800aa84:	a904      	add	r1, sp, #16
 800aa86:	185b      	adds	r3, r3, r1
 800aa88:	2120      	movs	r1, #32
 800aa8a:	7019      	strb	r1, [r3, #0]
 800aa8c:	0713      	lsls	r3, r2, #28
 800aa8e:	d504      	bpl.n	800aa9a <_vfiprintf_r+0x116>
 800aa90:	2353      	movs	r3, #83	; 0x53
 800aa92:	a904      	add	r1, sp, #16
 800aa94:	185b      	adds	r3, r3, r1
 800aa96:	212b      	movs	r1, #43	; 0x2b
 800aa98:	7019      	strb	r1, [r3, #0]
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa0:	d016      	beq.n	800aad0 <_vfiprintf_r+0x14c>
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	68eb      	ldr	r3, [r5, #12]
 800aaa6:	9f03      	ldr	r7, [sp, #12]
 800aaa8:	783a      	ldrb	r2, [r7, #0]
 800aaaa:	1c78      	adds	r0, r7, #1
 800aaac:	3a30      	subs	r2, #48	; 0x30
 800aaae:	4684      	mov	ip, r0
 800aab0:	2a09      	cmp	r2, #9
 800aab2:	d94f      	bls.n	800ab54 <_vfiprintf_r+0x1d0>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	d111      	bne.n	800aadc <_vfiprintf_r+0x158>
 800aab8:	e017      	b.n	800aaea <_vfiprintf_r+0x166>
 800aaba:	3701      	adds	r7, #1
 800aabc:	e7a9      	b.n	800aa12 <_vfiprintf_r+0x8e>
 800aabe:	4b49      	ldr	r3, [pc, #292]	; (800abe4 <_vfiprintf_r+0x260>)
 800aac0:	682a      	ldr	r2, [r5, #0]
 800aac2:	1ac0      	subs	r0, r0, r3
 800aac4:	2301      	movs	r3, #1
 800aac6:	4083      	lsls	r3, r0
 800aac8:	4313      	orrs	r3, r2
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	9703      	str	r7, [sp, #12]
 800aace:	e7cb      	b.n	800aa68 <_vfiprintf_r+0xe4>
 800aad0:	9b07      	ldr	r3, [sp, #28]
 800aad2:	1d19      	adds	r1, r3, #4
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	9107      	str	r1, [sp, #28]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	db01      	blt.n	800aae0 <_vfiprintf_r+0x15c>
 800aadc:	930b      	str	r3, [sp, #44]	; 0x2c
 800aade:	e004      	b.n	800aaea <_vfiprintf_r+0x166>
 800aae0:	425b      	negs	r3, r3
 800aae2:	60eb      	str	r3, [r5, #12]
 800aae4:	2302      	movs	r3, #2
 800aae6:	4313      	orrs	r3, r2
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	783b      	ldrb	r3, [r7, #0]
 800aaec:	2b2e      	cmp	r3, #46	; 0x2e
 800aaee:	d10a      	bne.n	800ab06 <_vfiprintf_r+0x182>
 800aaf0:	787b      	ldrb	r3, [r7, #1]
 800aaf2:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf4:	d137      	bne.n	800ab66 <_vfiprintf_r+0x1e2>
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	3702      	adds	r7, #2
 800aafa:	1d1a      	adds	r2, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9207      	str	r2, [sp, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	db2d      	blt.n	800ab60 <_vfiprintf_r+0x1dc>
 800ab04:	9309      	str	r3, [sp, #36]	; 0x24
 800ab06:	2203      	movs	r2, #3
 800ab08:	7839      	ldrb	r1, [r7, #0]
 800ab0a:	4837      	ldr	r0, [pc, #220]	; (800abe8 <_vfiprintf_r+0x264>)
 800ab0c:	f7ff fa5c 	bl	8009fc8 <memchr>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d007      	beq.n	800ab24 <_vfiprintf_r+0x1a0>
 800ab14:	4b34      	ldr	r3, [pc, #208]	; (800abe8 <_vfiprintf_r+0x264>)
 800ab16:	682a      	ldr	r2, [r5, #0]
 800ab18:	1ac0      	subs	r0, r0, r3
 800ab1a:	2340      	movs	r3, #64	; 0x40
 800ab1c:	4083      	lsls	r3, r0
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	3701      	adds	r7, #1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	7839      	ldrb	r1, [r7, #0]
 800ab26:	1c7b      	adds	r3, r7, #1
 800ab28:	2206      	movs	r2, #6
 800ab2a:	4830      	ldr	r0, [pc, #192]	; (800abec <_vfiprintf_r+0x268>)
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	7629      	strb	r1, [r5, #24]
 800ab30:	f7ff fa4a 	bl	8009fc8 <memchr>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d045      	beq.n	800abc4 <_vfiprintf_r+0x240>
 800ab38:	4b2d      	ldr	r3, [pc, #180]	; (800abf0 <_vfiprintf_r+0x26c>)
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d127      	bne.n	800ab8e <_vfiprintf_r+0x20a>
 800ab3e:	2207      	movs	r2, #7
 800ab40:	9b07      	ldr	r3, [sp, #28]
 800ab42:	3307      	adds	r3, #7
 800ab44:	4393      	bics	r3, r2
 800ab46:	3308      	adds	r3, #8
 800ab48:	9307      	str	r3, [sp, #28]
 800ab4a:	696b      	ldr	r3, [r5, #20]
 800ab4c:	9a04      	ldr	r2, [sp, #16]
 800ab4e:	189b      	adds	r3, r3, r2
 800ab50:	616b      	str	r3, [r5, #20]
 800ab52:	e75d      	b.n	800aa10 <_vfiprintf_r+0x8c>
 800ab54:	210a      	movs	r1, #10
 800ab56:	434b      	muls	r3, r1
 800ab58:	4667      	mov	r7, ip
 800ab5a:	189b      	adds	r3, r3, r2
 800ab5c:	3909      	subs	r1, #9
 800ab5e:	e7a3      	b.n	800aaa8 <_vfiprintf_r+0x124>
 800ab60:	2301      	movs	r3, #1
 800ab62:	425b      	negs	r3, r3
 800ab64:	e7ce      	b.n	800ab04 <_vfiprintf_r+0x180>
 800ab66:	2300      	movs	r3, #0
 800ab68:	001a      	movs	r2, r3
 800ab6a:	3701      	adds	r7, #1
 800ab6c:	606b      	str	r3, [r5, #4]
 800ab6e:	7839      	ldrb	r1, [r7, #0]
 800ab70:	1c78      	adds	r0, r7, #1
 800ab72:	3930      	subs	r1, #48	; 0x30
 800ab74:	4684      	mov	ip, r0
 800ab76:	2909      	cmp	r1, #9
 800ab78:	d903      	bls.n	800ab82 <_vfiprintf_r+0x1fe>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0c3      	beq.n	800ab06 <_vfiprintf_r+0x182>
 800ab7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab80:	e7c1      	b.n	800ab06 <_vfiprintf_r+0x182>
 800ab82:	230a      	movs	r3, #10
 800ab84:	435a      	muls	r2, r3
 800ab86:	4667      	mov	r7, ip
 800ab88:	1852      	adds	r2, r2, r1
 800ab8a:	3b09      	subs	r3, #9
 800ab8c:	e7ef      	b.n	800ab6e <_vfiprintf_r+0x1ea>
 800ab8e:	ab07      	add	r3, sp, #28
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	0022      	movs	r2, r4
 800ab94:	0029      	movs	r1, r5
 800ab96:	0030      	movs	r0, r6
 800ab98:	4b16      	ldr	r3, [pc, #88]	; (800abf4 <_vfiprintf_r+0x270>)
 800ab9a:	f7fd fb33 	bl	8008204 <_printf_float>
 800ab9e:	9004      	str	r0, [sp, #16]
 800aba0:	9b04      	ldr	r3, [sp, #16]
 800aba2:	3301      	adds	r3, #1
 800aba4:	d1d1      	bne.n	800ab4a <_vfiprintf_r+0x1c6>
 800aba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aba8:	07db      	lsls	r3, r3, #31
 800abaa:	d405      	bmi.n	800abb8 <_vfiprintf_r+0x234>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	059b      	lsls	r3, r3, #22
 800abb0:	d402      	bmi.n	800abb8 <_vfiprintf_r+0x234>
 800abb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abb4:	f7ff f990 	bl	8009ed8 <__retarget_lock_release_recursive>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	065b      	lsls	r3, r3, #25
 800abbc:	d500      	bpl.n	800abc0 <_vfiprintf_r+0x23c>
 800abbe:	e70a      	b.n	800a9d6 <_vfiprintf_r+0x52>
 800abc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800abc2:	e70a      	b.n	800a9da <_vfiprintf_r+0x56>
 800abc4:	ab07      	add	r3, sp, #28
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	0022      	movs	r2, r4
 800abca:	0029      	movs	r1, r5
 800abcc:	0030      	movs	r0, r6
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <_vfiprintf_r+0x270>)
 800abd0:	f7fd fdca 	bl	8008768 <_printf_i>
 800abd4:	e7e3      	b.n	800ab9e <_vfiprintf_r+0x21a>
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	0800b650 	.word	0x0800b650
 800abdc:	0800b670 	.word	0x0800b670
 800abe0:	0800b630 	.word	0x0800b630
 800abe4:	0800b7ec 	.word	0x0800b7ec
 800abe8:	0800b7f2 	.word	0x0800b7f2
 800abec:	0800b7f6 	.word	0x0800b7f6
 800abf0:	08008205 	.word	0x08008205
 800abf4:	0800a95f 	.word	0x0800a95f

0800abf8 <_sbrk_r>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	4d06      	ldr	r5, [pc, #24]	; (800ac18 <_sbrk_r+0x20>)
 800abfe:	0004      	movs	r4, r0
 800ac00:	0008      	movs	r0, r1
 800ac02:	602b      	str	r3, [r5, #0]
 800ac04:	f7f8 fe26 	bl	8003854 <_sbrk>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d103      	bne.n	800ac14 <_sbrk_r+0x1c>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d000      	beq.n	800ac14 <_sbrk_r+0x1c>
 800ac12:	6023      	str	r3, [r4, #0]
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	46c0      	nop			; (mov r8, r8)
 800ac18:	20000e70 	.word	0x20000e70

0800ac1c <__sread>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	000c      	movs	r4, r1
 800ac20:	250e      	movs	r5, #14
 800ac22:	5f49      	ldrsh	r1, [r1, r5]
 800ac24:	f000 f8f4 	bl	800ae10 <_read_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	db03      	blt.n	800ac34 <__sread+0x18>
 800ac2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac2e:	181b      	adds	r3, r3, r0
 800ac30:	6563      	str	r3, [r4, #84]	; 0x54
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	4a02      	ldr	r2, [pc, #8]	; (800ac40 <__sread+0x24>)
 800ac38:	4013      	ands	r3, r2
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	e7f9      	b.n	800ac32 <__sread+0x16>
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	ffffefff 	.word	0xffffefff

0800ac44 <__swrite>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	001f      	movs	r7, r3
 800ac48:	898b      	ldrh	r3, [r1, #12]
 800ac4a:	0005      	movs	r5, r0
 800ac4c:	000c      	movs	r4, r1
 800ac4e:	0016      	movs	r6, r2
 800ac50:	05db      	lsls	r3, r3, #23
 800ac52:	d505      	bpl.n	800ac60 <__swrite+0x1c>
 800ac54:	230e      	movs	r3, #14
 800ac56:	5ec9      	ldrsh	r1, [r1, r3]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	f000 f8a2 	bl	800ada4 <_lseek_r>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	4a05      	ldr	r2, [pc, #20]	; (800ac78 <__swrite+0x34>)
 800ac64:	0028      	movs	r0, r5
 800ac66:	4013      	ands	r3, r2
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	0032      	movs	r2, r6
 800ac6c:	230e      	movs	r3, #14
 800ac6e:	5ee1      	ldrsh	r1, [r4, r3]
 800ac70:	003b      	movs	r3, r7
 800ac72:	f000 f81f 	bl	800acb4 <_write_r>
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	ffffefff 	.word	0xffffefff

0800ac7c <__sseek>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	000c      	movs	r4, r1
 800ac80:	250e      	movs	r5, #14
 800ac82:	5f49      	ldrsh	r1, [r1, r5]
 800ac84:	f000 f88e 	bl	800ada4 <_lseek_r>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	1c42      	adds	r2, r0, #1
 800ac8c:	d103      	bne.n	800ac96 <__sseek+0x1a>
 800ac8e:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <__sseek+0x28>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	bd70      	pop	{r4, r5, r6, pc}
 800ac96:	2280      	movs	r2, #128	; 0x80
 800ac98:	0152      	lsls	r2, r2, #5
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	6560      	str	r0, [r4, #84]	; 0x54
 800aca0:	e7f8      	b.n	800ac94 <__sseek+0x18>
 800aca2:	46c0      	nop			; (mov r8, r8)
 800aca4:	ffffefff 	.word	0xffffefff

0800aca8 <__sclose>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	230e      	movs	r3, #14
 800acac:	5ec9      	ldrsh	r1, [r1, r3]
 800acae:	f000 f833 	bl	800ad18 <_close_r>
 800acb2:	bd10      	pop	{r4, pc}

0800acb4 <_write_r>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	0004      	movs	r4, r0
 800acb8:	0008      	movs	r0, r1
 800acba:	0011      	movs	r1, r2
 800acbc:	001a      	movs	r2, r3
 800acbe:	2300      	movs	r3, #0
 800acc0:	4d05      	ldr	r5, [pc, #20]	; (800acd8 <_write_r+0x24>)
 800acc2:	602b      	str	r3, [r5, #0]
 800acc4:	f7f8 fbb6 	bl	8003434 <_write>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d103      	bne.n	800acd4 <_write_r+0x20>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d000      	beq.n	800acd4 <_write_r+0x20>
 800acd2:	6023      	str	r3, [r4, #0]
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
 800acd6:	46c0      	nop			; (mov r8, r8)
 800acd8:	20000e70 	.word	0x20000e70

0800acdc <__assert_func>:
 800acdc:	b530      	push	{r4, r5, lr}
 800acde:	0014      	movs	r4, r2
 800ace0:	001a      	movs	r2, r3
 800ace2:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <__assert_func+0x2c>)
 800ace4:	0005      	movs	r5, r0
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	b085      	sub	sp, #20
 800acea:	68d8      	ldr	r0, [r3, #12]
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <__assert_func+0x30>)
 800acee:	2c00      	cmp	r4, #0
 800acf0:	d101      	bne.n	800acf6 <__assert_func+0x1a>
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <__assert_func+0x34>)
 800acf4:	001c      	movs	r4, r3
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	9100      	str	r1, [sp, #0]
 800acfa:	002b      	movs	r3, r5
 800acfc:	4905      	ldr	r1, [pc, #20]	; (800ad14 <__assert_func+0x38>)
 800acfe:	9402      	str	r4, [sp, #8]
 800ad00:	f000 f81c 	bl	800ad3c <fiprintf>
 800ad04:	f000 f8a5 	bl	800ae52 <abort>
 800ad08:	2000040c 	.word	0x2000040c
 800ad0c:	0800b7fd 	.word	0x0800b7fd
 800ad10:	0800b838 	.word	0x0800b838
 800ad14:	0800b80a 	.word	0x0800b80a

0800ad18 <_close_r>:
 800ad18:	2300      	movs	r3, #0
 800ad1a:	b570      	push	{r4, r5, r6, lr}
 800ad1c:	4d06      	ldr	r5, [pc, #24]	; (800ad38 <_close_r+0x20>)
 800ad1e:	0004      	movs	r4, r0
 800ad20:	0008      	movs	r0, r1
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	f7f8 fbb4 	bl	8003490 <_close>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d103      	bne.n	800ad34 <_close_r+0x1c>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d000      	beq.n	800ad34 <_close_r+0x1c>
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	20000e70 	.word	0x20000e70

0800ad3c <fiprintf>:
 800ad3c:	b40e      	push	{r1, r2, r3}
 800ad3e:	b503      	push	{r0, r1, lr}
 800ad40:	0001      	movs	r1, r0
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	4804      	ldr	r0, [pc, #16]	; (800ad58 <fiprintf+0x1c>)
 800ad46:	cb04      	ldmia	r3!, {r2}
 800ad48:	6800      	ldr	r0, [r0, #0]
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	f7ff fe1a 	bl	800a984 <_vfiprintf_r>
 800ad50:	b002      	add	sp, #8
 800ad52:	bc08      	pop	{r3}
 800ad54:	b003      	add	sp, #12
 800ad56:	4718      	bx	r3
 800ad58:	2000040c 	.word	0x2000040c

0800ad5c <_fstat_r>:
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	b570      	push	{r4, r5, r6, lr}
 800ad60:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_fstat_r+0x20>)
 800ad62:	0004      	movs	r4, r0
 800ad64:	0008      	movs	r0, r1
 800ad66:	0011      	movs	r1, r2
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	f7f8 fbe3 	bl	8003534 <_fstat>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	d103      	bne.n	800ad7a <_fstat_r+0x1e>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d000      	beq.n	800ad7a <_fstat_r+0x1e>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd70      	pop	{r4, r5, r6, pc}
 800ad7c:	20000e70 	.word	0x20000e70

0800ad80 <_isatty_r>:
 800ad80:	2300      	movs	r3, #0
 800ad82:	b570      	push	{r4, r5, r6, lr}
 800ad84:	4d06      	ldr	r5, [pc, #24]	; (800ada0 <_isatty_r+0x20>)
 800ad86:	0004      	movs	r4, r0
 800ad88:	0008      	movs	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f8 fb3c 	bl	8003408 <_isatty>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d103      	bne.n	800ad9c <_isatty_r+0x1c>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d000      	beq.n	800ad9c <_isatty_r+0x1c>
 800ad9a:	6023      	str	r3, [r4, #0]
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	20000e70 	.word	0x20000e70

0800ada4 <_lseek_r>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	0004      	movs	r4, r0
 800ada8:	0008      	movs	r0, r1
 800adaa:	0011      	movs	r1, r2
 800adac:	001a      	movs	r2, r3
 800adae:	2300      	movs	r3, #0
 800adb0:	4d05      	ldr	r5, [pc, #20]	; (800adc8 <_lseek_r+0x24>)
 800adb2:	602b      	str	r3, [r5, #0]
 800adb4:	f7f8 fb83 	bl	80034be <_lseek>
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	d103      	bne.n	800adc4 <_lseek_r+0x20>
 800adbc:	682b      	ldr	r3, [r5, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d000      	beq.n	800adc4 <_lseek_r+0x20>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	20000e70 	.word	0x20000e70

0800adcc <__ascii_mbtowc>:
 800adcc:	b082      	sub	sp, #8
 800adce:	2900      	cmp	r1, #0
 800add0:	d100      	bne.n	800add4 <__ascii_mbtowc+0x8>
 800add2:	a901      	add	r1, sp, #4
 800add4:	1e10      	subs	r0, r2, #0
 800add6:	d006      	beq.n	800ade6 <__ascii_mbtowc+0x1a>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d006      	beq.n	800adea <__ascii_mbtowc+0x1e>
 800addc:	7813      	ldrb	r3, [r2, #0]
 800adde:	600b      	str	r3, [r1, #0]
 800ade0:	7810      	ldrb	r0, [r2, #0]
 800ade2:	1e43      	subs	r3, r0, #1
 800ade4:	4198      	sbcs	r0, r3
 800ade6:	b002      	add	sp, #8
 800ade8:	4770      	bx	lr
 800adea:	2002      	movs	r0, #2
 800adec:	4240      	negs	r0, r0
 800adee:	e7fa      	b.n	800ade6 <__ascii_mbtowc+0x1a>

0800adf0 <__malloc_lock>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4802      	ldr	r0, [pc, #8]	; (800adfc <__malloc_lock+0xc>)
 800adf4:	f7ff f86f 	bl	8009ed6 <__retarget_lock_acquire_recursive>
 800adf8:	bd10      	pop	{r4, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	20000e64 	.word	0x20000e64

0800ae00 <__malloc_unlock>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	4802      	ldr	r0, [pc, #8]	; (800ae0c <__malloc_unlock+0xc>)
 800ae04:	f7ff f868 	bl	8009ed8 <__retarget_lock_release_recursive>
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	20000e64 	.word	0x20000e64

0800ae10 <_read_r>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	0004      	movs	r4, r0
 800ae14:	0008      	movs	r0, r1
 800ae16:	0011      	movs	r1, r2
 800ae18:	001a      	movs	r2, r3
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4d05      	ldr	r5, [pc, #20]	; (800ae34 <_read_r+0x24>)
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f8 fb5e 	bl	80034e0 <_read>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d103      	bne.n	800ae30 <_read_r+0x20>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d000      	beq.n	800ae30 <_read_r+0x20>
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd70      	pop	{r4, r5, r6, pc}
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	20000e70 	.word	0x20000e70

0800ae38 <__ascii_wctomb>:
 800ae38:	0003      	movs	r3, r0
 800ae3a:	1e08      	subs	r0, r1, #0
 800ae3c:	d005      	beq.n	800ae4a <__ascii_wctomb+0x12>
 800ae3e:	2aff      	cmp	r2, #255	; 0xff
 800ae40:	d904      	bls.n	800ae4c <__ascii_wctomb+0x14>
 800ae42:	228a      	movs	r2, #138	; 0x8a
 800ae44:	2001      	movs	r0, #1
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	4240      	negs	r0, r0
 800ae4a:	4770      	bx	lr
 800ae4c:	2001      	movs	r0, #1
 800ae4e:	700a      	strb	r2, [r1, #0]
 800ae50:	e7fb      	b.n	800ae4a <__ascii_wctomb+0x12>

0800ae52 <abort>:
 800ae52:	2006      	movs	r0, #6
 800ae54:	b510      	push	{r4, lr}
 800ae56:	f000 f82d 	bl	800aeb4 <raise>
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	f000 f85a 	bl	800af14 <_exit>

0800ae60 <_raise_r>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	0004      	movs	r4, r0
 800ae64:	000d      	movs	r5, r1
 800ae66:	291f      	cmp	r1, #31
 800ae68:	d904      	bls.n	800ae74 <_raise_r+0x14>
 800ae6a:	2316      	movs	r3, #22
 800ae6c:	6003      	str	r3, [r0, #0]
 800ae6e:	2001      	movs	r0, #1
 800ae70:	4240      	negs	r0, r0
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <_raise_r+0x24>
 800ae7a:	008a      	lsls	r2, r1, #2
 800ae7c:	189b      	adds	r3, r3, r2
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	2a00      	cmp	r2, #0
 800ae82:	d108      	bne.n	800ae96 <_raise_r+0x36>
 800ae84:	0020      	movs	r0, r4
 800ae86:	f000 f831 	bl	800aeec <_getpid_r>
 800ae8a:	002a      	movs	r2, r5
 800ae8c:	0001      	movs	r1, r0
 800ae8e:	0020      	movs	r0, r4
 800ae90:	f000 f81a 	bl	800aec8 <_kill_r>
 800ae94:	e7ed      	b.n	800ae72 <_raise_r+0x12>
 800ae96:	2000      	movs	r0, #0
 800ae98:	2a01      	cmp	r2, #1
 800ae9a:	d0ea      	beq.n	800ae72 <_raise_r+0x12>
 800ae9c:	1c51      	adds	r1, r2, #1
 800ae9e:	d103      	bne.n	800aea8 <_raise_r+0x48>
 800aea0:	2316      	movs	r3, #22
 800aea2:	3001      	adds	r0, #1
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	e7e4      	b.n	800ae72 <_raise_r+0x12>
 800aea8:	2400      	movs	r4, #0
 800aeaa:	0028      	movs	r0, r5
 800aeac:	601c      	str	r4, [r3, #0]
 800aeae:	4790      	blx	r2
 800aeb0:	0020      	movs	r0, r4
 800aeb2:	e7de      	b.n	800ae72 <_raise_r+0x12>

0800aeb4 <raise>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <raise+0x10>)
 800aeb8:	0001      	movs	r1, r0
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	f7ff ffd0 	bl	800ae60 <_raise_r>
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	2000040c 	.word	0x2000040c

0800aec8 <_kill_r>:
 800aec8:	2300      	movs	r3, #0
 800aeca:	b570      	push	{r4, r5, r6, lr}
 800aecc:	4d06      	ldr	r5, [pc, #24]	; (800aee8 <_kill_r+0x20>)
 800aece:	0004      	movs	r4, r0
 800aed0:	0008      	movs	r0, r1
 800aed2:	0011      	movs	r1, r2
 800aed4:	602b      	str	r3, [r5, #0]
 800aed6:	f000 f815 	bl	800af04 <_kill>
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	d103      	bne.n	800aee6 <_kill_r+0x1e>
 800aede:	682b      	ldr	r3, [r5, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d000      	beq.n	800aee6 <_kill_r+0x1e>
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	20000e70 	.word	0x20000e70

0800aeec <_getpid_r>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	f000 f801 	bl	800aef4 <_getpid>
 800aef2:	bd10      	pop	{r4, pc}

0800aef4 <_getpid>:
 800aef4:	2258      	movs	r2, #88	; 0x58
 800aef6:	2001      	movs	r0, #1
 800aef8:	4b01      	ldr	r3, [pc, #4]	; (800af00 <_getpid+0xc>)
 800aefa:	4240      	negs	r0, r0
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	4770      	bx	lr
 800af00:	20000e70 	.word	0x20000e70

0800af04 <_kill>:
 800af04:	2258      	movs	r2, #88	; 0x58
 800af06:	2001      	movs	r0, #1
 800af08:	4b01      	ldr	r3, [pc, #4]	; (800af10 <_kill+0xc>)
 800af0a:	4240      	negs	r0, r0
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	4770      	bx	lr
 800af10:	20000e70 	.word	0x20000e70

0800af14 <_exit>:
 800af14:	e7fe      	b.n	800af14 <_exit>
	...

0800af18 <_init>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	46c0      	nop			; (mov r8, r8)
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr

0800af24 <_fini>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	46c0      	nop			; (mov r8, r8)
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <__FLASH_Program_Fast_veneer>:
 800af30:	b401      	push	{r0}
 800af32:	4802      	ldr	r0, [pc, #8]	; (800af3c <__FLASH_Program_Fast_veneer+0xc>)
 800af34:	4684      	mov	ip, r0
 800af36:	bc01      	pop	{r0}
 800af38:	4760      	bx	ip
 800af3a:	bf00      	nop
 800af3c:	200005dd 	.word	0x200005dd

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 0800b650 0800b670 0800b630     ....P...p...0...
	...

20000470 <__global_locale>:
20000470:	00000043 00000000 00000000 00000000     C...............
	...
20000490:	00000043 00000000 00000000 00000000     C...............
	...
200004b0:	00000043 00000000 00000000 00000000     C...............
	...
200004d0:	00000043 00000000 00000000 00000000     C...............
	...
200004f0:	00000043 00000000 00000000 00000000     C...............
	...
20000510:	00000043 00000000 00000000 00000000     C...............
	...
20000530:	00000043 00000000 00000000 00000000     C...............
	...
20000550:	0800ae39 0800adcd 00000000 0800b843     9...........C...
20000560:	0800b841 0800b838 0800b838 0800b838     A...8...8...8...
20000570:	0800b838 0800b838 0800b838 0800b838     8...8...8...8...
20000580:	0800b838 0800b838 ffffffff ffffffff     8...8...........
20000590:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200005b8:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200005dc <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200005dc:	b580      	push	{r7, lr}
200005de:	b088      	sub	sp, #32
200005e0:	af00      	add	r7, sp, #0
200005e2:	6078      	str	r0, [r7, #4]
200005e4:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200005e6:	231f      	movs	r3, #31
200005e8:	18fb      	adds	r3, r7, r3
200005ea:	2200      	movs	r2, #0
200005ec:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200005ee:	687b      	ldr	r3, [r7, #4]
200005f0:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200005f2:	683b      	ldr	r3, [r7, #0]
200005f4:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200005f6:	4b1a      	ldr	r3, [pc, #104]	; (20000660 <FLASH_Program_Fast+0x84>)
200005f8:	695a      	ldr	r2, [r3, #20]
200005fa:	4b19      	ldr	r3, [pc, #100]	; (20000660 <FLASH_Program_Fast+0x84>)
200005fc:	2180      	movs	r1, #128	; 0x80
200005fe:	02c9      	lsls	r1, r1, #11
20000600:	430a      	orrs	r2, r1
20000602:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000604:	f3ef 8310 	mrs	r3, PRIMASK
20000608:	60fb      	str	r3, [r7, #12]
  return(result);
2000060a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000060c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000060e:	b672      	cpsid	i
}
20000610:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000612:	e00f      	b.n	20000634 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000614:	697a      	ldr	r2, [r7, #20]
20000616:	69bb      	ldr	r3, [r7, #24]
20000618:	6812      	ldr	r2, [r2, #0]
2000061a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000061c:	697b      	ldr	r3, [r7, #20]
2000061e:	3304      	adds	r3, #4
20000620:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000622:	69bb      	ldr	r3, [r7, #24]
20000624:	3304      	adds	r3, #4
20000626:	61bb      	str	r3, [r7, #24]
    index++;
20000628:	211f      	movs	r1, #31
2000062a:	187b      	adds	r3, r7, r1
2000062c:	781a      	ldrb	r2, [r3, #0]
2000062e:	187b      	adds	r3, r7, r1
20000630:	3201      	adds	r2, #1
20000632:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000634:	231f      	movs	r3, #31
20000636:	18fb      	adds	r3, r7, r3
20000638:	781b      	ldrb	r3, [r3, #0]
2000063a:	2b3f      	cmp	r3, #63	; 0x3f
2000063c:	d9ea      	bls.n	20000614 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000063e:	46c0      	nop			; (mov r8, r8)
20000640:	4b07      	ldr	r3, [pc, #28]	; (20000660 <FLASH_Program_Fast+0x84>)
20000642:	691a      	ldr	r2, [r3, #16]
20000644:	23c0      	movs	r3, #192	; 0xc0
20000646:	029b      	lsls	r3, r3, #10
20000648:	4013      	ands	r3, r2
2000064a:	d1f9      	bne.n	20000640 <FLASH_Program_Fast+0x64>
2000064c:	693b      	ldr	r3, [r7, #16]
2000064e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000650:	68bb      	ldr	r3, [r7, #8]
20000652:	f383 8810 	msr	PRIMASK, r3
}
20000656:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000658:	46c0      	nop			; (mov r8, r8)
2000065a:	46bd      	mov	sp, r7
2000065c:	b008      	add	sp, #32
2000065e:	bd80      	pop	{r7, pc}
20000660:	40022000 	.word	0x40022000
